<?xml version="1.0"?><doc><assembly><name>ActiproSoftware.CodeHighlighter.Net20</name></assembly><members><member name="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData"><summary>
            Provides the base requirements for an object that provides lexical parse data for a <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> for a mergable language.
            </summary></member><member name="P:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData.HighlightingStyle"><summary>
            Gets the <see cref="P:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData.HighlightingStyle" /> to use for drawing the token, if the token is aware of it.
            </summary><value>The <see cref="P:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData.HighlightingStyle" /> to use for drawing the token, if the token is aware of it.</value><remarks>
            In some languages, the token may not be aware of what highlighting style is used to draw it.
            In those cases, only the language itself knows what highlighting style to use for the token.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData.IsContentDivider"><summary>
            Gets whether the token is a content divider.
            </summary><value><c>true</c> if the token is a content divider; otherwise <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData.IsWhitespace"><summary>
            Gets whether the token represents whitespace.
            </summary><value><c>true</c> if the token represents whitespace; otherwise <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData.LexicalScope"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" />, if any, that defines the token.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" />, if any, that defines the token.</value><remarks>
            If this value is <see langword="null" />, the token was not defined by a lexical scope.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData.LexicalState"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that contains the token.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that contains the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData.Language"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> that contains the token.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> that contains the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData.TokenID"><summary>
            Gets the token ID assigned to the token.
            </summary><value>The token ID assigned to the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData.TokenKey"><summary>
            Gets the token key assigned to the token, if it is known.
            </summary><value>The token key assigned to the token, if it is known.</value></member><member name="T:ActiproSoftware.SyntaxEditor.ILexicalScope"><summary>
            Provides the base requirements for a lexical scope.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.ILexicalScope.IsScopeEnd(ActiproSoftware.SyntaxEditor.ITextBufferReader,ActiproSoftware.SyntaxEditor.ITokenLexicalParseData@)"><summary>
            Performs a lexical parse to determine if the current text in the <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader" /> ends the lexical scope.
            </summary><param name="reader">An <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader" /> that is reading a text source.</param><param name="lexicalParseData">Returns the <see cref="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData" /> that was parsed, if any.</param><returns>A <see cref="T:ActiproSoftware.SyntaxEditor.MatchType" /> indicating the type of match that was made.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.ILexicalScope.IsScopeStart(ActiproSoftware.SyntaxEditor.ITextBufferReader,ActiproSoftware.SyntaxEditor.ITokenLexicalParseData@)"><summary>
            Performs a lexical parse to determine if the current text in the <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader" /> starts the lexical scope.
            </summary><param name="reader">An <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader" /> that is reading a text source.</param><param name="lexicalParseData">Returns the <see cref="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData" /> that was parsed, if any.</param><returns>A <see cref="T:ActiproSoftware.SyntaxEditor.MatchType" /> indicating the type of match that was made.</returns></member><member name="P:ActiproSoftware.SyntaxEditor.ILexicalScope.AncestorEndScopeCheckEnabled"><summary>
            Gets whether ancestor end scope checking is enabled while parsing inside the scope.
            </summary><value><c>true</c> if ancestor end scope checking is enabled; otherwise, <c>false</c>.
            </value><remarks>
            When enabled, this allows ancestor scopes to be examined to see a pattern matches their end scope.
            In the event a match is found, this scope exits as well as the ancestor's scope.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.ILexicalScope.LexicalState"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that defines the lexical scope.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that defines the lexical scope.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ILexicalScope.LexicalStateTransition"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.SyntaxEditor.LexicalScopeLexicalStateTransition" /> that this scope performs after ending.
            </summary><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.LexicalScopeLexicalStateTransition" /> that this scope performs after ending.  
            If the value is <see langword="null" />, then no state transition is performed when the scope ends.
            </value><remarks>The state transition may be made to a child language.</remarks></member><member name="P:ActiproSoftware.SyntaxEditor.ILexicalScope.Tag"><summary>
            Gets or sets the object that contains user-defined data about the object.
            </summary><value>
            An <see cref="T:System.Object" /> that contains user-defined data about the control. The default is <see langword="null" />.
            </value><remarks>
            Any type derived from the <see cref="T:System.Object" /> class can be assigned to this property. 
            </remarks></member><member name="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicLexicalScope"><summary>
            Contains information about a lexical scope.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicLexicalScope.IsScopeEnd(ActiproSoftware.SyntaxEditor.ITextBufferReader,ActiproSoftware.SyntaxEditor.ITokenLexicalParseData@)"><summary>
            Performs a lexical parse to determine if the current text in the <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader" /> ends the lexical scope.
            </summary><param name="reader">An <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader" /> that is reading a text source.</param><param name="lexicalParseData">Returns the <see cref="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData" /> that was parsed, if any.</param><returns>A <see cref="T:ActiproSoftware.SyntaxEditor.MatchType" /> indicating the type of match that was made.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicLexicalScope.IsScopeStart(ActiproSoftware.SyntaxEditor.ITextBufferReader,ActiproSoftware.SyntaxEditor.ITokenLexicalParseData@)"><summary>
            Performs a lexical parse to determine if the current text in the <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader" /> starts the lexical scope.
            </summary><param name="reader">An <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader" /> that is reading a text source.</param><param name="lexicalParseData">Returns the <see cref="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData" /> that was parsed, if any.</param><returns>A <see cref="T:ActiproSoftware.SyntaxEditor.MatchType" /> indicating the type of match that was made.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicLexicalScope.OnParentChanged"><summary>
            Invoked when logical parent is changed. 
            This is invoked after the parent has changed, and the purpose is to allow elements to perform actions based on the changed parent.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicLexicalScope.#ctor"><summary>
            Initializes a new instance of the <c>DynamicLexicalScope</c> class.
            </summary></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicLexicalScope.AncestorEndScopeCheckEnabled"><summary>
            Gets or sets whether ancestor end scope checking is enabled while parsing inside the scope.
            </summary><value><c>true</c> if ancestor end scope checking is enabled; otherwise, <c>false</c>.
            </value><remarks>
            When enabled, this allows ancestor scopes to be examined to see a pattern matches their end scope.
            In the event a match is found, this scope exits as well as the ancestor's scope.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicLexicalScope.EndLexicalPatternGroup"><summary>
            Gets or sets the lexical pattern group that ends the scope.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" /> that ends the scope.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicLexicalScope.LexicalState"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that defines the lexical scope.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that defines the lexical scope.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicLexicalScope.LexicalStateTransition"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.SyntaxEditor.LexicalScopeLexicalStateTransition" /> that this scope performs after ending.
            </summary><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicLexicalScope" /> that this scope performs after ending.  
            If the value is <see langword="null" />, then no state transition is performed when the scope ends.
            </value><remarks>The state transition may be made to a child language.</remarks></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicLexicalScope.StartLexicalPatternGroup"><summary>
            Gets or sets the lexical pattern group that starts the scope.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" /> that starts the scope.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicLexicalScope.Tag"><summary>
            Gets or sets the object that contains user-defined data about the object.
            </summary><value>
            An <see cref="T:System.Object" /> that contains user-defined data about the control. The default is <see langword="null" />.
            </value><remarks>
            Any type derived from the <see cref="T:System.Object" /> class can be assigned to this property. 
            </remarks></member><member name="T:ActiproSoftware.SyntaxEditor.ILexicalState"><summary>
            Provides the base requirements for a lexical state.
            </summary></member><member name="P:ActiproSoftware.SyntaxEditor.ILexicalState.ChildLexicalStates"><summary>
            Gets the collection of child lexical states.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.LexicalStateCollection" /> containing the child lexical states.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ILexicalState.DefaultHighlightingStyle"><summary>
            Gets or sets the default <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" /> to use for tokens within the state.
            </summary><value>The default <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" /> to use for tokens within the state.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ILexicalState.DefaultTokenID"><summary>
            Gets or sets the ID of the default token that this state assigns.
            </summary><value>The ID of the default token that this state assigns.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ILexicalState.DefaultTokenKey"><summary>
            Gets or sets the key of the default token that this state assigns.
            </summary><value>The key of the default token that this state assigns.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ILexicalState.ID"><summary>
            Gets the ID value that identifies the lexical state.
            </summary><value>The ID value that identifies the lexical state.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ILexicalState.Language"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> that contains the state.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> that contains the state.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ILexicalState.LexicalScopes"><summary>
            Gets the collection of lexical scopes.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.LexicalScopeCollection" /> containing the lexical scopes.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ILexicalState.LexicalStateTransitionLexicalState"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that this state transitions to after a start scope match.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that this state transitions to after a start scope match.</value><remarks>
            This provides a mechanism to automatically transition to another language when this state's start scope is matched.
            This state's end scope may be used to exit the child language.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.ILexicalState.Tag"><summary>
            Gets or sets the object that contains user-defined data about the object.
            </summary><value>
            An <see cref="T:System.Object" /> that contains user-defined data about the control. The default is <see langword="null" />.
            </value><remarks>
            Any type derived from the <see cref="T:System.Object" /> class can be assigned to this property. 
            </remarks></member><member name="T:ActiproSoftware.SyntaxEditor.DefaultLexicalState"><summary>
            Provides the default implementation for a lexical state.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.DefaultLexicalState.#ctor(System.Int32,System.String)"><summary>
            Initializes a new instance of the <c>DefaultLexicalState</c> class.
            </summary><param name="id">The ID of the lexical state.</param><param name="key">The key of the lexical state.</param></member><member name="P:ActiproSoftware.SyntaxEditor.DefaultLexicalState.ChildLexicalStates"><summary>
            Gets the collection of child lexical states.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.LexicalStateCollection" /> containing the child lexical states.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DefaultLexicalState.DefaultHighlightingStyle"><summary>
            Gets or sets the default <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" /> to use for tokens within the state.
            </summary><value>The default <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" /> to use for tokens within the state.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DefaultLexicalState.DefaultTokenID"><summary>
            Gets or sets the ID of the default token that this state assigns.
            </summary><value>The ID of the default token that this state assigns.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DefaultLexicalState.DefaultTokenKey"><summary>
            Gets or sets the key of the default token that this state assigns.
            </summary><value>The key of the default token that this state assigns.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DefaultLexicalState.ID"><summary>
            Gets the ID value that identifies the lexical state.
            </summary><value>The ID value that identifies the lexical state.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DefaultLexicalState.Key"><summary>
            Gets a string-based key that identifies the lexical state.
            </summary><value>A string-based key that identifies the lexical state.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DefaultLexicalState.Language"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> that contains the state.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> that contains the state.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DefaultLexicalState.LexicalScopes"><summary>
            Gets the collection of lexical scopes.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.LexicalScopeCollection" /> containing the lexical scopes.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DefaultLexicalState.LexicalStateTransitionLexicalState"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that this state transitions to after a start scope match.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that this state transitions to after a start scope match.</value><remarks>
            This provides a mechanism to automatically transition to another language when this state's start scope is matched.
            This state's end scope may be used to exit the child language.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.DefaultLexicalState.Tag"><summary>
            Gets or sets the object that contains user-defined data about the object.
            </summary><value>
            An <see cref="T:System.Object" /> that contains user-defined data about the control. The default is <see langword="null" />.
            </value><remarks>
            Any type derived from the <see cref="T:System.Object" /> class can be assigned to this property. 
            </remarks></member><member name="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicLexicalState"><summary>
            Contains information about a lexical state.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicLexicalState.#ctor(System.String)"><summary>
            Initializes a new instance of the <c>DynamicLexicalState</c> class.
            </summary><param name="key">The key of the lexical state.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicLexicalState.#ctor(System.Int32,System.String)"><summary>
            Initializes a new instance of the <c>DynamicLexicalState</c> class.
            </summary><param name="id">The ID of the lexical state.</param><param name="key">The key of the lexical state.</param></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicLexicalState.LexicalPatternGroups"><summary>
            Gets the collection of lexical pattern groups.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroupCollection" /> containing the lexical pattern groups.</value></member><member name="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage"><summary>
            Provides the base requirements for a syntax-highlighting language definition to be used with a <see cref="N:ActiproSoftware.SyntaxEditor" /> control.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.AddChildLanguages(ActiproSoftware.SyntaxEditor.SyntaxLanguageCollection,System.Boolean)"><summary>
            Adds all child languages into the specified language collection.
            </summary><param name="languages">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguageCollection" /> into which the child languages should be added.</param><param name="recurse">Whether to recurse.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.ResetAutomaticOutliningBehavior"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.AutomaticOutliningBehavior" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.ShouldSerializeAutomaticOutliningBehavior"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.AutomaticOutliningBehavior" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.CreateDocumentEndToken(System.Int32,ActiproSoftware.SyntaxEditor.ILexicalState)"><summary>
            Creates an <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that represents the end of a document.
            </summary><param name="startOffset">The start offset of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.</param><param name="lexicalState">The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that contains the token.</param><returns>An <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that represents the end of a document.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.CreateInvalidToken(System.Int32,System.Int32,ActiproSoftware.SyntaxEditor.ILexicalState)"><summary>
            Creates an <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that represents an invalid range of text.
            </summary><param name="startOffset">The start offset of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.</param><param name="length">The length of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.</param><param name="lexicalState">The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that contains the token.</param><returns>An <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that represents an invalid range of text.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.ResetErrorDisplayEnabled"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.ErrorDisplayEnabled" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.ShouldSerializeErrorDisplayEnabled"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.ErrorDisplayEnabled" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.FormatDocument(ActiproSoftware.SyntaxEditor.Document)"><summary>
            Formats the code in the entire <see cref="T:ActiproSoftware.SyntaxEditor.Document" />.
            </summary><param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> to format.</param><remarks>
            Only call this method if the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.FormattingSupported" /> property is set to <c>true</c>.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.FormatTextRange(ActiproSoftware.SyntaxEditor.Document,ActiproSoftware.SyntaxEditor.TextRange)"><summary>
            Formats the code in the specified <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> of the <see cref="T:ActiproSoftware.SyntaxEditor.Document" />.
            </summary><param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> to format.</param><param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> to format.</param><remarks>
            Only call this method if the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.FormattingSupported" /> property is set to <c>true</c>.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.GetHighlightingStyle(ActiproSoftware.SyntaxEditor.IToken)"><summary>
            Returns the <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" /> for the specified <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </summary><param name="token">The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> to examine.</param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" /> for the specified <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.GetLanguageCollection(ActiproSoftware.SyntaxEditor.SyntaxLanguage)"><summary>
            Gets a collection of <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> objects including the specified language
            and all of its child languages.
            </summary><param name="rootLanguage">The root <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> to examine.</param><returns>
            A <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguageCollection" /> containing <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> objects.
            </returns><remarks>This procedure will recurse to find all instances of child languages.</remarks></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.GetTokenString(System.Int32)"><summary>
            Gets the token string representation for the specified token ID.
            </summary><param name="tokenID">The ID of the token to examine.</param><returns>The token string representation for the specified token ID.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.ResetLineCommentDelimiter"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.LineCommentDelimiter" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.ShouldSerializeLineCommentDelimiter"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.LineCommentDelimiter" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.OnChanged(ActiproSoftware.SyntaxEditor.SyntaxLanguageEventArgs)"><summary>
            Raises the <c>Changed</c> event.
            </summary><param name="e">A <c>SyntaxLanguageEventArgs</c> that contains the event data.</param><remarks>
            The <c>OnChanged</c> method also allows derived classes to handle the event without attaching a delegate. 
            This is the preferred technique for handling the event in a derived class.
            <para>
            When overriding <c>OnChanged</c> in a derived class, be sure to call the base class's 
            <c>OnChanged</c> method so that registered delegates receive the event.
            </para></remarks></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.OnDocumentAutomaticOutliningComplete(ActiproSoftware.SyntaxEditor.Document,ActiproSoftware.SyntaxEditor.DocumentModificationEventArgs)"><summary>
            Occurs after automatic outlining is performed on a <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> that uses this language.
            </summary><param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> that is being modified.</param><param name="e">A <c>DocumentModificationEventArgs</c> that contains the event data.</param><remarks>
            A <see cref="T:ActiproSoftware.SyntaxEditor.DocumentModification" /> may or may not be passed in the event arguments, depending on if the outlining
            is performed in the main thread.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.PerformAutomaticOutlining(ActiproSoftware.SyntaxEditor.Document,ActiproSoftware.SyntaxEditor.TextRange)"><summary>
            Performs automatic outlining over the specified <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> of the <see cref="T:ActiproSoftware.SyntaxEditor.Document" />.
            </summary><param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> to examine.</param><param name="parseTextRange">A <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> indicating the offset range to parse.</param><returns>A <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> containing the offset range that was modified by outlining.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.PerformLexicalParse(ActiproSoftware.SyntaxEditor.Document,ActiproSoftware.SyntaxEditor.TextRange,ActiproSoftware.SyntaxEditor.ILexicalParseTarget)"><summary>
            Lexically parses the specified <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> of the <see cref="T:ActiproSoftware.SyntaxEditor.Document" />.
            </summary><param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> to examine.</param><param name="parseTextRange">A <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> indicating the offset range to parse.</param><param name="parseTarget">The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalParseTarget" /> that receives the parsing output.</param><returns>A <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> containing the offset range that was modified.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.PerformSemanticParse(ActiproSoftware.SyntaxEditor.Document,ActiproSoftware.SyntaxEditor.TextRange,ActiproSoftware.SyntaxEditor.SemanticParseFlags)"><summary>
            Semantically parses the specified <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> of the <see cref="T:ActiproSoftware.SyntaxEditor.Document" />.
            </summary><param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> to examine.</param><param name="parseTextRange">A <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> indicating the offset range to parse.</param><param name="flags">A <see cref="T:ActiproSoftware.SyntaxEditor.SemanticParseFlags" /> that indicates semantic parse flags.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.SetOutliningNodeCollapsedText(ActiproSoftware.SyntaxEditor.OutliningNode)"><summary>
            Sets the <see cref="P:ActiproSoftware.SyntaxEditor.OutliningNode.CollapsedText" /> property for the specified <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNode" />
            prior to the node being collapsed.
            </summary><param name="node">The <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNode" /> that is requesting collapsed text.</param><remarks>
            The default implementation of this method does nothing.  In that case, the node will use default collapsed text.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.#ctor(System.String)"><summary>
            Initializes a new instance of the <c>SyntaxLanguage</c> class. 
            </summary><param name="key">The key of the language.</param></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.AutomaticOutliningBehavior"><summary>
            Gets or sets when automatic outlining should be performed.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.AutomaticOutliningBehavior" /> indicating when automatic outlining should be performed.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.AutoReplace"><summary>
            Gets an object that provides auto-replace functionality.
            </summary><value>
            An <see cref="T:ActiproSoftware.SyntaxEditor.AutoReplaceEntryCollection" /> that provides auto-replace functionality.
            </value><remarks>
            Language-specific auto-replace entries are checked before global editor auto-replace entries.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.BackColor"><summary>
            Gets or sets the background color of all tokens in the language.
            </summary><value>A <c>Color</c> indicating the background color of all tokens in the language.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.ChildLanguages"><summary>
            Gets the collection of child languages directly referenced by this language.
            </summary><value>
            A <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguageCollection" /> containing <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> objects.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.CodeBlockSelectionSupported"><summary>
            Gets whether code block selection features are supported by the language.
            </summary><value><c>true</c> if code block selection features are supported by the language; otherwise, <c>false</c>.
            </value><remarks>
            If this property is <c>true</c>, then the <see cref="!:CodeBlockSelectionExpand" /> and <see cref="!:CodeBlockSelectionContract" /> methods may be used.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.DefaultLexicalState"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that is entered when the language is entered.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that is entered when the language is entered.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.ErrorDisplayEnabled"><summary>
            Gets or sets whether automatic error display is enabled.
            </summary><value><c>true</c> if automatic error display is enabled; otherwise, <c>false</c>.
            </value><remarks>
            When enabled, if a <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> that uses this language has a <see cref="!:Document.SemanticParseData" />
            property containing an <see cref="!:ICompilationUnit" />, error indicators from that <see cref="!:ICompilationUnit" /> will be automatically added.
            This only occurs if the <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> is being edited within a <see cref="N:ActiproSoftware.SyntaxEditor" /> control.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.ExampleText"><summary>
            Gets or sets the example text for the language.
            </summary><value>The example text for the language.</value><remarks>
            Example text may be used when designing languages to test whether the language design is correct.
            It generally shows all combinations of text lexemes that needs to be tokenized.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.FormattingSupported"><summary>
            Gets whether code formatting features are supported by the language.
            </summary><value><c>true</c> if code formatting features are supported by the language; otherwise, <c>false</c>.
            </value><remarks>
            If this property is <c>true</c>, then the <see cref="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.FormatDocument(ActiproSoftware.SyntaxEditor.Document)" />, <see cref="!:FormatSelection" />, and <see cref="M:ActiproSoftware.SyntaxEditor.SyntaxLanguage.FormatTextRange(ActiproSoftware.SyntaxEditor.Document,ActiproSoftware.SyntaxEditor.TextRange)" /> methods may be used.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.HighlightingStyles"><summary>
            Gets the collection of highlighting styles.
            </summary><value>
            A <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyleCollection" /> containing <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" /> objects.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.IntelliPromptCodeSnippetsSupported"><summary>
            Gets whether IntelliPrompt code snippet features are supported by the language.
            </summary><value><c>true</c> if IntelliPrompt code snippet features are supported by the language; otherwise, <c>false</c>.
            </value><remarks>
            If this property is <c>true</c>, then the <see cref="!:ShowIntelliPromptInsertSnippetPopup" /> method may be used.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.IntelliPromptMemberListSupported"><summary>
            Gets whether IntelliPrompt member list features are supported by the language.
            </summary><value><c>true</c> if IntelliPrompt member list features are supported by the language; otherwise, <c>false</c>.
            </value><remarks>
            If this property is <c>true</c>, then the <see cref="!:IntelliPromptCompleteWord" /> and <see cref="!:ShowIntelliPromptMemberList" /> methods may be used.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.IntelliPromptParameterInfoSupported"><summary>
            Gets whether IntelliPrompt parameter info features are supported by the language.
            </summary><value><c>true</c> if IntelliPrompt parameter info features are supported by the language; otherwise, <c>false</c>.
            </value><remarks>
            If this property is <c>true</c>, then the <see cref="!:ShowIntelliPromptParameterInfo" /> method may be used.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.IntelliPromptQuickInfoSupported"><summary>
            Gets whether IntelliPrompt quick info features are supported by the language.
            </summary><value><c>true</c> if IntelliPrompt quick info features are supported by the language; otherwise, <c>false</c>.
            </value><remarks>
            If this property is <c>true</c>, then the <see cref="!:ShowIntelliPromptQuickInfo" /> method may be used.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.IsUpdating"><summary>
            Gets or sets whether the language is updating.
            </summary><value><c>true</c> if the language is updating; otherwise, <c>false</c>.
            </value><remarks>
            This flag should be set before run-time changes are made to the language and cleared immediately once the changes are complete.
            Any <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> objects that are using the language will be automatically updated when the update is complete.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.Key"><summary>
            Gets a string-based key that identifies the language.
            </summary><value>A string-based key that identifies the language.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.LexicalStates"><summary>
            Gets the collection of lexical states.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.LexicalStateCollection" /> containing the lexical states.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.LineCommentDelimiter"><summary>
            Gets or sets the delimiter to use when commenting and uncommenting lines.
            </summary><value>The delimiter to use when commenting and uncommenting lines.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.PlainText"><summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> that implements a default plain text parser.
            </summary><value>
            A <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> that implements a default plain text parser.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.Properties"><summary>
            Gets the collection of string-based properties for the language.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguagePropertyCollection" /> containing the properties.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.Site"><summary>
            Gets or sets the <see cref="T:System.ComponentModel.ISite" /> of the <see cref="T:System.ComponentModel.Component" />.
            </summary><value>The <see cref="T:System.ComponentModel.ISite" /> of the <see cref="T:System.ComponentModel.Component" />.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.SmartIndentSupported"><summary>
            Gets whether smart indent features are supported by the language.
            </summary><value><c>true</c> if smart indent features are supported by the language; otherwise, <c>false</c>.
            </value><remarks>
            If this property is <c>true</c>, then the language has implemented smart indent handler code in <see cref="!:OnSyntaxEditorSmartIndent" />.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.Tag"><summary>
            Gets or sets the object that contains user-defined data about the object.
            </summary><value>
            An <see cref="T:System.Object" /> that contains user-defined data about the control. The default is <see langword="null" />.
            </value><remarks>
            Any type derived from the <see cref="T:System.Object" /> class can be assigned to this property. 
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.Triggers"><summary>
            Gets the collection of <see cref="T:ActiproSoftware.SyntaxEditor.Trigger" /> objects defined for the language.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.TriggerCollection" /> specifying the <see cref="T:ActiproSoftware.SyntaxEditor.Trigger" /> objects for the language.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.UserInterfaceUpdateDelay"><summary>
            Gets or sets the delay (in milliseconds) after a document's text is changed before the <see cref="!:OnSyntaxEditorUserInterfaceUpdate" /> method is fired.
            </summary><value>The delay (in milliseconds) after a document's text is changed before the <see cref="!:OnSyntaxEditorUserInterfaceUpdate" /> method is fired.</value><remarks>
            Use this setting to control how many lines forward to lexically parse after a modification is made.
            It must be set to at least <c>0</c>.  For most languages this value does not need to change.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguage.WordBreakFinder"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.IWordBreakFinder" /> that is capable of locating word breaks for the language.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.IWordBreakFinder" /> that is capable of locating word breaks for the language.</value></member><member name="E:ActiproSoftware.SyntaxEditor.SyntaxLanguage.Changed"><summary>
            Occurs after the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> has been changed.
            </summary><eventdata>
            The event handler receives an argument of type <c>SyntaxLanguageEventArgs</c> containing data related to this event.
            </eventdata></member><member name="T:ActiproSoftware.SyntaxEditor.MergableSyntaxLanguage"><summary>
            Represents an abstract base language definition that provides features for a mergable language.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.MergableSyntaxLanguage.CreateToken(System.Int32,System.Int32,ActiproSoftware.SyntaxEditor.LexicalParseFlags,ActiproSoftware.SyntaxEditor.IToken,ActiproSoftware.SyntaxEditor.ITokenLexicalParseData)"><summary>
            Creates an <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that represents the range of text with the specified lexical parse data.
            </summary><param name="startOffset">The start offset of the token.</param><param name="length">The length of the token.</param><param name="lexicalParseFlags">The <see cref="T:ActiproSoftware.SyntaxEditor.LexicalParseFlags" /> for the token.</param><param name="parentToken">The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that starts the current state scope specified by the <see cref="P:ActiproSoftware.SyntaxEditor.IToken.LexicalState" /> property.</param><param name="lexicalParseData">The <see cref="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData" /> that contains lexical parse information about the token.</param><returns></returns></member><member name="M:ActiproSoftware.SyntaxEditor.MergableSyntaxLanguage.OnChanged(ActiproSoftware.SyntaxEditor.SyntaxLanguageEventArgs)"><summary>
            Raises the <c>Changed</c> event.
            </summary><param name="e">A <c>SyntaxLanguageEventArgs</c> that contains the event data.</param><remarks>
            The <c>OnChanged</c> method also allows derived classes to handle the event without attaching a delegate. 
            This is the preferred technique for handling the event in a derived class.
            <para>
            When overriding <c>OnChanged</c> in a derived class, be sure to call the base class's 
            <c>OnChanged</c> method so that registered delegates receive the event.
            </para></remarks></member><member name="M:ActiproSoftware.SyntaxEditor.MergableSyntaxLanguage.PerformLexicalParse(ActiproSoftware.SyntaxEditor.Document,ActiproSoftware.SyntaxEditor.TextRange,ActiproSoftware.SyntaxEditor.ILexicalParseTarget)"><summary>
            Lexically parses the specified <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> of the <see cref="T:ActiproSoftware.SyntaxEditor.Document" />.
            </summary><param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> to examine.</param><param name="parseTextRange">A <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> indicating the offset range to parse.</param><param name="parseTarget">The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalParseTarget" /> that receives the parsing output.</param><returns>A <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> containing the offset range that was modified.</returns><remarks>
            Do not override this method.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.MergableSyntaxLanguage.PerformSemanticParse(ActiproSoftware.SyntaxEditor.MergableLexicalParserManager)"><summary>
            Semantically parses the text in the <see cref="T:ActiproSoftware.SyntaxEditor.MergableLexicalParserManager" />.
            </summary><param name="manager">The <see cref="T:ActiproSoftware.SyntaxEditor.MergableLexicalParserManager" /> that is managing the mergable language and the text to parse.</param><returns>An object that contains the results of the semantic parsing operation.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.MergableSyntaxLanguage.#ctor(System.String)"><summary>
            Initializes a new instance of the <c>MergableSyntaxLanguage</c> class.
            </summary><param name="key">The key of the language.</param></member><member name="P:ActiproSoftware.SyntaxEditor.MergableSyntaxLanguage.LexicalParserLineLookAhead"><summary>
            Gets or sets the number of lines to lexical parse through when a modification is made.
            </summary><value>The number of lines to lexical parse through when a modification is made.</value><remarks>
            Use this setting to control how many lines forward to lexically parse after a modification is made.
            It must be set to at least <c>0</c>.  For most languages this value does not need to change.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.MergableSyntaxLanguage.LexicalParserLineLookBehind"><summary>
            Gets or sets the number of lines back to start lexical parsing from when a modification is made.
            </summary><value>The number of lines back to start lexical parsing from when a modification is made.</value><remarks>
            Use this setting to control how many lines back to lexically parse after a modification is made.
            It must be set to at least <c>1</c>.  For most languages this value does not need to change.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.MergableSyntaxLanguage.MergableLexicalParser"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.IMergableLexicalParser" /> that can be used for lexical parsing of the language.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.IMergableLexicalParser" /> that can be used for lexical parsing of the language.</value></member><member name="P:ActiproSoftware.SyntaxEditor.MergableSyntaxLanguage.WordBreakFinder"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.IWordBreakFinder" /> that is capable of locating word breaks for the language.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.IWordBreakFinder" /> that is capable of locating word breaks for the language.</value></member><member name="T:ActiproSoftware.SyntaxEditor.IMergableLexicalParser"><summary>
            Provides the base requirements for a lexical parser for a language that supports merging with other languages.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.IMergableLexicalParser.GetLexicalStateDefaultTokenLexicalParseData(ActiproSoftware.SyntaxEditor.ITextBufferReader,ActiproSoftware.SyntaxEditor.ILexicalState)"><summary>
            Returns a single-character <see cref="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData" /> representing the lexical parse data for the
            default token in the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> and seeks forward one position in the <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader" /></summary><param name="reader">An <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader" /> that is reading a text source.</param><param name="lexicalState">The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that specifies the current context.</param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData" /> for default text in the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" />.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.IMergableLexicalParser.GetNextTokenLexicalParseData(ActiproSoftware.SyntaxEditor.ITextBufferReader,ActiproSoftware.SyntaxEditor.ILexicalState,ActiproSoftware.SyntaxEditor.ITokenLexicalParseData@)"><summary>
            Performs a lexical parse to return the next <see cref="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData" /> 
            from a <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader" /> and seeks past it if there is a match.
            </summary><param name="reader">An <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader" /> that is reading a text source.</param><param name="lexicalState">The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that specifies the current context.</param><param name="lexicalParseData">Returns the next <see cref="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData" /> from a <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader" />.</param><returns>A <see cref="T:ActiproSoftware.SyntaxEditor.MatchType" /> indicating the type of match that was made.</returns></member><member name="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicSyntaxLanguage"><summary>
            Represents a syntax highlighting language that is defined using an XML lexical grammar or created programmatically.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicSyntaxLanguage.CreateDocumentEndToken(System.Int32,ActiproSoftware.SyntaxEditor.ILexicalState)"><summary>
            Creates an <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that represents the end of a document.
            </summary><param name="startOffset">The start offset of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.</param><param name="lexicalState">The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that contains the token.</param><returns>An <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that represents the end of a document.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicSyntaxLanguage.CreateInvalidToken(System.Int32,System.Int32,ActiproSoftware.SyntaxEditor.ILexicalState)"><summary>
            Creates an <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that represents an invalid range of text.
            </summary><param name="startOffset">The start offset of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.</param><param name="length">The length of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.</param><param name="lexicalState">The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that contains the token.</param><returns>An <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that represents an invalid range of text.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicSyntaxLanguage.CreateToken(System.Int32,System.Int32,ActiproSoftware.SyntaxEditor.LexicalParseFlags,ActiproSoftware.SyntaxEditor.IToken,ActiproSoftware.SyntaxEditor.ITokenLexicalParseData)"><summary>
            Creates an <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that represents the range of text with the specified lexical parse data.
            </summary><param name="startOffset">The start offset of the token.</param><param name="length">The length of the token.</param><param name="lexicalParseFlags">The <see cref="T:ActiproSoftware.SyntaxEditor.LexicalParseFlags" /> for the token.</param><param name="parentToken">The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that starts the current state scope specified by the <see cref="P:ActiproSoftware.SyntaxEditor.IToken.LexicalState" /> property.</param><param name="lexicalParseData">The <see cref="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData" /> that contains lexical parse information about the token.</param><returns></returns></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicSyntaxLanguage.GetHighlightingStyle(ActiproSoftware.SyntaxEditor.IToken)"><summary>
            Returns the <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" /> for the specified <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </summary><param name="token">The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> to examine.</param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" /> for the specified <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicSyntaxLanguage.LoadFromXml(System.String,System.Int32)"><summary>
            Loads a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicSyntaxLanguage" /> from a language definition XML file.
            </summary><param name="path">The full path to the language definition file to load.</param><param name="encryptionKey">
            The encryption key to use for descrambling the data.
            An encryption key of <c>0</c> means not to decrypt the data.
            </param><returns>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicSyntaxLanguage" /> representing the language that was loaded.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicSyntaxLanguage.LoadFromXml(System.IO.Stream,System.Int32)"><summary>
            Deserializes a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicSyntaxLanguage" /> from a language definition XML stream.
            </summary><param name="stream">A <see cref="T:System.IO.Stream" /> containing the data to deserialize.</param><param name="encryptionKey">
            The encryption key to use for descrambling the data.
            An encryption key of <c>0</c> means not to decrypt the data.
            </param><returns>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicSyntaxLanguage" /> representing the language that was loaded.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicSyntaxLanguage.OnChanged(ActiproSoftware.SyntaxEditor.SyntaxLanguageEventArgs)"><summary>
            Raises the <c>Changed</c> event.
            </summary><param name="e">A <c>SyntaxLanguageEventArgs</c> that contains the event data.</param><remarks>
            The <c>OnChanged</c> method also allows derived classes to handle the event without attaching a delegate. 
            This is the preferred technique for handling the event in a derived class.
            <para>
            When overriding <c>OnChanged</c> in a derived class, be sure to call the base class's 
            <c>OnChanged</c> method so that registered delegates receive the event.
            </para></remarks></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicSyntaxLanguage.SaveToXml(System.String,System.Int32)"><summary>
            Saves the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> to a language definition XML file.
            </summary><param name="path">The full path to the language definition file to save.</param><param name="encryptionKey">
            The encryption key to use for scrambling the data.
            An encryption key of <c>0</c> means not to encrypt the data, but can only be used if
            the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicSyntaxLanguage.Secure" /> property is set to <see langword="false" />.
            </param></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicSyntaxLanguage.SaveToXml(System.IO.Stream,System.Int32)"><summary>
            Serializes the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> to a language definition XML stream.
            </summary><param name="stream">The <see cref="T:System.IO.Stream" /> into which the language should be serialized.</param><param name="encryptionKey">
            The encryption key to use for scrambling the data.
            An encryption key of <c>0</c> means not to encrypt the data, but can only be used if
            the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicSyntaxLanguage.Secure" /> property is set to <see langword="false" />.
            </param></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicSyntaxLanguage.#ctor"><summary>
            This constructor is for designer use only and should never be called by your code.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicSyntaxLanguage.#ctor(System.ComponentModel.IContainer)"><summary>
            This constructor is for designer use only and should never be called by your code.
            </summary><param name="container">An <see cref="T:System.ComponentModel.IContainer"></see> that represents the container for the component.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicSyntaxLanguage.#ctor(System.String,System.Boolean)"><summary>
            Initializes a new instance of the <c>DynamicSyntaxLanguage</c> class. 
            </summary><param name="key">The key of the language.</param><param name="secure">Whether the language is secure.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicSyntaxLanguage.#ctor(System.Reflection.Assembly,System.String,System.Int32)"><summary>
            Initializes a new instance of the <c>DynamicSyntaxLanguage</c> class. 
            </summary><param name="assembly">The <see cref="T:System.Reflection.Assembly" /> that contains the manifest resource.</param><param name="manifestResourceName">The full name of the manifest resource XML language definition to load into the language.</param><param name="encryptionKey">
            The encryption key to use for descrambling the data.
            An encryption key of <c>0</c> means not to decrypt the data.
            </param></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicSyntaxLanguage.DefinitionXml"><summary>
            This property is for designer use only and should never be called by your code.
            </summary><value>The language definition XML represented by this language.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicSyntaxLanguage.LexicalMacros"><summary>
            Gets the collection of lexical macros.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacroCollection" /> containing the lexical macros.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicSyntaxLanguage.LexicalStateIDType"><summary>
            Gets or sets the <see cref="T:System.Type" /> to use when writing out lexical state <c>ID</c> attribute values to an XML language definition.
            </summary><value>The <see cref="T:System.Type" /> to use when writing out lexical state <c>ID</c> attribute values to an XML language definition.</value><remarks>
            If simple numeric values are desired for lexical state <c>ID</c> output, leave this property set to <see langword="null" />.
            Otherwise, a constant or enumeration member in the <see cref="T:System.Type" /> will be looked for that matches the key of
            each token and has the lexical state <c>ID</c> value and that will be written out instead of the actual lexical state <c>ID</c> value.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicSyntaxLanguage.MergableLexicalParser"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.IMergableLexicalParser" /> that can be used for lexical parsing of the language.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.IMergableLexicalParser" /> that can be used for lexical parsing of the language.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicSyntaxLanguage.Secure"><summary>
            Gets whether the language is secure or can be saved in unencrypted XML format.
            </summary><value><c>true</c> if the language can be saved in unencrypted XML format; otherwise, <c>false</c>.
            </value><remarks>
            This property may only be set in the XML language definition.
            If set to <c>false</c>, the language and all its child languages may be saved in unencrypted XML format by
            calling the <see cref="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicSyntaxLanguage.SaveToXml(System.String,System.Int32)" /> method with an encryption key of <c>0</c>.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicSyntaxLanguage.TokenIDType"><summary>
            Gets or sets the <see cref="T:System.Type" /> to use when writing out <c>TokenID</c> attribute values to an XML language definition.
            </summary><value>The <see cref="T:System.Type" /> to use when writing out <c>TokenID</c> attribute values to an XML language definition.</value><remarks>
            If simple numeric values are desired for <c>TokenID</c> output, leave this property set to <see langword="null" />.
            Otherwise, a constant or enumeration member in the <see cref="T:System.Type" /> will be looked for that matches the key of
            each token and has the <c>TokenID</c> value and that will be written out instead of the actual <c>TokenID</c> value.
            </remarks></member><member name="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicOutliningSyntaxLanguage"><summary>
            Represents a syntax highlighting language that is defined using an XML lexical grammar or created programmatically, 
            and has some helper methods for performing automatic outlining.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicOutliningSyntaxLanguage.GetTokenOutliningAction(ActiproSoftware.SyntaxEditor.TokenStream,System.String@,ActiproSoftware.SyntaxEditor.OutliningNodeAction@)"><summary>
            Returns token parsing information for automatic outlining that determines if the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />
            in the <see cref="T:ActiproSoftware.SyntaxEditor.TokenStream" /> starts or ends an outlining node.
            </summary><param name="tokenStream">A <see cref="T:ActiproSoftware.SyntaxEditor.TokenStream" /> that is positioned at the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> requiring outlining data.</param><param name="outliningKey">Returns the outlining node key to assign.  A <see langword="null" /> should be returned if the token doesn't start or end a node.</param><param name="tokenAction">Returns the <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNodeAction" /> to take for the token.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicOutliningSyntaxLanguage.PerformAutomaticOutlining(ActiproSoftware.SyntaxEditor.Document,ActiproSoftware.SyntaxEditor.TextRange)"><summary>
            Performs automatic outlining over the specified <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> of the <see cref="T:ActiproSoftware.SyntaxEditor.Document" />.
            </summary><param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> to examine.</param><param name="parseTextRange">A <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> indicating the offset range to parse.</param><returns>A <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> containing the offset range that was modified by outlining.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicOutliningSyntaxLanguage.#ctor"><summary>
            This constructor is for designer use only and should never be called by your code.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicOutliningSyntaxLanguage.#ctor(System.String,System.Boolean)"><summary>
            Initializes a new instance of the <c>DynamicOutliningSyntaxLanguage</c> class. 
            </summary><param name="key">The key of the language.</param><param name="secure">Whether the language is secure.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicOutliningSyntaxLanguage.#ctor(System.Reflection.Assembly,System.String,System.Int32)"><summary>
            Initializes a new instance of the <c>DynamicOutliningSyntaxLanguage</c> class. 
            </summary><param name="assembly">The <see cref="T:System.Reflection.Assembly" /> that contains the manifest resource.</param><param name="manifestResourceName">The full name of the manifest resource XML language definition to load into the language.</param><param name="encryptionKey">
            The encryption key to use for descrambling the data.
            An encryption key of <c>0</c> means not to decrypt the data.
            </param></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicOutliningSyntaxLanguage.AutoOutlineLanguageTransitions"><summary>
            Gets whether to automatically outline language transitions.
            </summary><value><c>true</c> if language transitions should be automatically outlined; otherwise, <c>false</c>.
            The default value is <c>true</c>.
            </value><remarks>Override this property and return <c>false</c> if you wish to change the default behavior.</remarks></member><member name="T:ActiproSoftware.SyntaxEditor.IToken"><summary>
            Represents the base requirements for a token that has been assigned to a span of document text by a lexical parser.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.IToken.Clone(System.Int32,System.Int32)"><summary>
            Clones the data in the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </summary><param name="startOffset">The <see cref="P:ActiproSoftware.SyntaxEditor.IToken.StartOffset" /> of the cloned object.</param><param name="length">The length of the cloned object.</param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that was created.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.IToken.Contains(System.Int32)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> contains the specified offset.
            </summary><param name="offset">The offset to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> contains the specified offset; otherwise, <c>false</c>.
            </returns><remarks>
            This method returns <c>false</c> if the offset falls on the <see cref="P:ActiproSoftware.SyntaxEditor.IToken.EndOffset" /> offset
            since this method indicates if the offset is encompassed by the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.IToken.HasFlag(ActiproSoftware.SyntaxEditor.LexicalParseFlags)"><summary>
            Returns whether the parse data has the specified <see cref="T:ActiproSoftware.SyntaxEditor.LexicalParseFlags" /> flag.
            </summary><param name="flag">The <see cref="T:ActiproSoftware.SyntaxEditor.LexicalParseFlags" /> to check for.</param><returns><c>true</c> if the parse data has the specified <see cref="T:ActiproSoftware.SyntaxEditor.LexicalParseFlags" /> flag; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.IToken.ParseDataEquals(ActiproSoftware.SyntaxEditor.IToken)"><summary>
            Returns whether the parse data in this <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> is the same as the parse data in the specified <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </summary><param name="token">The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> with which to compare.</param><returns><c>true</c> if the parse data is the same in both <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> objects; otherwise, <c>false</c>.
            </returns><remarks>
            This method is called during lexical parsing to determine whether this token is equivalent in parse data to the specified <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            If it is not properly implemented then custom lexical parsing in non-mergable languages may not update tokens correctly.
            For non-mergable languages, this method needs to be implemented to compare things like token ID and lexical state ID between
            the two tokens.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.IToken.SetFlag(ActiproSoftware.SyntaxEditor.LexicalParseFlags,System.Boolean)"><summary>
            Sets or clears the specified <see cref="T:ActiproSoftware.SyntaxEditor.LexicalParseFlags" /> flag.
            </summary><param name="flag">The <see cref="T:ActiproSoftware.SyntaxEditor.LexicalParseFlags" /> to set or clear.</param><param name="setBit">Whether to set the flag; otherwise, the flag is cleared.</param><remarks>This method should only be called by lexical parsers.</remarks></member><member name="P:ActiproSoftware.SyntaxEditor.IToken.AutoCaseCorrectText"><summary>
            Gets the text that should be used for this <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> when performing an auto case correction operation on it.
            </summary><value>The text that should be used for this <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> when performing an auto case correction operation on it.</value><remarks>
            Return a <see langword="null" /> value to indicate that there is no auto case correction text available.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.IToken.ContentDividerType"><summary>
            Gets or sets the type of content divider to apply to the token.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.TokenContentDividerType" /> indicating the type of content divider to apply to the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.IToken.ContentDividerTypeResolved"><summary>
            Gets the resolved type of content divider to apply to the token.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.TokenContentDividerType" /> indicating the type of content divider to apply to the token.</value><remarks>
            If the value of the <see cref="P:ActiproSoftware.SyntaxEditor.IToken.ContentDividerType" /> property is <c>TokenContentDividerType.LexicalPatternGroup</c>,
            this property returns the type of content divider defined by the dynamic language 
            <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" />.
            Otherwise it should return the value of the <see cref="P:ActiproSoftware.SyntaxEditor.IToken.ContentDividerType" />.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.IToken.DeclaringLexicalState"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that declares pattern that matched the token.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that declares pattern that matched the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.IToken.EndOffset"><summary>
            Gets the offset after the last character in the token.
            </summary><value>The offset after the last character in the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.IToken.HighlightingStyle"><summary>
            Gets the <see cref="P:ActiproSoftware.SyntaxEditor.IToken.HighlightingStyle" /> to use for drawing the token, if the token is aware of it.
            </summary><value>The <see cref="P:ActiproSoftware.SyntaxEditor.IToken.HighlightingStyle" /> to use for drawing the token, if the token is aware of it.</value><remarks>
            In some languages, the token may not be aware of what highlighting style is used to draw it.
            In those cases, only the language itself knows what highlighting style to use for the token.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.IToken.ID"><summary>
            Gets the ID assigned to the token.
            </summary><value>The ID assigned to the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.IToken.IsComment"><summary>
            Gets whether the token represents a comment.
            </summary><value><c>true</c> if the token represents a comment; otherwise <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.IToken.IsDocumentEnd"><summary>
            Gets whether the token marks the end of the document.
            </summary><value><c>true</c> if the token marks the end of the document; otherwise <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.IToken.IsInvalid"><summary>
            Gets whether the token marks an invalid range of text.
            </summary><value><c>true</c> if the token marks invalid range of text; otherwise <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.IToken.IsPaired"><summary>
            Gets whether the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> is paired to another <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </summary><value><c>true</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> is paired to another <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />; otherwise, <c>false</c>.
            </value><remarks>
            A token pair is generally a pair of brackets.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.IToken.IsPairedEnd"><summary>
            Gets whether the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> is the end <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> of an <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> pair.
            </summary><value><c>true</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> is the end <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> of an <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> pair; otherwise, <c>false</c>.
            </value><remarks>
            A token pair is generally a pair of brackets.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.IToken.IsPairedStart"><summary>
            Gets whether the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> is the start <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> of an <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> pair.
            </summary><value><c>true</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> is the start <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> of an <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> pair; otherwise, <c>false</c>.
            </value><remarks>
            A token pair is generally a pair of brackets.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.IToken.IsWhitespace"><summary>
            Gets whether the token represents whitespace.
            </summary><value><c>true</c> if the token represents whitespace; otherwise <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.IToken.Key"><summary>
            Gets the key assigned to the token.
            </summary><value>The key assigned to the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.IToken.Language"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> that contains the token.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> that contains the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.IToken.Length"><summary>
            Gets or sets the absolute length of the token.
            </summary><value>The absolute length of the token.</value><remarks>
            The setter for this property is for internal use only.  Altering its value will corrupt the <see cref="T:ActiproSoftware.SyntaxEditor.Document" /><see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> collection.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.IToken.LexicalScope"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" />, if any, that defines the token.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" />, if any, that defines the token.</value><remarks>
            If this value is <see langword="null" />, the token was not defined by a lexical scope.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.IToken.LexicalState"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that contains the token.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that contains the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.IToken.LexicalStateID"><summary>
            Gets the ID assigned to the lexical state.
            </summary><value>The ID assigned to the lexical state.</value></member><member name="P:ActiproSoftware.SyntaxEditor.IToken.MatchingTokenID"><summary>
            Gets the ID of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that matches this <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> if this token is paired.
            </summary><value>The ID of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that matches this <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> if this token is paired.</value></member><member name="P:ActiproSoftware.SyntaxEditor.IToken.NestingDepth"><summary>
            Gets the nesting depth of the token.
            </summary><value>The nesting depth of the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.IToken.ParentToken"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that starts the current state scope specified by the <see cref="P:ActiproSoftware.SyntaxEditor.IToken.LexicalState" /> property.
            </summary><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that starts the current state scope specified by the <see cref="P:ActiproSoftware.SyntaxEditor.IToken.LexicalState" /> property.
            </value><remarks>
            This value may be <see langword="null" /> if the state in the <see cref="P:ActiproSoftware.SyntaxEditor.IToken.LexicalState" /> property is the root state
            in the document.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.IToken.StartOffset"><summary>
            Gets or sets the offset of the first character in the token.
            </summary><value>The offset of the first character in the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.IToken.TextRange"><summary>
            Gets a <see cref="P:ActiproSoftware.SyntaxEditor.IToken.TextRange" /> that specifies the text range of the token.
            </summary><value>A <see cref="P:ActiproSoftware.SyntaxEditor.IToken.TextRange" /> that specifies the text range of the token.</value></member><member name="T:ActiproSoftware.SyntaxEditor.TokenBase"><summary>
            Represents the base class for an <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> implementation.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.TokenBase.Clone(System.Int32,System.Int32)"><summary>
            Clones the data in the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </summary><param name="startOffset">The <see cref="P:ActiproSoftware.SyntaxEditor.TokenBase.StartOffset" /> of the cloned object.</param><param name="length">The length of the cloned object.</param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that was created.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.TokenBase.Contains(System.Int32)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> contains the specified offset.
            </summary><param name="offset">The offset to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> contains the specified offset; otherwise, <c>false</c>.
            </returns><remarks>
            This method returns <c>false</c> if the offset falls on the <see cref="P:ActiproSoftware.SyntaxEditor.TokenBase.EndOffset" /> offset
            since this method indicates if the offset is encompassed by the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.TokenBase.HasFlag(ActiproSoftware.SyntaxEditor.LexicalParseFlags)"><summary>
            Returns whether the parse data has the specified <see cref="T:ActiproSoftware.SyntaxEditor.LexicalParseFlags" /> flag.
            </summary><param name="flag">The <see cref="T:ActiproSoftware.SyntaxEditor.LexicalParseFlags" /> to check for.</param><returns><c>true</c> if the parse data has the specified <see cref="T:ActiproSoftware.SyntaxEditor.LexicalParseFlags" /> flag; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.TokenBase.ParseDataEquals(ActiproSoftware.SyntaxEditor.IToken)"><summary>
            Returns whether the parse data in this <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> is the same as the parse data in the specified <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </summary><param name="token">The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> with which to compare.</param><returns><c>true</c> if the parse data is the same in both <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> objects; otherwise, <c>false</c>.
            </returns><remarks>
            This method is called during lexical parsing to determine whether this token is equivalent in parse data to the specified <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            If it is not properly implemented then custom lexical parsing in non-mergable languages may not update tokens correctly.
            For non-mergable languages, this method needs to be implemented to compare things like token ID and lexical state ID between
            the two tokens.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.TokenBase.SetFlag(ActiproSoftware.SyntaxEditor.LexicalParseFlags,System.Boolean)"><summary>
            Sets or clears the specified <see cref="T:ActiproSoftware.SyntaxEditor.LexicalParseFlags" /> flag.
            </summary><param name="flag">The <see cref="T:ActiproSoftware.SyntaxEditor.LexicalParseFlags" /> to set or clear.</param><param name="setBit">Whether to set the flag; otherwise, the flag is cleared.</param><remarks>This method should only be called by lexical parsers.</remarks></member><member name="M:ActiproSoftware.SyntaxEditor.TokenBase.ToString"><summary>
            Creates and returns a string representation of the current object.
            </summary><returns>A string representation of the current object.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.TokenBase.ToString(System.String)"><summary>
            Creates and returns a string representation of the current object.
            </summary><param name="tokenDescription">The description of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.</param><returns>A string representation of the current object.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.TokenBase.#ctor(System.Int32)"><summary>
            Initializes a new instance of the <c>TokenBase</c> class.
            </summary><param name="startOffset">The start offset of the token.</param></member><member name="P:ActiproSoftware.SyntaxEditor.TokenBase.AutoCaseCorrectText"><summary>
            Gets the text that should be used for this <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> when performing an auto case correction operation on it.
            </summary><value>The text that should be used for this <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> when performing an auto case correction operation on it.</value><remarks>
            Return a <see langword="null" /> value to indicate that there is no auto case correction text available.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.TokenBase.ContentDividerType"><summary>
            Gets or sets the type of content divider to apply to the token.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.TokenContentDividerType" /> indicating the type of content divider to apply to the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TokenBase.ContentDividerTypeResolved"><summary>
            Gets the resolved type of content divider to apply to the token.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.TokenContentDividerType" /> indicating the type of content divider to apply to the token.</value><remarks>
            If the value of the <see cref="P:ActiproSoftware.SyntaxEditor.TokenBase.ContentDividerType" /> property is <c>TokenContentDividerType.LexicalPatternGroup</c>,
            this property returns the type of content divider defined by the dynamic language 
            <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" />.
            Otherwise it should return the value of the <see cref="P:ActiproSoftware.SyntaxEditor.TokenBase.ContentDividerType" />.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.TokenBase.DeclaringLexicalState"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that declares pattern that matched the token.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that declares pattern that matched the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TokenBase.EndOffset"><summary>
            Gets the offset after the last character in the token.
            </summary><value>The offset after the last character in the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TokenBase.HighlightingStyle"><summary>
            Gets the <see cref="P:ActiproSoftware.SyntaxEditor.TokenBase.HighlightingStyle" /> to use for drawing the token, if the token is aware of it.
            </summary><value>The <see cref="P:ActiproSoftware.SyntaxEditor.TokenBase.HighlightingStyle" /> to use for drawing the token, if the token is aware of it.</value><remarks>
            In some languages, the token may not be aware of what highlighting style is used to draw it.
            In those cases, only the language itself knows what highlighting style to use for the token.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.TokenBase.ID"><summary>
            Gets the ID assigned to the token.
            </summary><value>The ID assigned to the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TokenBase.IsComment"><summary>
            Gets whether the token represents a comment.
            </summary><value><c>true</c> if the token represents a comment; otherwise <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.TokenBase.IsDocumentEnd"><summary>
            Gets whether the token marks the end of the document.
            </summary><value><c>true</c> if the token marks the end of the document; otherwise <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.TokenBase.IsInvalid"><summary>
            Gets whether the token marks an invalid range of text.
            </summary><value><c>true</c> if the token marks invalid range of text; otherwise <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.TokenBase.IsPaired"><summary>
            Gets whether the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> is paired to another <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </summary><value><c>true</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> is paired to another <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />; otherwise, <c>false</c>.
            </value><remarks>
            A token pair is generally a pair of brackets.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.TokenBase.IsPairedEnd"><summary>
            Gets whether the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> is the end <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> of an <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> pair.
            </summary><value><c>true</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> is the end <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> of an <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> pair; otherwise, <c>false</c>.
            </value><remarks>
            A token pair is generally a pair of brackets.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.TokenBase.IsPairedStart"><summary>
            Gets whether the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> is the start <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> of an <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> pair.
            </summary><value><c>true</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> is the start <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> of an <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> pair; otherwise, <c>false</c>.
            </value><remarks>
            A token pair is generally a pair of brackets.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.TokenBase.IsWhitespace"><summary>
            Gets whether the token represents whitespace.
            </summary><value><c>true</c> if the token represents whitespace; otherwise <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.TokenBase.Key"><summary>
            Gets the key assigned to the token.
            </summary><value>The key assigned to the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TokenBase.Language"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> that contains the token.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> that contains the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TokenBase.Length"><summary>
            Gets or sets the absolute length of the token.
            </summary><value>The absolute length of the token.</value><remarks>
            The setter for this property is for internal use only.  Altering its value will corrupt the <see cref="T:ActiproSoftware.SyntaxEditor.Document" /><see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> collection.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.TokenBase.LexicalScope"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" />, if any, that defines the token.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" />, if any, that defines the token.</value><remarks>
            If this value is <see langword="null" />, the token was not defined by a lexical scope.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.TokenBase.LexicalState"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that contains the token.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that contains the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TokenBase.LexicalStateID"><summary>
            Gets the ID assigned to the lexical state.
            </summary><value>The ID assigned to the lexical state.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TokenBase.MatchingTokenID"><summary>
            Gets the ID of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that matches this <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> if this token is paired.
            </summary><value>The ID of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that matches this <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> if this token is paired.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TokenBase.NestingDepth"><summary>
            Gets the nesting depth of the token.
            </summary><value>The nesting depth of the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TokenBase.ParentToken"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that starts the current state scope specified by the <see cref="P:ActiproSoftware.SyntaxEditor.TokenBase.LexicalState" /> property.
            </summary><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that starts the current state scope specified by the <see cref="P:ActiproSoftware.SyntaxEditor.TokenBase.LexicalState" /> property.
            </value><remarks>
            This value may be <see langword="null" /> if the state in the <see cref="P:ActiproSoftware.SyntaxEditor.TokenBase.LexicalState" /> property is the root state
            in the document.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.TokenBase.StartOffset"><summary>
            Gets or sets the offset of the first character in the token.
            </summary><value>The offset of the first character in the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TokenBase.TextRange"><summary>
            Gets a <see cref="P:ActiproSoftware.SyntaxEditor.TokenBase.TextRange" /> that specifies the text range of the token.
            </summary><value>A <see cref="P:ActiproSoftware.SyntaxEditor.TokenBase.TextRange" /> that specifies the text range of the token.</value></member><member name="T:ActiproSoftware.SyntaxEditor.MergableToken"><summary>
            Represents the default implementation of a <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that can be used with a <see cref="T:ActiproSoftware.SyntaxEditor.MergableSyntaxLanguage" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.MergableToken.Clone(System.Int32,System.Int32)"><summary>
            Clones the data in the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </summary><param name="startOffset">The <see cref="P:ActiproSoftware.SyntaxEditor.IToken.StartOffset" /> of the cloned object.</param><param name="length">The length of the cloned object.</param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that was created.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.MergableToken.HasFlag(ActiproSoftware.SyntaxEditor.LexicalParseFlags)"><summary>
            Returns whether the parse data has the specified <see cref="P:ActiproSoftware.SyntaxEditor.MergableToken.LexicalParseFlags" /> flag.
            </summary><param name="flag">The <see cref="P:ActiproSoftware.SyntaxEditor.MergableToken.LexicalParseFlags" /> to check for.</param><returns><c>true</c> if the parse data has the specified <see cref="P:ActiproSoftware.SyntaxEditor.MergableToken.LexicalParseFlags" /> flag; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.MergableToken.ParseDataEquals(ActiproSoftware.SyntaxEditor.IToken)"><summary>
            Returns whether the parse data in this <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> is the same as the parse data in the specified <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </summary><param name="token">The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> with which to compare.</param><returns><c>true</c> if the parse data is the same in both <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> objects; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.MergableToken.SetFlag(ActiproSoftware.SyntaxEditor.LexicalParseFlags,System.Boolean)"><summary>
            Sets or clears the specified <see cref="P:ActiproSoftware.SyntaxEditor.MergableToken.LexicalParseFlags" /> flag.
            </summary><param name="flag">The <see cref="P:ActiproSoftware.SyntaxEditor.MergableToken.LexicalParseFlags" /> to set or clear.</param><param name="setBit">Whether to set the flag; otherwise, the flag is cleared.</param><remarks>This method should only be called by lexical parsers.</remarks></member><member name="M:ActiproSoftware.SyntaxEditor.MergableToken.#ctor(System.Int32,System.Int32,ActiproSoftware.SyntaxEditor.LexicalParseFlags,ActiproSoftware.SyntaxEditor.IToken,ActiproSoftware.SyntaxEditor.ITokenLexicalParseData)"><summary>
            Initializes a new instance of the <c>MergableToken</c> class.
            </summary><param name="startOffset">The start offset of the token.</param><param name="length">The length of the token.</param><param name="lexicalParseFlags">The <see cref="P:ActiproSoftware.SyntaxEditor.MergableToken.LexicalParseFlags" /> for the token.</param><param name="parentToken">The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that starts the current state scope specified by the <see cref="P:ActiproSoftware.SyntaxEditor.MergableToken.LexicalState" /> property.</param><param name="lexicalParseData">The <see cref="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData" /> that contains lexical parse information about the token.</param></member><member name="P:ActiproSoftware.SyntaxEditor.MergableToken.ContentDividerType"><summary>
            Gets or sets the type of content divider to apply to the token.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.TokenContentDividerType" /> indicating the type of content divider to apply to the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.MergableToken.ContentDividerTypeResolved"><summary>
            Gets the resolved type of content divider to apply to the token.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.TokenContentDividerType" /> indicating the type of content divider to apply to the token.</value><remarks>
            If the value of the <see cref="P:ActiproSoftware.SyntaxEditor.MergableToken.ContentDividerType" /> property is <c>TokenContentDividerType.LexicalPatternGroup</c>,
            this property returns the type of content divider defined by the dynamic language 
            <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" />.
            Otherwise it returns the value of the <see cref="P:ActiproSoftware.SyntaxEditor.MergableToken.ContentDividerType" />.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.MergableToken.DeclaringLexicalState"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that declares pattern that matched the token.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that declares pattern that matched the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.MergableToken.HighlightingStyle"><summary>
            Gets the <see cref="P:ActiproSoftware.SyntaxEditor.MergableToken.HighlightingStyle" /> to use for drawing the token, if the token is aware of it.
            </summary><value>The <see cref="P:ActiproSoftware.SyntaxEditor.MergableToken.HighlightingStyle" /> to use for drawing the token, if the token is aware of it.</value><remarks>
            In some languages, the token may not be aware of what highlighting style is used to draw it.
            In those cases, only the language itself knows what highlighting style to use for the token.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.MergableToken.ID"><summary>
            Gets the ID assigned to the token.
            </summary><value>The ID assigned to the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.MergableToken.IsWhitespace"><summary>
            Gets whether the token represents whitespace.
            </summary><value><c>true</c> if the token represents whitespace; otherwise <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.MergableToken.Key"><summary>
            Gets the key assigned to the token.
            </summary><value>The key assigned to the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.MergableToken.Language"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> that contains the token.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> that contains the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.MergableToken.Length"><summary>
            Gets or sets the absolute length of the token.
            </summary><value>The absolute length of the token.</value><remarks>
            The setter for this property is for internal use only.  Altering its value will corrupt the <see cref="T:ActiproSoftware.SyntaxEditor.Document" /><see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> collection.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.MergableToken.LexicalParseData"><summary>
            Gets an <see cref="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData" /> that contains lexical parse information for the token.
            </summary><value>An <see cref="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData" /> that contains lexical parse information for the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.MergableToken.LexicalParseFlags"><summary>
            Gets a <see cref="P:ActiproSoftware.SyntaxEditor.MergableToken.LexicalParseFlags" /> indicating lexical parse flags for the token.
            </summary><value>A <see cref="P:ActiproSoftware.SyntaxEditor.MergableToken.LexicalParseFlags" /> indicating lexical parse flags for the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.MergableToken.LexicalScope"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" />, if any, that defines the token.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" />, if any, that defines the token.</value><remarks>
            If this value is <see langword="null" />, the token was not defined by a lexical scope.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.MergableToken.LexicalState"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that contains the token.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that contains the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.MergableToken.NestingDepth"><summary>
            Gets the nesting depth of the token.
            </summary><value>The nesting depth of the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.MergableToken.ParentToken"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that starts the current state scope specified by the <see cref="P:ActiproSoftware.SyntaxEditor.MergableToken.LexicalState" /> property.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that starts the current state scope specified by the <see cref="P:ActiproSoftware.SyntaxEditor.MergableToken.LexicalState" /> property.</value><remarks>
            This value may be <see langword="null" /> if the state in the <see cref="P:ActiproSoftware.SyntaxEditor.MergableToken.LexicalState" /> property is the root state
            in the document.
            </remarks></member><member name="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicToken"><summary>
            Represents a token that has been assigned to a span of document text by a dynamic lexical parser.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicToken.Clone(System.Int32,System.Int32)"><summary>
            Clones the data in the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </summary><param name="startOffset">The <see cref="P:ActiproSoftware.SyntaxEditor.IToken.StartOffset" /> of the cloned object.</param><param name="length">The length of the cloned object.</param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that was created.</returns></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicToken.AutoCaseCorrectText"><summary>
            Gets the text that should be used for this <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> when performing an auto case correction operation on it.
            </summary><value>The text that should be used for this <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> when performing an auto case correction operation on it.</value><remarks>
            Return a <see langword="null" /> value to indicate that there is no auto case correction text available.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicToken.CustomHighlightingStyle"><summary>
            Gets the custom <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" /> to use for drawing the token.
            </summary><value>The custom <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" /> to use for drawing the token.</value><remarks>
            Use the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicToken.CustomHighlightingStyle" /> to set a custom highlighting style for this specific token.
            This is useful if you want to display user-defined functions in a separate color.
            If this value is <see langword="null" /> then the default <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" />
            for the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicToken.LexicalPatternGroup" /> will be used when drawing the text in the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicToken" />.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicToken.HighlightingStyle"><summary>
            Gets the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicToken.HighlightingStyle" /> to use for drawing the token, if the token is aware of it.
            </summary><value>The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicToken.HighlightingStyle" /> to use for drawing the token, if the token is aware of it.</value><remarks><para>
            Use the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicToken.CustomHighlightingStyle" /> to set a custom highlighting style for this specific token.
            This is useful if you want to display user-defined functions in a separate color.
            If the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicToken.CustomHighlightingStyle" /> property value is <see langword="null" /> 
            then the default <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" />
            for the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicToken.LexicalPatternGroup" /> will be used when drawing the text in the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicToken" />.
            </para><para>
            In some languages, the token may not be aware of what highlighting style is used to draw it.
            In those cases, only the language itself knows what highlighting style to use for the token.
            </para></remarks></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicToken.IsDocumentEnd"><summary>
            Gets whether the token marks the end of the document.
            </summary><value><c>true</c> if the token marks the end of the document; otherwise <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicToken.LexicalPattern"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPattern" /> that defined the token.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPattern" /> that defined the token.</value><remarks>
            This value may be <see langword="null" /> if the token was not defined by a pattern
            and was created as a default token for the current state.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicToken.LexicalPatternGroup"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" /> that defined the token.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" /> that defined the token.</value><remarks>
            This value may be <see langword="null" /> if the token was not defined by a pattern
            and was created as a default token for the current state.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicToken.SemanticParseData"><summary>
            Gets or sets the semantic parse data for the token.
            </summary><value>The semantic parse data for the token.</value><remarks>
            The token represents the results of lexical parsing.  
            Semantic parsing should be performed after lexical parsing to give real meaning to the token to support IntelliPrompt.
            </remarks></member><member name="F:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicToken.DocumentEndTokenID"><summary>
            Gets the token ID for the end-of-document <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicToken" />.
            </summary><value>The token ID for the end-of-document <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicToken" />.</value><remarks>
            The numeric value of this constant is <c>-1</c>.
            </remarks></member><member name="F:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicToken.InvalidTokenID"><summary>
            Gets the token ID for an invalid <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicToken" />.
            </summary><value>The token ID for an invalid <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicToken" />.</value><remarks>
            The numeric value of this constant is <c>0</c>.
            </remarks></member><member name="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.ILexicalPatternTokenLexicalParseData"><summary>
            Provides the base requirements for an object that provides lexical parse data from a <see cref="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.ILexicalPatternTokenLexicalParseData.LexicalPattern" />
            for a <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> for a mergable language.
            </summary></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.ILexicalPatternTokenLexicalParseData.LexicalPattern"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPattern" /> that defined the token.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPattern" /> that defined the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.ILexicalPatternTokenLexicalParseData.LexicalPatternGroup"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" /> that defined the token.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" /> that defined the token.</value></member><member name="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacro"><summary>
            Defines a macro, which is a named regular expression.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacro.ToString"><summary>
            Creates and returns a string representation of the current object.
            </summary><returns>A string representation of the current object.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacro.#ctor(System.String,System.String)"><summary>
            Initializes a new instance of the <c>LexicalMacro</c> class.
            </summary><param name="key">The key of the macro.</param><param name="pattern">The text regular expression source.</param></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacro.Key"><summary>
            Gets a string-based key that identifies the object.
            </summary><value>A string-based key that identifies the object.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacro.Pattern"><summary>
            Gets the text regular expression source.
            </summary><value>The text regular expression source.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacro.Tag"><summary>
            Gets or sets the object that contains user-defined data about the object.
            </summary><value>
            An <see cref="T:System.Object" /> that contains user-defined data about the control. The default is <see langword="null" />.
            </value><remarks>
            Any type derived from the <see cref="T:System.Object" /> class can be assigned to this property. 
            </remarks></member><member name="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacroCollection"><summary>
            Encapsulates a collection of <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacro" /> objects.
            </summary><seealso cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacro" /></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacroCollection.Add(ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacro)"><summary>
            Adds a macro to the collection.
            </summary><param name="lexicalMacro">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacro" /> to add to the collection.</param><returns>The position into which the new item was inserted.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacroCollection.Clear"><summary>
            Removes all <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacro" /> objects in the collection.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacroCollection.Remove(ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacro)"><summary>
            Removes the specified <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacro" /> from the collection.
            </summary><param name="lexicalMacro">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacro" /> to remove from the collection.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacroCollection.RemoveAt(System.Int32)"><summary>
            Removes the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacro" /> at the specified index in the collection.
            </summary><param name="index">The zero-based index of the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacro" /> to be removed.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacroCollection.#ctor"><summary>
            Initializes a new instance of the <c>LexicalMacroCollection</c> class. 
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacroCollection.#ctor(ActiproSoftware.ComponentModel.ILogicalTreeNode)"><summary>
            Initializes a new instance of the <c>LexicalMacroCollection</c> class. 
            </summary><param name="owner">The owner of the collection.</param></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacroCollection.Item(System.Int32)"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacro" /> at the specified index. 
            <para>
            [C#] In C#, this property is the indexer for the <c>LexicalMacroCollection</c> class. 
            </para></summary><param name="index">The index of the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacro" /> to return.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacro" /> at the specified index. 
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacroCollection.Item(System.String)"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacro" /> with the specified name. 
            <para>
            [C#] In C#, this property is the indexer for the <c>LexicalMacroCollection</c> class. 
            </para></summary><param name="key">The key of the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacro" /> to return.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalMacro" /> with the specified key. 
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPattern"><summary>
            Represents a lexical pattern.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPattern.#ctor(System.String)"><summary>
            Initializes a new instance of the <c>LexicalPattern</c> class.
            </summary><param name="pattern">The text regular expression source.</param></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPattern.LexicalPatternGroup"><summary>
            Gets the parent <see cref="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPattern.LexicalPatternGroup" />.
            </summary><value>The parent <see cref="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPattern.LexicalPatternGroup" />.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPattern.Pattern"><summary>
            Gets or sets the text regular expression source.
            </summary><value>The text regular expression source.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPattern.Tag"><summary>
            Gets or sets the object that contains user-defined data about the object.
            </summary><value>
            An <see cref="T:System.Object" /> that contains user-defined data about the control. The default is <see langword="null" />.
            </value><remarks>
            Any type derived from the <see cref="T:System.Object" /> class can be assigned to this property. 
            </remarks></member><member name="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup"><summary>
            Encapsulates a collection of <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPattern" /> objects.
            </summary><seealso cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPattern" /></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.Add(ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPattern)"><summary>
            Adds a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPattern" /> to the collection.
            </summary><param name="lexicalPattern">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPattern" /> to add to the collection.</param><returns>The position into which the new <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPattern" /> was inserted.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.Clear"><summary>
            Removes all <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPattern" /> objects in the collection.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.Insert(System.Int32,ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPattern)"><summary>
            Inserts a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPattern" /> into the collection at the specified index.
            </summary><param name="index">The zero-based index at which the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPattern" /> should be inserted.</param><param name="lexicalPattern">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPattern" /> to insert into the collection.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.OnObjectAdded(System.Int32,ActiproSoftware.ComponentModel.ILogicalTreeNode)"><summary>
            Performs additional custom processes after an object is added to the collection.
            </summary><param name="index">The zero-based index at which the object was inserted.</param><param name="value">The object that was inserted.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.OnParentChanged"><summary>
            Invoked when logical parent is changed. 
            This is invoked after the parent has changed, and the purpose is to allow elements to perform actions based on the changed parent.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.Remove(ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPattern)"><summary>
            Removes the specified <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPattern" /> from the collection.
            </summary><param name="lexicalPattern">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPattern" /> to remove from the collection.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.RemoveAt(System.Int32)"><summary>
            Removes the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPattern" /> at the specified index in the collection.
            </summary><param name="index">The zero-based index of the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPattern" /> to be removed.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.ToString"><summary>
            Creates and returns a string representation of the current object.
            </summary><returns>A string representation of the current object.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.#ctor(ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternType,System.String,ActiproSoftware.SyntaxEditor.HighlightingStyle)"><summary>
            Initializes a new instance of the <c>LexicalPatternGroup</c> class. 
            </summary><param name="patternType">A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternType" /> indicating the type of pattern.</param><param name="tokenKey">The key of the token that this pattern assigns.</param><param name="highlightingStyle">The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.HighlightingStyle" /> that this pattern uses.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.#ctor(ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternType,System.String,ActiproSoftware.SyntaxEditor.HighlightingStyle,System.String)"><summary>
            Initializes a new instance of the <c>LexicalPatternGroup</c> class. 
            </summary><param name="patternType">A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternType" /> indicating the type of pattern.</param><param name="tokenKey">The key of the token that this pattern assigns.</param><param name="highlightingStyle">The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.HighlightingStyle" /> that this pattern uses.</param><param name="pattern">Adds a single pattern to the group.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.#ctor(ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternType,System.String,ActiproSoftware.SyntaxEditor.HighlightingStyle,System.String,System.String)"><summary>
            Initializes a new instance of the <c>LexicalPatternGroup</c> class. 
            </summary><param name="patternType">A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternType" /> indicating the type of pattern.</param><param name="tokenKey">The key of the token that this pattern assigns.</param><param name="highlightingStyle">The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.HighlightingStyle" /> that this pattern uses.</param><param name="pattern">Adds a single pattern to the group.</param><param name="lookAheadPattern">The text regular expression source for the look-ahead.</param></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.CaseSensitive"><summary>
            Gets whether the explicit patterns in the pattern group are case sensitive.
            </summary><value><c>true</c> if the explicit patterns in the pattern group are case sensitive; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.CaseSensitivity"><summary>
            Gets or sets a <see cref="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.CaseSensitivity" /> determining how the lexical parser should handle case sensitivity
            for patterns in the pattern group.
            </summary><value>
            A <see cref="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.CaseSensitivity" /> determining how the lexical parser should handle case sensitivity
            for patterns in the pattern group.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.EndBracket"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" /> that should be used as an end bracket for this pattern group when bracket highlighting.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" /> that should be used as an end bracket for this pattern group when bracket highlighting.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.HighlightingStyle"><summary>
            Gets or sets the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.HighlightingStyle" /> to use for tokens within the pattern group.
            </summary><value>The <see cref="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.HighlightingStyle" /> to use for tokens within the pattern group.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.IsContentDivider"><summary>
            Gets or sets whether the token is a content divider.
            </summary><value><c>true</c> if the token is a content divider; otherwise <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.IsWhitespace"><summary>
            Gets or sets whether the token represents whitespace.
            </summary><value><c>true</c> if the token represents whitespace; otherwise <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.Key"><summary>
            Gets or sets a string-based key that identifies the object.
            </summary><value>A string-based key that identifies the object.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.LexicalScope"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" />, if any, that defines the pattern group.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" />, if any, that defines the pattern group.</value><remarks>
            If this value is <see langword="null" />, the pattern group was not defined by a lexical scope.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.LexicalState"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that defines the pattern group.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that defines the pattern group.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.LookAheadPattern"><summary>
            Gets or sets the text regular expression source for the look-ahead.
            </summary><value>The text regular expression source for the look-ahead.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.LookBehindPattern"><summary>
            Gets or sets the text regular expression source for the look-behind.
            </summary><value>The text regular expression source for the look-behind.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.PatternType"><summary>
            Gets or sets a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternType" /> indicating the type of pattern.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternType" /> indicating the type of pattern.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.StartBracket"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" /> that should be used as a start bracket for this pattern group when bracket highlighting.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" /> that should be used as a start bracket for this pattern group when bracket highlighting.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.Tag"><summary>
            Gets or sets the object that contains user-defined data about the object.
            </summary><value>
            An <see cref="T:System.Object" /> that contains user-defined data about the control. The default is <see langword="null" />.
            </value><remarks>
            Any type derived from the <see cref="T:System.Object" /> class can be assigned to this property. 
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.Item(System.Int32)"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPattern" /> at the specified index. 
            <para>
            [C#] In C#, this property is the indexer for the <c>LexicalPatternGroup</c> class. 
            </para></summary><param name="index">The index of the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPattern" /> to return.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPattern" /> at the specified index. 
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.TokenID"><summary>
            Gets or sets a numeric ID that identifies the token that this pattern assigns.
            </summary><value>A numeric ID that identifies the token that this pattern assigns.</value><remarks>
            This property is similar to the <see cref="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.TokenKey" /> property although <see cref="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.TokenKey" /> is a string,
            while <c>TokenID</c> is a number which can be cast to an enumeration.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup.TokenKey"><summary>
            Gets the key of the token that this pattern assigns.
            </summary><value>The key of the token that this pattern assigns.</value></member><member name="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroupCollection"><summary>
            Encapsulates a collection of <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" /> objects.
            </summary><seealso cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" /></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroupCollection.Add(ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup)"><summary>
            Adds a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" /> to the collection.
            </summary><param name="lexicalPatternGroup">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" /> to add to the collection.</param><returns>The position into which the new <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" /> was inserted.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroupCollection.Clear"><summary>
            Removes all <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" /> objects in the collection.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroupCollection.Insert(System.Int32,ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup)"><summary>
            Inserts a <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" /> into the collection at the specified index.
            </summary><param name="index">The zero-based index at which the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" /> should be inserted.</param><param name="lexicalPatternGroup">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" /> to insert into the collection.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroupCollection.Remove(ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup)"><summary>
            Removes the specified <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" /> from the collection.
            </summary><param name="lexicalPatternGroup">The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" /> to remove from the collection.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroupCollection.RemoveAt(System.Int32)"><summary>
            Removes the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" /> at the specified index in the collection.
            </summary><param name="index">The zero-based index of the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" /> to be removed.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroupCollection.#ctor"><summary>
            Initializes a new instance of the <c>LexicalPatternGroupCollection</c> class. 
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroupCollection.#ctor(ActiproSoftware.ComponentModel.ILogicalTreeNode)"><summary>
            Initializes a new instance of the <c>LexicalPatternGroupCollection</c> class. 
            </summary><param name="owner">The owner of the collection.</param></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroupCollection.AllowEmptyKeys"><summary>
            Gets whether empty keys are permitted within the collection.
            </summary><value><c>true</c> if empty keys are permitted; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroupCollection.LexicalState"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicLexicalState" /> that contains the pattern group collection.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.DynamicLexicalState" /> that contains the pattern group collection.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroupCollection.Item(System.Int32)"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" /> at the specified index. 
            <para>
            [C#] In C#, this property is the indexer for the <c>LexicalPatternGroupCollection</c> class. 
            </para></summary><param name="index">The index of the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" /> to return.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" /> at the specified index. 
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroupCollection.Item(System.String)"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" /> with the specified name. 
            <para>
            [C#] In C#, this property is the indexer for the <c>LexicalPatternGroupCollection</c> class. 
            </para></summary><param name="key">The key of the <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" /> to return.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternGroup" /> with the specified key. 
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternType"><summary>
            Specifies the type of lexical pattern.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternType.Explicit"><summary>
            An explicit pattern in which all pattern characters have no regex meaning.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.Addons.Dynamic.LexicalPatternType.Regex"><summary>
            A pattern in which regex characters have special meaning and can control regular expression parsing.
            </summary></member><member name="T:ActiproSoftware.SyntaxEditor.Addons.PlainText.PlainTextLexicalStateID"><summary>
            Contains the lexical state IDs for the <c>Plain Text</c> language.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.PlainText.PlainTextLexicalStateID.GetLexicalStateKey(System.Int32)"><summary>
            Returns the string-based key for the specified lexical state ID.
            </summary><param name="id">The lexical state ID to examine.</param></member><member name="F:ActiproSoftware.SyntaxEditor.Addons.PlainText.PlainTextLexicalStateID.Default"><summary>
            The Default lexical state ID.
            </summary></member><member name="T:ActiproSoftware.SyntaxEditor.Addons.PlainText.PlainTextSyntaxLanguage"><summary>
            Represents a plain text language definition.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.PlainText.PlainTextSyntaxLanguage.CreateDocumentEndToken(System.Int32,ActiproSoftware.SyntaxEditor.ILexicalState)"><summary>
            Creates an <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that represents the end of a document.
            </summary><param name="startOffset">The start offset of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.</param><param name="lexicalState">The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that contains the token.</param><returns>An <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that represents the end of a document.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.PlainText.PlainTextSyntaxLanguage.CreateInvalidToken(System.Int32,System.Int32,ActiproSoftware.SyntaxEditor.ILexicalState)"><summary>
            Creates an <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that represents an invalid range of text.
            </summary><param name="startOffset">The start offset of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.</param><param name="length">The length of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.</param><param name="lexicalState">The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that contains the token.</param><returns>An <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that represents an invalid range of text.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.PlainText.PlainTextSyntaxLanguage.CreateToken(System.Int32,System.Int32,ActiproSoftware.SyntaxEditor.LexicalParseFlags,ActiproSoftware.SyntaxEditor.IToken,ActiproSoftware.SyntaxEditor.ITokenLexicalParseData)"><summary>
            Creates an <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that represents the range of text with the specified lexical parse data.
            </summary><param name="startOffset">The start offset of the token.</param><param name="length">The length of the token.</param><param name="lexicalParseFlags">The <see cref="T:ActiproSoftware.SyntaxEditor.LexicalParseFlags" /> for the token.</param><param name="parentToken">The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that starts the current state scope specified by the <see cref="P:ActiproSoftware.SyntaxEditor.IToken.LexicalState" /> property.</param><param name="lexicalParseData">The <see cref="T:ActiproSoftware.SyntaxEditor.ITokenLexicalParseData" /> that contains lexical parse information about the token.</param><returns></returns></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.PlainText.PlainTextSyntaxLanguage.GetHighlightingStyle(ActiproSoftware.SyntaxEditor.IToken)"><summary>
            Returns the <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" /> for the specified <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </summary><param name="token">The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> to examine.</param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" /> for the specified <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.PlainText.PlainTextSyntaxLanguage.GetTokenString(System.Int32)"><summary>
            Gets the token string representation for the specified token ID.
            </summary><param name="tokenID">The ID of the token to examine.</param><returns>The token string representation for the specified token ID.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.PlainText.PlainTextSyntaxLanguage.#ctor"><summary>
            Initializes a new instance of the <c>PlainTextSyntaxLanguage</c> class.
            </summary></member><member name="P:ActiproSoftware.SyntaxEditor.Addons.PlainText.PlainTextSyntaxLanguage.MergableLexicalParser"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.IMergableLexicalParser" /> that can be used for lexical parsing of the language.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.IMergableLexicalParser" /> that can be used for lexical parsing of the language.</value></member><member name="T:ActiproSoftware.SyntaxEditor.Addons.PlainText.PlainTextTokenID"><summary>
            Contains the token IDs for the <c>Plain Text</c> language.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Addons.PlainText.PlainTextTokenID.GetTokenKey(System.Int32)"><summary>
            Returns the string-based key for the specified token ID.
            </summary><param name="id">The token ID to examine.</param></member><member name="F:ActiproSoftware.SyntaxEditor.Addons.PlainText.PlainTextTokenID.Invalid"><summary>
            The Invalid token ID.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.Addons.PlainText.PlainTextTokenID.DocumentEnd"><summary>
            The DocumentEnd token ID.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.Addons.PlainText.PlainTextTokenID.Default"><summary>
            The Default token ID.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.Addons.PlainText.PlainTextTokenID.Whitespace"><summary>
            The Whitespace token ID.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.Addons.PlainText.PlainTextTokenID.LineTerminator"><summary>
            The LineTerminator token ID.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.Addons.PlainText.PlainTextTokenID.Identifier"><summary>
            The Identifier token ID.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.Addons.PlainText.PlainTextTokenID.Number"><summary>
            The Number token ID.
            </summary></member><member name="T:ActiproSoftware.SyntaxEditor.AutomaticOutliningBehavior"><summary>
            Specifies when automatic outlining is performed.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.AutomaticOutliningBehavior.PostSemanticParse"><summary>
            Automatic outlining will be executed in the main UI thread immediately after semantic parsing is performed.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.AutomaticOutliningBehavior.SemanticParseDataChange"><summary>
            Automatic outlining will be executed after the <see cref="!:Document.SemanticParseData" /> property is changed
            and in whatever thread calls the property.
            </summary></member><member name="T:ActiproSoftware.SyntaxEditor.IOutliningNodeParseData"><summary>
            Provides the base requirements for an object that provides parse data for an <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNode" />.
            </summary></member><member name="P:ActiproSoftware.SyntaxEditor.IOutliningNodeParseData.IndicatorVisible"><summary>
            Gets whether the outlining indicator should be visible for the node.
            </summary><value><c>true</c> if the outlining indicator should be visible for the node; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.IOutliningNodeParseData.IsLanguageTransition"><summary>
            Gets whether the outlining node is for a language transition.
            </summary><value><c>true</c> if the outlining node is for a language transition; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.IOutliningNodeParseData.Key"><summary>
            Gets the key assigned to the outlining node.
            </summary><value>The key assigned to the outlining node.</value></member><member name="T:ActiproSoftware.SyntaxEditor.Outlining"><summary>
            Provides control over the outlining state of a <see cref="T:ActiproSoftware.SyntaxEditor.Document" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Outlining.Add(ActiproSoftware.SyntaxEditor.IOutliningNodeParseData,System.Int32,System.Int32)"><summary>
            Adds a new outlining node for the specified start and end offset range while in manual outlining mode.
            </summary><param name="parseData">The <see cref="T:ActiproSoftware.SyntaxEditor.IOutliningNodeParseData" /> to assigned to the node that is created.</param><param name="startOffset">The offset at which to start the new <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNode" />.</param><param name="endOffset">The offset at which to end the new <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNode" />.</param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNode" /> that was created.</returns><remarks><para>This method may only be called in manual outlining mode and will throw an exception if not.</para><para>If the start offset is greater than or equal to the end offset, no node will be created.</para></remarks></member><member name="M:ActiproSoftware.SyntaxEditor.Outlining.Add(ActiproSoftware.SyntaxEditor.IOutliningNodeParseData,System.Int32)"><summary>
            Adds a new outlining node at the specified start offset while in automatic outlining mode.
            </summary><param name="parseData">The <see cref="T:ActiproSoftware.SyntaxEditor.IOutliningNodeParseData" /> to assigned to the node that is created.</param><param name="startOffset">The offset at which to start the new <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNode" />.</param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNode" /> that was created.</returns><remarks>This method may only be called in automatic outlining mode and will throw an exception if not.</remarks></member><member name="M:ActiproSoftware.SyntaxEditor.Outlining.Clear"><summary>
            Removes all outlining nodes in the hierarchy.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Outlining.Close(ActiproSoftware.SyntaxEditor.OutliningNode,System.Int32)"><summary>
            Closes the specified outlining node while in automatic outlining mode.
            </summary><param name="node">The <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNode" /> to be closed.</param><param name="endOffset">The offset at which to end the node.</param><remarks>
            This method may only be called in automatic outlining mode and will throw an exception if not.
            This method keeps the node at the same start offset however indicates that it should end at the specified offset.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.Outlining.EnsureVisible(ActiproSoftware.SyntaxEditor.TextRange)"><summary>
            Ensures that the specified <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> start and end offsets are visible and not hidden in a collapsed node.
            </summary><param name="textRange">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> to expand.</param></member><member name="M:ActiproSoftware.SyntaxEditor.Outlining.Open(ActiproSoftware.SyntaxEditor.OutliningNode)"><summary>
            Opens the specified outlining node while in automatic outlining mode.
            </summary><param name="node">The <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNode" /> to be opened.</param><remarks>
            This method may only be called in automatic outlining mode and will throw an exception if not.
            This method keeps the node at the same start offset however indicates that there is no end for the node.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.Outlining.Remove(ActiproSoftware.SyntaxEditor.OutliningNode,System.Boolean)"><summary>
            Removes the specified <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNode" /> from the hierarchy.
            </summary><param name="node">The <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNode" /> to remove.</param><param name="keepDescendants"><c>true</c> if the descendants of the node being removed should be retained in the hierarchy; otherwise, <c>false</c>.
            </param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNode" /> that is the parent of the node being removed.</returns></member><member name="P:ActiproSoftware.SyntaxEditor.Outlining.Mode"><summary>
            Gets or sets the outlining mode that should be enabled.
            </summary><value>
            An <see cref="T:ActiproSoftware.SyntaxEditor.OutliningMode" /> that indicates the outlining mode that should be entered.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.Outlining.RootNode"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNode" /> that is the root node in the <see cref="T:ActiproSoftware.SyntaxEditor.Document" />.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNode" /> that is the root node in the <see cref="T:ActiproSoftware.SyntaxEditor.Document" />.</value></member><member name="T:ActiproSoftware.SyntaxEditor.OutliningMode"><summary>
            Specifies the type of outlining mode.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.OutliningMode.None"><summary>
            No outlining should be performed.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.OutliningMode.Manual"><summary>
            Manual outlining is enabled.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.OutliningMode.Automatic"><summary>
            Automatic outlining is enabled.
            </summary></member><member name="T:ActiproSoftware.SyntaxEditor.OutliningNode"><summary>
            Represents an outlining node.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.OutliningNode.CollapseDescendants"><summary>
            Collapses all descendant nodes.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.OutliningNode.CollapseDescendants(System.String)"><summary>
            Collapses all descendant nodes with the specified key.
            </summary><param name="key">The key of outlining nodes to collapse.  If <see langword="null" />, all nodes will be collapsed.</param></member><member name="M:ActiproSoftware.SyntaxEditor.OutliningNode.Contains(System.Int32)"><summary>
            Gets whether the outlining node contains the specified offset.
            </summary><param name="offset">The offset to check.</param><returns><c>true</c> if the outlining node contains the specified offset; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.OutliningNode.Contains(ActiproSoftware.SyntaxEditor.TextRange)"><summary>
            Gets whether the outlining node contains the specified <see cref="P:ActiproSoftware.SyntaxEditor.OutliningNode.TextRange" />.
            </summary><param name="textRange">The <see cref="P:ActiproSoftware.SyntaxEditor.OutliningNode.TextRange" /> to check.</param><returns><c>true</c> if the outlining node contains the specified <see cref="P:ActiproSoftware.SyntaxEditor.OutliningNode.TextRange" />; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.OutliningNode.ExpandDescendants"><summary>
            Expands all descendant nodes.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.OutliningNode.FindNode(System.Int32)"><summary>
            Searches through the child nodes for a node that contains the specified offset.
            </summary><param name="offset">The offset to check.</param><returns>The child <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNode" /> that contains the specified offset, if any.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.OutliningNode.FindNodeRecursive(System.Int32)"><summary>
            Recursively searches through the child nodes for a node that contains the specified offset.
            </summary><param name="offset">The offset to check.</param><returns>The child <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNode" /> that contains the specified offset, if any.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.OutliningNode.GetCommonAncestor(ActiproSoftware.SyntaxEditor.OutliningNode)"><summary>
            Gets the common ancestor of the two nodes.
            </summary><param name="node">The <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNode" /> to compare.</param><returns>
            The <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNode" /> that is a common ancestor of both nodes; otherwise <see langword="null" />.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.OutliningNode.GetEnumerator"><summary>
            Retrieves an <c>IEnumerator</c> object for the entire collection.
            </summary><returns>An <c>IEnumerator</c> object for the entire collection</returns><remarks>
            Enumerators are intended to be used only to read data in the collection. 
            Enumerators cannot be used to modify the underlying collection.
            <para>
            The enumerator does not have exclusive access to the collection.
            </para><para>
            When an enumerator is instantiated, it takes a snapshot of the current state of the collection. 
            If changes are made to the collection, such as adding, modifying or deleting elements, the 
            snapshot gets out of sync and the enumerator throws an <c>InvalidOperationException</c>. 
            Two enumerators instantiated from the same collection at the same time can have 
            different snapshots of the collection.
            </para></remarks></member><member name="M:ActiproSoftware.SyntaxEditor.OutliningNode.IsAncestorOf(ActiproSoftware.SyntaxEditor.OutliningNode)"><summary>
            Gets whether the node is an ancestor to the specified node.
            </summary><param name="node">The <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNode" /> to compare.</param><returns><c>true</c> if the node is an ancestor of the specified node; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.OutliningNode.IsDescendantOf(ActiproSoftware.SyntaxEditor.OutliningNode)"><summary>
            Gets whether the node is a descendant of the specified node.
            </summary><param name="node">The <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNode" /> to compare.</param><returns><c>true</c> if the node is a descendant of the specified node; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.OutliningNode.ToggleExpansion"><summary>
            Toggles the <see cref="P:ActiproSoftware.SyntaxEditor.OutliningNode.Expanded" /> property, which controls whether the node is expanded.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.OutliningNode.ToString"><summary>
            Returns a string that represents the current <see cref="T:System.Object" />.
            </summary><returns>A string that represents the current <see cref="T:System.Object" />.</returns></member><member name="P:ActiproSoftware.SyntaxEditor.OutliningNode.CollapsedText"><summary>
            Gets or sets the text to display when the node is collapsed.
            </summary><value>The text to display when the node is collapsed.</value></member><member name="P:ActiproSoftware.SyntaxEditor.OutliningNode.Count"><summary>
            Gets the count of child nodes within this outlining node.
            </summary><value>The count of child nodes within this outlining node.</value></member><member name="P:ActiproSoftware.SyntaxEditor.OutliningNode.Document"><summary>
            Gets the <see cref="P:ActiproSoftware.SyntaxEditor.OutliningNode.Document" /> that contains the outlining node.
            </summary><value>The <see cref="P:ActiproSoftware.SyntaxEditor.OutliningNode.Document" /> that contains the outlining node.</value></member><member name="P:ActiproSoftware.SyntaxEditor.OutliningNode.EndOffset"><summary>
            Gets the offset at which the outlining node ends.
            </summary><value>The offset at which the outlining node ends.</value></member><member name="P:ActiproSoftware.SyntaxEditor.OutliningNode.Expanded"><summary>
            Gets or sets whether the node is expanded.
            </summary><value><c>true</c> if the node is expanded; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.OutliningNode.HasAncestors"><summary>
            Gets whether an ancestor node exists.
            </summary><value><c>true</c> if an ancestor node exists; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.OutliningNode.HasCollapsedAncestors"><summary>
            Gets whether an ancestor node is collapsed.
            </summary><value><c>true</c> if an ancestor node is collapsed; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.OutliningNode.Index"><summary>
            Gets the index of the node within its parent node.
            </summary><value>The index of the node within its parent node.</value></member><member name="P:ActiproSoftware.SyntaxEditor.OutliningNode.IsOpen"><summary>
            Gets whether the outlining node is open (has no fixed <see cref="P:ActiproSoftware.SyntaxEditor.OutliningNode.EndOffset" />).
            </summary><value><c>true</c> if the outlining node is open (has no fixed <see cref="P:ActiproSoftware.SyntaxEditor.OutliningNode.EndOffset" />); otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.OutliningNode.IsRoot"><summary>
            Gets whether the outlining node is a root-level node.
            </summary><value><c>true</c> if the outlining node is a root-level node; otherwise, <c>false</c>.
            </value><remarks>A root-level node has no <see cref="P:ActiproSoftware.SyntaxEditor.OutliningNode.ParentNode" />.</remarks></member><member name="P:ActiproSoftware.SyntaxEditor.OutliningNode.Length"><summary>
            Gets the character length of the outlining node.
            </summary><value>The character length of the outlining node.</value></member><member name="P:ActiproSoftware.SyntaxEditor.OutliningNode.NestingDepth"><summary>
            Gets the nesting depth of the node.
            </summary><value>The nesting depth of the node.</value></member><member name="P:ActiproSoftware.SyntaxEditor.OutliningNode.ParentNode"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNode" /> that is the parent of this outlining node.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNode" /> that is the parent of this outlining node.</value></member><member name="P:ActiproSoftware.SyntaxEditor.OutliningNode.ParseData"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.SyntaxEditor.IOutliningNodeParseData" /> that is assigned to the outlining node.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.IOutliningNodeParseData" /> that is assigned to the outlining node.</value><remarks>This property should be set by a semantic parser.</remarks></member><member name="P:ActiproSoftware.SyntaxEditor.OutliningNode.StartOffset"><summary>
            Gets the offset at which the outlining node starts.
            </summary><value>The offset at which the outlining node starts.</value></member><member name="P:ActiproSoftware.SyntaxEditor.OutliningNode.TextRange"><summary>
            Gets a <see cref="P:ActiproSoftware.SyntaxEditor.OutliningNode.TextRange" /> that contains the text range of the outlining node.
            </summary><value>A <see cref="P:ActiproSoftware.SyntaxEditor.OutliningNode.TextRange" /> that contains the text range of the outlining node.</value></member><member name="P:ActiproSoftware.SyntaxEditor.OutliningNode.Item(System.Int32)"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNode" /> at the specified index.
            </summary><param name="index">The zero-based index of the <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNode" />.</param><value>The <see cref="T:ActiproSoftware.SyntaxEditor.OutliningNode" /> at the specified index.</value></member><member name="T:ActiproSoftware.SyntaxEditor.OutliningNodeAction"><summary>
            Specifies the action to take when incrementally updating outlining nodes.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.OutliningNodeAction.NoChange"><summary>
            No change should be made.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.OutliningNodeAction.Start"><summary>
            A node should be started.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.OutliningNodeAction.End"><summary>
            A node should be ended.
            </summary></member><member name="T:ActiproSoftware.SyntaxEditor.OutliningNodeParseData"><summary>
            Provides a class to store parse data with an outlining node.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.OutliningNodeParseData.Equals(System.Object)"><summary>
            Determines whether the specified <c>Object</c> is equal to the current <c>Object</c>. 
            </summary><param name="obj">The <c>Object</c> to compare to the current <c>Object</c>.</param><returns><c>true</c> if the specified <c>Object</c> is equal to the current <c>Object</c>; 
            otherwise, <c>false</c>. 
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.OutliningNodeParseData.GetHashCode"><summary>
            Returns a hash code for this object.
            </summary><returns>An integer value that specifies a hash value for this object.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.OutliningNodeParseData.ToString"><summary>
            Converts the object to a <c>String</c>.
            </summary><returns>
            A string whose value represents this object.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.OutliningNodeParseData.#ctor(System.String,System.Boolean)"><summary>
            Initializes a new instance of the <c>OutliningNodeParseData</c> class. 
            </summary><param name="key">The key assigned to the outlining node.</param><param name="isLanguageTransition">Whether the outlining node is for a language transition.</param></member><member name="P:ActiproSoftware.SyntaxEditor.OutliningNodeParseData.IndicatorVisible"><summary>
            Gets or sets whether the outlining indicator should be visible for the node.
            </summary><value><c>true</c> if the outlining indicator should be visible for the node; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.OutliningNodeParseData.IsLanguageTransition"><summary>
            Gets whether the outlining node is for a language transition.
            </summary><value><c>true</c> if the outlining node is for a language transition; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.OutliningNodeParseData.Key"><summary>
            Gets the key assigned to the outlining node.
            </summary><value>The key assigned to the outlining node.</value></member><member name="T:ActiproSoftware.SyntaxEditor.ILexicalParseTarget"><summary>
            Provides the base requirements for an object that should receive parse output from a lexical parser.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.ILexicalParseTarget.OnPostParse"><summary>
            Occurs after lexical parsing ends.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.ILexicalParseTarget.OnPreParse(System.Int32)"><summary>
            Occurs before lexical parsing starts.
            </summary><param name="startOffset">The offset at which parsing will commence.</param></member><member name="M:ActiproSoftware.SyntaxEditor.ILexicalParseTarget.OnTokenParsed(ActiproSoftware.SyntaxEditor.IToken,System.Int32)"><summary>
            Occurs when an <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> is parsed by the lexical parser.
            </summary><param name="newToken">The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that was parsed.</param><param name="length">The length of the token.</param><remarks><c>true</c> if the lexical parsing should continue; otherwise, <c>false</c>.
            </remarks></member><member name="T:ActiproSoftware.SyntaxEditor.InvalidLanguageDefinitionException"><summary>
            An exception that is thrown when loading invalid values in parser definitions.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.InvalidLanguageDefinitionException.#ctor"><summary>
            Initializes a new instance of the <c>InvalidLanguageDefinitionException</c> class.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.InvalidLanguageDefinitionException.#ctor(System.String)"><summary>
            Initializes a new instance of the <c>InvalidLanguageDefinitionException</c> class with a specified error message.
            </summary><param name="message">The error message that explains the reason for the exception.</param></member><member name="M:ActiproSoftware.SyntaxEditor.InvalidLanguageDefinitionException.#ctor(System.String,System.Exception)"><summary>
            Initializes a new instance of the <c>InvalidLanguageDefinitionException</c> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary><param name="message">The error message that explains the reason for the exception.</param><param name="innerException">The exception that is the cause of the current exception.</param></member><member name="T:ActiproSoftware.SyntaxEditor.LexicalParseFlags"><summary>
            Specifies flags for a <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.LexicalParseFlags.None"><summary>
            There are no flags set.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.LexicalParseFlags.LooseMatch"><summary>
            A loose match was made.  This occurs when using a case insensitivity of <c>AutoCorrect</c> and a non-exact match was found.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.LexicalParseFlags.ScopeStart"><summary>
            The token starts a scope.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.LexicalParseFlags.ScopeEnd"><summary>
            The token ends a scope.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.LexicalParseFlags.DirectStateTransition"><summary>
            The token starts a scope which performs a direct lexical state transition.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.LexicalParseFlags.ScopeStateTransitionStart"><summary>
            The token ends a scope but performs a scope lexical state transition.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.LexicalParseFlags.ScopeStateTransitionEnd"><summary>
            The token ends a scope for a scope lexical state transition.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.LexicalParseFlags.LanguageStart"><summary>
            The token marks the start of a child language.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.LexicalParseFlags.LanguageEnd"><summary>
            The token marks the end of a child language.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.LexicalParseFlags.ContentDividerBefore"><summary>
            Display a content divider before the token.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.LexicalParseFlags.ContentDividerAfter"><summary>
            Display a content divider after the token.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.LexicalParseFlags.ContentDividerNone"><summary>
            Displays no content divider for the token.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.LexicalParseFlags.ContentDividerMask"><summary>
            The bit mask for the content divider flags.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.LexicalParseFlags.LanguageChange"><summary>
            The token is either the first token in a child language (<c>LanguageStart</c> will also be set) or is the first token 
            after a child language ends.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.LexicalParseFlags.Modified"><summary>
            Whether the token was modified during the last lexical parse that affected it.
            </summary></member><member name="T:ActiproSoftware.SyntaxEditor.LexicalScopeAndIDTokenLexicalParseData"><summary>
            Provides <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> lexical parse data based on a token ID and an <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.LexicalScopeAndIDTokenLexicalParseData.Equals(System.Object)"><summary>
            Determines whether the specified <c>Object</c> is equal to the current <c>Object</c>. 
            </summary><param name="obj">The <c>Object</c> to compare to the current <c>Object</c>.</param><returns><c>true</c> if the specified <c>Object</c> is equal to the current <c>Object</c>; 
            otherwise, <c>false</c>. 
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.LexicalScopeAndIDTokenLexicalParseData.GetHashCode"><summary>
            Returns a hash code for this object.
            </summary><returns>An integer value that specifies a hash value for this object.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.LexicalScopeAndIDTokenLexicalParseData.#ctor(ActiproSoftware.SyntaxEditor.ILexicalScope,System.Byte)"><summary>
            Initializes a new instance of the <c>LexicalScopeAndIDTokenLexicalParseData</c> class. 
            </summary><param name="lexicalScope">The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" /> that contains the token.</param><param name="tokenID">The ID of the token.</param></member><member name="P:ActiproSoftware.SyntaxEditor.LexicalScopeAndIDTokenLexicalParseData.HighlightingStyle"><summary>
            Gets the <see cref="P:ActiproSoftware.SyntaxEditor.LexicalScopeAndIDTokenLexicalParseData.HighlightingStyle" /> to use for drawing the token, if the token is aware of it.
            </summary><value>The <see cref="P:ActiproSoftware.SyntaxEditor.LexicalScopeAndIDTokenLexicalParseData.HighlightingStyle" /> to use for drawing the token, if the token is aware of it.</value><remarks>
            In some languages, the token may not be aware of what highlighting style is used to draw it.
            In those cases, only the language itself knows what highlighting style to use for the token.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.LexicalScopeAndIDTokenLexicalParseData.IsContentDivider"><summary>
            Gets whether the token is a content divider.
            </summary><value><c>true</c> if the token is a content divider; otherwise <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.LexicalScopeAndIDTokenLexicalParseData.IsWhitespace"><summary>
            Gets whether the token represents whitespace.
            </summary><value><c>true</c> if the token represents whitespace; otherwise <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.LexicalScopeAndIDTokenLexicalParseData.Language"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> that contains the token.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> that contains the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.LexicalScopeAndIDTokenLexicalParseData.LexicalScope"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" />, if any, that defines the token.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" />, if any, that defines the token.</value><remarks>
            If this value is <see langword="null" />, the token was not defined by a lexical scope.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.LexicalScopeAndIDTokenLexicalParseData.LexicalState"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that contains the token.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that contains the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.LexicalScopeAndIDTokenLexicalParseData.TokenID"><summary>
            Gets the token ID assigned to the token.
            </summary><value>The token ID assigned to the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.LexicalScopeAndIDTokenLexicalParseData.TokenKey"><summary>
            Gets the token key assigned to the token, if it is known.
            </summary><value>The token key assigned to the token, if it is known.</value></member><member name="T:ActiproSoftware.SyntaxEditor.LexicalScopeCollection"><summary>
            Encapsulates a collection of <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" /> objects.
            </summary><seealso cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" /></member><member name="M:ActiproSoftware.SyntaxEditor.LexicalScopeCollection.Add(ActiproSoftware.SyntaxEditor.ILexicalScope)"><summary>
            Adds a <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" /> to the collection.
            </summary><param name="lexicalScope">The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" /> to add to the collection.</param><returns>The position into which the new <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" /> was inserted.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.LexicalScopeCollection.Clear"><summary>
            Removes all <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" /> objects in the collection.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.LexicalScopeCollection.Insert(System.Int32,ActiproSoftware.SyntaxEditor.ILexicalScope)"><summary>
            Inserts a <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" /> into the collection at the specified index.
            </summary><param name="index">The zero-based index at which the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" /> should be inserted.</param><param name="lexicalScope">The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" /> to insert into the collection.</param></member><member name="M:ActiproSoftware.SyntaxEditor.LexicalScopeCollection.Remove(ActiproSoftware.SyntaxEditor.ILexicalScope)"><summary>
            Removes the specified <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" /> from the collection.
            </summary><param name="lexicalScope">The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" /> to remove from the collection.</param></member><member name="M:ActiproSoftware.SyntaxEditor.LexicalScopeCollection.RemoveAt(System.Int32)"><summary>
            Removes the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" /> at the specified index in the collection.
            </summary><param name="index">The zero-based index of the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" /> to be removed.</param></member><member name="M:ActiproSoftware.SyntaxEditor.LexicalScopeCollection.#ctor"><summary>
            Initializes a new instance of the <c>LexicalScopeCollection</c> class. 
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.LexicalScopeCollection.#ctor(ActiproSoftware.ComponentModel.ILogicalTreeNode)"><summary>
            Initializes a new instance of the <c>LexicalScopeCollection</c> class. 
            </summary><param name="owner">The owner of the collection.</param></member><member name="P:ActiproSoftware.SyntaxEditor.LexicalScopeCollection.LexicalState"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that owns the collection.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that owns the collection.</value></member><member name="P:ActiproSoftware.SyntaxEditor.LexicalScopeCollection.Item(System.Int32)"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" /> at the specified index. 
            <para>
            [C#] In C#, this property is the indexer for the <c>LexicalScopeCollection</c> class. 
            </para></summary><param name="index">The index of the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" /> to return.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" /> at the specified index. 
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.LexicalScopeLexicalStateTransition"><summary>
            Contains information about a lexical scope lexical state transition.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.LexicalScopeLexicalStateTransition.OnParentChanged"><summary>
            Invoked when logical parent is changed. 
            This is invoked after the parent has changed, and the purpose is to allow elements to perform actions based on the changed parent.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.LexicalScopeLexicalStateTransition.#ctor(ActiproSoftware.SyntaxEditor.ILexicalState,ActiproSoftware.SyntaxEditor.ILexicalScope)"><summary>
            Initializes a new instance of the <c>LexicalScopeLexicalStateTransition</c> class.
            </summary><param name="childLexicalState">The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that is transitioned to after the <see cref="P:ActiproSoftware.SyntaxEditor.LexicalScopeLexicalStateTransition.ParentLexicalScope" /> ends.</param><param name="childLexicalScope">The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" /> that is used in the <see cref="P:ActiproSoftware.SyntaxEditor.LexicalScopeLexicalStateTransition.ChildLexicalState" /> to end the lexical state.</param></member><member name="P:ActiproSoftware.SyntaxEditor.LexicalScopeLexicalStateTransition.ChildLexicalScope"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" /> that is used in the <see cref="P:ActiproSoftware.SyntaxEditor.LexicalScopeLexicalStateTransition.ChildLexicalState" /> to end the lexical state.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" /> that is used in the <see cref="P:ActiproSoftware.SyntaxEditor.LexicalScopeLexicalStateTransition.ChildLexicalState" /> to end the lexical state.</value></member><member name="P:ActiproSoftware.SyntaxEditor.LexicalScopeLexicalStateTransition.ChildLexicalState"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that is transitioned to after the <see cref="P:ActiproSoftware.SyntaxEditor.LexicalScopeLexicalStateTransition.ParentLexicalScope" /> ends.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that is transitioned to after the <see cref="P:ActiproSoftware.SyntaxEditor.LexicalScopeLexicalStateTransition.ParentLexicalScope" /> ends.</value></member><member name="P:ActiproSoftware.SyntaxEditor.LexicalScopeLexicalStateTransition.ParentLexicalScope"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" /> that owns this state transition.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" /> that owns this state transition.</value></member><member name="T:ActiproSoftware.SyntaxEditor.LexicalStateAndIDTokenLexicalParseData"><summary>
            Provides <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> lexical parse data based on a token ID and on an <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.LexicalStateAndIDTokenLexicalParseData.Equals(System.Object)"><summary>
            Determines whether the specified <c>Object</c> is equal to the current <c>Object</c>. 
            </summary><param name="obj">The <c>Object</c> to compare to the current <c>Object</c>.</param><returns><c>true</c> if the specified <c>Object</c> is equal to the current <c>Object</c>; 
            otherwise, <c>false</c>. 
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.LexicalStateAndIDTokenLexicalParseData.GetHashCode"><summary>
            Returns a hash code for this object.
            </summary><returns>An integer value that specifies a hash value for this object.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.LexicalStateAndIDTokenLexicalParseData.#ctor(ActiproSoftware.SyntaxEditor.ILexicalState,System.Byte)"><summary>
            Initializes a new instance of the <c>LexicalStateAndIDTokenLexicalParseData</c> class. 
            </summary><param name="lexicalState">The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that contains the token.</param><param name="tokenID">The ID of the token.</param></member><member name="P:ActiproSoftware.SyntaxEditor.LexicalStateAndIDTokenLexicalParseData.HighlightingStyle"><summary>
            Gets the <see cref="P:ActiproSoftware.SyntaxEditor.LexicalStateAndIDTokenLexicalParseData.HighlightingStyle" /> to use for drawing the token, if the token is aware of it.
            </summary><value>The <see cref="P:ActiproSoftware.SyntaxEditor.LexicalStateAndIDTokenLexicalParseData.HighlightingStyle" /> to use for drawing the token, if the token is aware of it.</value><remarks>
            In some languages, the token may not be aware of what highlighting style is used to draw it.
            In those cases, only the language itself knows what highlighting style to use for the token.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.LexicalStateAndIDTokenLexicalParseData.IsContentDivider"><summary>
            Gets whether the token is a content divider.
            </summary><value><c>true</c> if the token is a content divider; otherwise <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.LexicalStateAndIDTokenLexicalParseData.IsWhitespace"><summary>
            Gets whether the token represents whitespace.
            </summary><value><c>true</c> if the token represents whitespace; otherwise <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.LexicalStateAndIDTokenLexicalParseData.Language"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> that contains the token.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> that contains the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.LexicalStateAndIDTokenLexicalParseData.LexicalScope"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" />, if any, that defines the token.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalScope" />, if any, that defines the token.</value><remarks>
            If this value is <see langword="null" />, the token was not defined by a lexical scope.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.LexicalStateAndIDTokenLexicalParseData.LexicalState"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that contains the token.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> that contains the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.LexicalStateAndIDTokenLexicalParseData.TokenID"><summary>
            Gets the token ID assigned to the token.
            </summary><value>The token ID assigned to the token.</value></member><member name="P:ActiproSoftware.SyntaxEditor.LexicalStateAndIDTokenLexicalParseData.TokenKey"><summary>
            Gets the token key assigned to the token, if it is known.
            </summary><value>The token key assigned to the token, if it is known.</value></member><member name="T:ActiproSoftware.SyntaxEditor.LexicalStateCollection"><summary>
            Encapsulates a collection of <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> objects.
            </summary><seealso cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /></member><member name="M:ActiproSoftware.SyntaxEditor.LexicalStateCollection.Add(ActiproSoftware.SyntaxEditor.ILexicalState)"><summary>
            Adds a <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> into the collection.
            </summary><param name="lexicalState">The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> to add to the collection.</param><returns>The position into which the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> was inserted.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.LexicalStateCollection.Clear"><summary>
            Removes all <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> objects in the collection.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.LexicalStateCollection.Insert(System.Int32,ActiproSoftware.SyntaxEditor.ILexicalState)"><summary>
            Inserts a <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> into the collection.
            </summary><param name="index">The index at which to insert the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" />.</param><param name="lexicalState">The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> to insert to the collection.</param></member><member name="M:ActiproSoftware.SyntaxEditor.LexicalStateCollection.Remove(ActiproSoftware.SyntaxEditor.ILexicalState)"><summary>
            Removes the specified <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> from the collection.
            </summary><param name="lexicalState">The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> to remove from the collection.</param></member><member name="M:ActiproSoftware.SyntaxEditor.LexicalStateCollection.RemoveAt(System.Int32)"><summary>
            Removes the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> at the specified index in the collection.
            </summary><param name="index">The zero-based index of the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> to be removed.</param></member><member name="M:ActiproSoftware.SyntaxEditor.LexicalStateCollection.#ctor"><summary>
            Initializes a new instance of the <c>LexicalStateCollection</c> class. 
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.LexicalStateCollection.#ctor(ActiproSoftware.ComponentModel.ILogicalTreeNode)"><summary>
            Initializes a new instance of the <c>LexicalStateCollection</c> class. 
            </summary><param name="owner">The owner of the collection.</param></member><member name="P:ActiproSoftware.SyntaxEditor.LexicalStateCollection.Item(System.Int32)"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> at the specified index. 
            <para>
            [C#] In C#, this property is the indexer for the <c>LexicalStateCollection</c> class. 
            </para></summary><param name="index">The index of the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> to return.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> at the specified index. 
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.LexicalStateCollection.Item(System.String)"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> with the specified name. 
            <para>
            [C#] In C#, this property is the indexer for the <c>LexicalStateCollection</c> class. 
            </para></summary><param name="key">The key of the <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> to return.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.ILexicalState" /> with the specified key. 
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.MergableLexicalParserManager"><summary>
            Represents a manager that coordinates language and state shifting for the lexical parsing of one or more mergable languages.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.MergableLexicalParserManager.GetNextToken"><summary>
            Gets the next <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> by performing lexical parsing on the <see cref="P:ActiproSoftware.SyntaxEditor.MergableLexicalParserManager.TextBufferReader" />.
            </summary><returns>The next <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> by performing lexical parsing on the <see cref="P:ActiproSoftware.SyntaxEditor.MergableLexicalParserManager.TextBufferReader" />.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.MergableLexicalParserManager.PerformSemanticParse(ActiproSoftware.SyntaxEditor.MergableSyntaxLanguage,ActiproSoftware.SyntaxEditor.ITextBufferReader,System.String)"><summary>
            Performs a semantic parsing operation starting on the specified root <see cref="T:ActiproSoftware.SyntaxEditor.MergableSyntaxLanguage" /> by this manager.
            </summary><param name="rootLanguage">The root <see cref="T:ActiproSoftware.SyntaxEditor.MergableSyntaxLanguage" />.</param><param name="reader">The <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader" /> to use for reading text.</param><param name="sourceKey">The string-based key that identifies the sources of the code, which typically is a filename.</param><returns>The result of the semantic parsing operation.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.MergableLexicalParserManager.ProcessChildLanguage(ActiproSoftware.SyntaxEditor.IToken)"><summary>
            Iterates through all the tokens for a child language and returns the next <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> in the current language.
            </summary><param name="token">The first <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> in the child language.</param><returns>The next <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> in the current language.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.MergableLexicalParserManager.#ctor(ActiproSoftware.SyntaxEditor.ITextBufferReader,ActiproSoftware.SyntaxEditor.MergableSyntaxLanguage,System.String)"><summary>
            Initializes a new instance of the <c>MergableLexicalParserManager</c> class.
            </summary><param name="reader">The <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader" /> to use.</param><param name="rootLanguage">The root <see cref="T:ActiproSoftware.SyntaxEditor.MergableSyntaxLanguage" />.</param><param name="sourceKey">The string-based key that identifies the sources of the code, which typically is a filename.</param></member><member name="P:ActiproSoftware.SyntaxEditor.MergableLexicalParserManager.IsAtEnd"><summary>
            Gets whether the current <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader" /> is at the end of the text buffer.
            </summary><value><c>true</c> if the current <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader" /> is at the end of the text buffer; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.MergableLexicalParserManager.SourceKey"><summary>
            Gets the string-based key that identifies the sources of the code, which typically is a filename.
            </summary><value>The string-based key that identifies the sources of the code, which typically is a filename.</value></member><member name="P:ActiproSoftware.SyntaxEditor.MergableLexicalParserManager.TextBufferReader"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader" /> to use for reading.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader" /> to use for reading.</value></member><member name="T:ActiproSoftware.SyntaxEditor.SemanticParseFlags"><summary>
            Specifies flags for a semantic parsing operation.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.SemanticParseFlags.None"><summary>
            There are no flags set.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.SemanticParseFlags.ProgrammaticTextReplacement"><summary>
            The semantic parse is for a programmatic text replacement.
            </summary></member><member name="T:ActiproSoftware.SyntaxEditor.ITextRange"><summary>
            Provides the base requirements for an object that has range of two offset values within a text document.
            </summary></member><member name="P:ActiproSoftware.SyntaxEditor.ITextRange.TextRange"><summary>
            Gets or sets a <see cref="P:ActiproSoftware.SyntaxEditor.ITextRange.TextRange" /> that specifies the text range of the object.
            </summary><value>A <see cref="P:ActiproSoftware.SyntaxEditor.ITextRange.TextRange" /> that specifies the text range of the object.</value></member><member name="T:ActiproSoftware.SyntaxEditor.SyntaxError"><summary>
            Represents a syntax error in code.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxError.#ctor(ActiproSoftware.SyntaxEditor.TextRange,System.String)"><summary>
            Initializes a new instance of the <c>SyntaxError</c> class. 
            </summary><param name="textRange">The <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxError.TextRange" /> of the error.</param><param name="message">The error message.</param></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxError.Message"><summary>
            Gets the error message.
            </summary><value>The error message.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxError.TextRange"><summary>
            Gets or sets the <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxError.TextRange" /> of the error.
            </summary><value>The <see cref="P:ActiproSoftware.SyntaxEditor.SyntaxError.TextRange" /> of the error.</value></member><member name="T:ActiproSoftware.SyntaxEditor.SyntaxLanguageCollection"><summary>
            Encapsulates a collection of <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> objects.
            </summary><seealso cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguageCollection.ToString"><summary>
            Returns a <c>String</c> that represents the current <c>Object</c>.
            </summary><returns>A <c>String</c> that represents the current <c>Object</c>.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguageCollection.#ctor"><summary>
            Initializes a new instance of the <c>SyntaxLanguageCollection</c> class. 
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguageCollection.#ctor(ActiproSoftware.ComponentModel.ILogicalTreeNode)"><summary>
            Initializes a new instance of the <c>SyntaxLanguageCollection</c> class. 
            </summary><param name="owner">The owner of the collection.</param></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguageCollection.AllowDuplicateKeys"><summary>
            Gets whether duplicate keys are permitted within the collection.
            </summary><value><c>true</c> if duplicate keys are permitted; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguageCollection.Language"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> that owns the collection, if any.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> that owns the collection, if any.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguageCollection.Item(System.Int32)"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> at the specified index. 
            <para>
            [C#] In C#, this property is the indexer for the <c>SyntaxLanguageDomain</c> class. 
            </para></summary><param name="index">The index of the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> to return.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> at the specified index. 
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguageCollection.Item(System.String)"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> with the specified name. 
            <para>
            [C#] In C#, this property is the indexer for the <c>SyntaxLanguageDomain</c> class. 
            </para></summary><param name="key">The key of the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> to return.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> with the specified key. 
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.SyntaxLanguageEventArgs"><summary>
            Provides data for an event related to a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" />.
            </summary><seealso cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguageEventHandler" /></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguageEventArgs.ToString"><summary>
            Creates and returns a string representation of the current object.
            </summary><returns>A string representation of the current object.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguageEventArgs.#ctor(ActiproSoftware.SyntaxEditor.SyntaxLanguage)"><summary>
            Initializes a new instance of the <c>SyntaxLanguageEventArgs</c> class. 
            </summary><param name="language">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> that is affected by this event.</param></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguageEventArgs.Language"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> that is affected by this event.
            </summary><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> that is affected by this event.
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.SyntaxLanguageEventHandler"><summary>
            Represents the method that will handle the events related to a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" />.
            </summary><param name="sender">Sender of the event.</param><param name="e">A <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguageEventArgs" /> containing event data.</param><remarks>
            When you create a <c>SyntaxLanguageEventHandler</c> delegate, you identify the method that will handle the event. 
            To associate the event with your event handler, add an instance of the delegate to the event. 
            The event handler is called whenever the event occurs, unless you remove the delegate.
            </remarks><seealso cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguageEventArgs" /></member><member name="T:ActiproSoftware.SyntaxEditor.SyntaxLanguageProperty"><summary>
            Represents a property for a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguageProperty.ToString"><summary>
            Creates and returns a string representation of the current object.
            </summary><returns>A string representation of the current object.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguageProperty.#ctor(System.String,System.String)"><summary>
            Initializes a new instance of the <c>SyntaxLanguageProperty</c> class. 
            </summary><param name="key">The key of the property.</param><param name="value">The value of the property.</param></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguageProperty.Key"><summary>
            Gets a string-based key that identifies the object.
            </summary><value>A string-based key that identifies the object.</value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguageProperty.Value"><summary>
            Gets or sets the property value.
            </summary><value>The property value.</value></member><member name="T:ActiproSoftware.SyntaxEditor.SyntaxLanguagePropertyCollection"><summary>
            Provides a collection <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguageProperty" /> objects for a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguagePropertyCollection.Add(ActiproSoftware.SyntaxEditor.SyntaxLanguageProperty)"><summary>
            Adds the specified <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguageProperty" /> to the collection. 
            </summary><param name="property">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguageProperty" /> to add to the collection.</param><returns>
            The position into which the new item was inserted.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguagePropertyCollection.Contains(System.String)"><summary>
            Determines whether a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguageProperty" /> with the specified key is in the collection. 
            </summary><param name="key">The key of the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguageProperty" /> to return.</param><returns><c>true</c> if the collection contains the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguageProperty" />; otherwise, <c>false</c>. 
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguagePropertyCollection.IndexOf(System.String)"><summary>
            Returns the index of the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguageProperty" /> with the specified key in the collection.
            </summary><param name="key">The key of the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguageProperty" /> to return.</param><returns>
            If found, the index where the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguageProperty" /> is in the collection; otherwise, <c>-1</c>. 
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguagePropertyCollection.Insert(System.Int32,ActiproSoftware.SyntaxEditor.SyntaxLanguageProperty)"><summary>
            Inserts a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguageProperty" /> into the collection at the specified index.
            </summary><param name="index">The zero-based index at which the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguageProperty" /> should be inserted.</param><param name="property">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguageProperty" /> to insert into the collection.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguagePropertyCollection.Remove(ActiproSoftware.SyntaxEditor.SyntaxLanguageProperty)"><summary>
            Removes the specified <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguageProperty" /> from the collection. 
            </summary><param name="property">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguageProperty" /> to remove.</param></member><member name="M:ActiproSoftware.SyntaxEditor.SyntaxLanguagePropertyCollection.#ctor"><summary>
            Initializes a new instance of the <c>SyntaxLanguagePropertyCollection</c> class. 
            </summary></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguagePropertyCollection.Item(System.Int32)"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguageProperty" /> at the specified index. 
            <para>
            [C#] In C#, this property is the indexer for the <c>SyntaxLanguagePropertyCollection</c> class. 
            </para></summary><param name="index">The index of the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguageProperty" /> to return.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguageProperty" /> at the specified index. 
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.SyntaxLanguagePropertyCollection.Item(System.String)"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguageProperty" /> with the specified key. 
            <para>
            [C#] In C#, this property is the indexer for the <c>SyntaxLanguagePropertyCollection</c> class. 
            </para></summary><param name="key">The key of the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguageProperty" /> to return.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguageProperty" /> with the specified key. 
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.TokenCollection"><summary>
            Provides access to a collection of tokens in a <see cref="T:ActiproSoftware.SyntaxEditor.Document" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.TokenCollection.GetTokenAtOffset(System.Int32)"><summary>
            Returns the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that contains the specified offset.
            </summary><param name="offset">The offset to look for.</param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that contains the specified offset.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.TokenCollection.GetTokenEndOffset(System.Int32)"><summary>
            Gets the end offset of the specified <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </summary><param name="index">The index of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> to examine.</param><returns>The end offset of the specified <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.TokenCollection.GetTokenLength(System.Int32)"><summary>
            Gets the length of the specified <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </summary><param name="index">The index of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> to examine.</param><returns>The length of the specified <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.TokenCollection.GetTokenTextRange(System.Int32)"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> for the specified <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </summary><param name="index">The index of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> to examine.</param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> for the specified <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.TokenCollection.IndexOf(System.Int32)"><summary>
            Finds the index of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that contains the specified offset.
            </summary><param name="offset">The offset to look for.</param><returns>The index of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that contains the specified offset.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.TokenCollection.IndexOfRelative(System.Int32,System.Int32)"><summary>
            Finds the index of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that contains the specified offset using a relative algorithm.
            </summary><param name="tokenIndex">The index of the token at which to start looking.</param><param name="offset">The offset to look for.</param><returns>The index of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that contains the specified offset.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.TokenCollection.TokenContains(System.Int32,System.Int32)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> at the specified index contains the offset.
            </summary><param name="index">The index of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> to examine.</param><param name="offset">The offset to check.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> at the specified index contains the offset; otherwise, <c>false</c>.
            </returns></member><member name="P:ActiproSoftware.SyntaxEditor.TokenCollection.DeletedTokens"><summary>
            Gets the collection of <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> objects that were deleted from the <see cref="P:ActiproSoftware.SyntaxEditor.TokenCollection.Document" /> during the last lexical parse.
            </summary><value>The collection of <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> objects that were deleted from the <see cref="P:ActiproSoftware.SyntaxEditor.TokenCollection.Document" /> during the last lexical parse.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TokenCollection.Document"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> referenced by the <see cref="T:ActiproSoftware.SyntaxEditor.TokenCollection" />.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> referenced by the <see cref="T:ActiproSoftware.SyntaxEditor.TokenCollection" />.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TokenCollection.Item(System.Int32)"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> at the specified index. 
            <para>
            [C#] In C#, this property is the indexer for the <c>TokenCollection</c> class. 
            </para></summary><param name="index">The index of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> to return.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> at the specified index. 
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.CharClass"><summary>
            Stores information about a character class.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.CharClass.Add(System.Char)"><summary>
            Adds a single character to the character class.
            </summary><param name="ch">The character to add.</param></member><member name="M:ActiproSoftware.SyntaxEditor.CharClass.Add(System.Char,System.Char)"><summary>
            Adds an interval of characters to the character class.
            </summary><param name="start">The start character in the interval.</param><param name="end">The end character in the interval.</param></member><member name="M:ActiproSoftware.SyntaxEditor.CharClass.Add(ActiproSoftware.SyntaxEditor.CharInterval)"><summary>
            Adds an interval of characters to the character class.
            </summary><param name="interval">The interval of characters to add.</param></member><member name="M:ActiproSoftware.SyntaxEditor.CharClass.AddRange(ActiproSoftware.SyntaxEditor.CharInterval[])"><summary>
            Adds the contents of a <see cref="T:ActiproSoftware.SyntaxEditor.CharInterval" /> array to the collection.
            </summary><param name="intervals">The <see cref="T:ActiproSoftware.SyntaxEditor.CharInterval" /> array whose values are to be added.</param></member><member name="M:ActiproSoftware.SyntaxEditor.CharClass.AddRange(ActiproSoftware.SyntaxEditor.CharClass)"><summary>
            Adds the contents of a <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> to the collection.
            </summary><param name="charClass">The <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> whose values are to be added.</param></member><member name="M:ActiproSoftware.SyntaxEditor.CharClass.Contains(System.Char)"><summary>
            Returns whether the specified character is in the character class.
            </summary><param name="ch">The character to look for in the collection.</param><returns><c>true</c> if the character is in the collection; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.CharClass.Contains(System.Char,System.Char)"><summary>
            Returns whether the specified interval of characters is in the character class.
            </summary><param name="start">The start character in the interval.</param><param name="end">The end character in the interval.</param><returns><c>true</c> if the interval of characters is in the collection; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.CharClass.Contains(ActiproSoftware.SyntaxEditor.CharInterval)"><summary>
            Returns whether the specified interval is in the character class.
            </summary><param name="interval">The <see cref="T:ActiproSoftware.SyntaxEditor.CharInterval" /> to look for in the collection.</param><returns><c>true</c> if the interval is in the collection; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.CharClass.Contains(ActiproSoftware.SyntaxEditor.CharClass)"><summary>
            Returns whether the specified character class is in the character class.
            </summary><param name="charClass">The <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> to look for in the collection.</param><returns><c>true</c> if the character class is in the collection; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.CharClass.CopyTo(System.Array,System.Int32)"><summary>
            Copies the entire collection to a compatible one-dimensional <c>Array</c>, 
            starting at the specified index of the target array.
            </summary><param name="array">
            The one-dimensional <c>Array</c> that is the destination of the elements copied from the collection. 
            The <c>Array</c> must have zero-based indexing. 
            </param><param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param></member><member name="M:ActiproSoftware.SyntaxEditor.CharClass.Equals(System.Object)"><summary>
            Determines whether the specified <c>Object</c> is equal to the current <c>Object</c>. 
            </summary><param name="obj">The <c>Object</c> to compare to the current <c>Object</c>.</param><returns><c>true</c> if the specified <c>Object</c> is equal to the current <c>Object</c>; 
            otherwise, <c>false</c>. 
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.CharClass.GetEnumerator"><summary>
            Retrieves an <c>IEnumerator</c> object for the entire collection.
            </summary><returns>An <c>IEnumerator</c> object for the entire collection</returns><remarks>
            Enumerators are intended to be used only to read data in the collection. 
            Enumerators cannot be used to modify the underlying collection.
            <para>
            The enumerator does not have exclusive access to the collection.
            </para><para>
            When an enumerator is instantiated, it takes a snapshot of the current state of the collection. 
            If changes are made to the collection, such as adding, modifying or deleting elements, the 
            snapshot gets out of sync and the enumerator throws an <c>InvalidOperationException</c>. 
            Two enumerators instantiated from the same collection at the same time can have 
            different snapshots of the collection.
            </para></remarks></member><member name="M:ActiproSoftware.SyntaxEditor.CharClass.GetHashCode"><summary>
            Returns a hash code for this object.
            </summary><returns>An integer value that specifies a hash value for this object.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.CharClass.GetNegation"><summary>
            Creates the negation of the character class.
            </summary><remarks>
            The negation is the opposite of the character class, specified by a <c>^</c> character after the open square brace.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.CharClass.Remove(System.Char)"><summary>
            Removes the specified character from the character class.
            </summary><param name="ch">The character to remove.</param></member><member name="M:ActiproSoftware.SyntaxEditor.CharClass.ToString"><summary>
            Converts the object to a <c>String</c>.
            </summary><returns>
            A string whose value represents this object.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.CharClass.#ctor"><summary>
            Initializes a new instance of the <c>CharClass</c> class.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.CharClass.#ctor(System.Char)"><summary>
            Initializes a new instance of the <c>CharClass</c> class with a character.
            </summary><param name="ch">A character to add to the character class.</param></member><member name="M:ActiproSoftware.SyntaxEditor.CharClass.#ctor(ActiproSoftware.SyntaxEditor.CharInterval[])"><summary>
            Initializes a new instance of the <c>CharClass</c> class with an array of <see cref="T:ActiproSoftware.SyntaxEditor.CharInterval" /> objects.
            </summary><param name="intervals">The array of <see cref="T:ActiproSoftware.SyntaxEditor.CharInterval" /> objects that should be added.</param></member><member name="M:ActiproSoftware.SyntaxEditor.CharClass.#ctor(ActiproSoftware.SyntaxEditor.CharClass)"><summary>
            Initializes a new instance of the <c>CharClass</c> class with another <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" />.
            </summary><param name="charClass">The <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> whose items should be added.</param></member><member name="M:ActiproSoftware.SyntaxEditor.CharClass.#ctor(System.Char,System.Char)"><summary>
            Initializes a new instance of the <c>CharClass</c> class with an interval of characters.
            </summary><param name="start">The start character in the interval.</param><param name="end">The end character in the interval.</param></member><member name="M:ActiproSoftware.SyntaxEditor.CharClass.#ctor(System.Char,System.Boolean)"><summary>
            Initializes a new instance of the <c>CharClass</c> class with a character and an optional complement.
            </summary><param name="ch">A character to add to the character class.</param><param name="complement">Whether to complement the character class after adding the initial character.</param></member><member name="M:ActiproSoftware.SyntaxEditor.CharClass.#ctor(System.Char,System.Char,System.Boolean)"><summary>
            Initializes a new instance of the <c>CharClass</c> class with an interval of characters and an optional complement.
            </summary><param name="start">The start character in the interval.</param><param name="end">The end character in the interval.</param><param name="complement">Whether to complement the character class after adding the initial character.</param></member><member name="P:ActiproSoftware.SyntaxEditor.CharClass.All"><summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains all Unicode characters.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains all Unicode characters.</value></member><member name="P:ActiproSoftware.SyntaxEditor.CharClass.Alpha"><summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains all alphabetic characters.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains all alphabetic characters.</value><remarks>This character class is the equivalent of [A-Za-z\u00AA\u00B5\u00BA\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u00FF].</remarks></member><member name="P:ActiproSoftware.SyntaxEditor.CharClass.Digit"><summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains all Unicode decimal digits.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains all Unicode decimal digits.</value><remarks>This character class can be abbreviated by: \d</remarks></member><member name="P:ActiproSoftware.SyntaxEditor.CharClass.HexDigit"><summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains all Unicode hexidecimal digits.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains all Unicode hexidecimal digits.</value></member><member name="P:ActiproSoftware.SyntaxEditor.CharClass.LineTerminator"><summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains all Unicode line terminators.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains all Unicode line terminators.</value></member><member name="P:ActiproSoftware.SyntaxEditor.CharClass.LineTerminatorWhitespace"><summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains all Unicode line terminators and whitespace characters.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains all Unicode line terminators and whitespace characters.</value><remarks>This character class is the equivalent of [\f\n\r\t\v\x85\p{Z}] can be abbreviated by: \s</remarks></member><member name="P:ActiproSoftware.SyntaxEditor.CharClass.NonAlpha"><summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains no alphabetic digits.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains no alphabetic digits.</value><remarks>This character class is the equivalent of [^A-Za-z\u00AA\u00B5\u00BA\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u00FF].</remarks></member><member name="P:ActiproSoftware.SyntaxEditor.CharClass.NonDigit"><summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains no Unicode decimal digits.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains no Unicode decimal digits.</value><remarks>This character class can be abbreviated by: \D</remarks></member><member name="P:ActiproSoftware.SyntaxEditor.CharClass.None"><summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains no characters.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains no characters.</value></member><member name="P:ActiproSoftware.SyntaxEditor.CharClass.NonHexDigit"><summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains no Unicode hexidecimal digits.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains no Unicode hexidecimal digits.</value><remarks>This character class can be abbreviated by: \D</remarks></member><member name="P:ActiproSoftware.SyntaxEditor.CharClass.NonLineTerminator"><summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains no Unicode line terminators.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains no Unicode line terminators.</value></member><member name="P:ActiproSoftware.SyntaxEditor.CharClass.NonLineTerminatorWhitespace"><summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains no Unicode line terminators or whitespace characters.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains no Unicode line terminators or whitespace characters.</value><remarks>This character class is the equivalent of [^\f\n\r\t\v\x85\p{Z}] can be abbreviated by: \S</remarks></member><member name="P:ActiproSoftware.SyntaxEditor.CharClass.NonWhitespace"><summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains no Unicode whitespace characters.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains no Unicode whitespace characters.</value></member><member name="P:ActiproSoftware.SyntaxEditor.CharClass.NonWord"><summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains no word characters.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains no word characters.</value><remarks>This character class can be abbreviated by: \W</remarks></member><member name="P:ActiproSoftware.SyntaxEditor.CharClass.Whitespace"><summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains all Unicode whitespace characters.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains all Unicode whitespace characters.</value></member><member name="P:ActiproSoftware.SyntaxEditor.CharClass.Word"><summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains all word characters.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> that contains all word characters.</value><remarks>
            This character class consists of the union of the <see cref="P:ActiproSoftware.SyntaxEditor.CharClass.Alpha" /> and <see cref="P:ActiproSoftware.SyntaxEditor.CharClass.Digit" /> character
            classes along with the _ (underscore) character and can be abbreviated by: \w
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.CharClass.CharacterCount"><summary>
            Gets the number of characters contained in the <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> instance.
            </summary><value>The number of characters contained in the <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> instance.</value></member><member name="P:ActiproSoftware.SyntaxEditor.CharClass.Count"><summary>
            Gets the number of elements contained in the <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> instance.
            </summary><value>The number of elements contained in the <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> instance.</value></member><member name="P:ActiproSoftware.SyntaxEditor.CharClass.InnerList"><summary>
            Gets the list of elements contained in the <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> instance.
            </summary><value>
            An <see cref="T:System.Collections.ArrayList" /> representing the <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> instance itself.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.CharClass.IsSingleCharacter"><summary>
            Gets whether the character class only contains an interval for a single character.
            </summary><value><c>true</c> if the character class only contains an interval for a single character; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.CharClass.IsSynchronized"><summary>
            Gets a value indicating whether access to the collection is synchronized (thread-safe).
            </summary><value><c>true</c> if the collection is synchronized (thread-safe); otherwise, <c>false</c>.
            </value><remarks>
            To guarantee the thread safety of the collection, all operations must be done through 
            the wrapper returned by the <see cref="P:ActiproSoftware.SyntaxEditor.CharClass.SyncRoot" /> property.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.CharClass.SyncRoot"><summary>
            Gets an <c>Object</c> that can be used to synchronize access to the collection.
            </summary><value>
            An <c>Object</c> that can be used to synchronize access to the collection.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.CharClass.Item(System.Int32)"><summary>
            Gets the interval at the specified index. 
            <para>
            [C#] In C#, this property is the indexer for the <c>CharClass</c> class. 
            </para></summary><param name="index">The index of the interval to return.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.CharInterval" /> at the specified index. 
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.CharInterval"><summary>
            Stores an interval of characters.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.CharInterval.Contains(System.Char)"><summary>
            Returns whether the specified character is contained by the interval.
            </summary><param name="ch">The character to test.</param><returns><c>true</c> if the specified character is contained by the interval; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.CharInterval.Contains(ActiproSoftware.SyntaxEditor.CharInterval)"><summary>
            Returns whether the specified character interval is contained by the interval.
            </summary><param name="interval">The character interval to test.</param><returns><c>true</c> if the specified character interval is contained by the interval; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.CharInterval.Equals(System.Object)"><summary>
            Determines whether the specified <c>Object</c> is equal to the current <c>Object</c>. 
            </summary><param name="obj">The <c>Object</c> to compare to the current <c>Object</c>.</param><returns><c>true</c> if the specified <c>Object</c> is equal to the current <c>Object</c>; 
            otherwise, <c>false</c>. 
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.CharInterval.GetHashCode"><summary>
            Returns a hash code for this object.
            </summary><returns>An integer value that specifies a hash value for this object.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.CharInterval.IntersectsWith(ActiproSoftware.SyntaxEditor.CharInterval)"><summary>
            Returns whether the specified character interval intersects with the interval.
            </summary><param name="interval">The character interval to test.</param><returns><c>true</c> if the specified character interval intersects with the interval; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.CharInterval.GetIntersection(ActiproSoftware.SyntaxEditor.CharInterval)"><summary>
            Creates the intersection of the interval with another <see cref="T:ActiproSoftware.SyntaxEditor.CharInterval" />.
            </summary><param name="interval">The <see cref="T:ActiproSoftware.SyntaxEditor.CharInterval" /> used to find the intersection.</param><returns>The intersection of the interval with another <see cref="T:ActiproSoftware.SyntaxEditor.CharInterval" />.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.CharInterval.ToString"><summary>
            Converts the object to a <c>String</c>.
            </summary><returns>
            A string whose value represents this object.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.CharInterval.#ctor(System.Char)"><summary>
            Initializes a new instance of the <see cref="T:ActiproSoftware.SyntaxEditor.CharInterval" /> class.
            </summary><param name="ch">The character in the interval.</param></member><member name="M:ActiproSoftware.SyntaxEditor.CharInterval.#ctor(System.Char,System.Char)"><summary>
            Initializes a new instance of the <see cref="T:ActiproSoftware.SyntaxEditor.CharInterval" /> class.
            </summary><param name="start">The start character in the interval.</param><param name="end">The end character in the interval.</param></member><member name="P:ActiproSoftware.SyntaxEditor.CharInterval.Count"><summary>
            Gets the number of characters contained in interval.
            </summary><value>The number of characters contained in interval.</value></member><member name="P:ActiproSoftware.SyntaxEditor.CharInterval.End"><summary>
            Gets or sets the end character in the interval of this <see cref="T:ActiproSoftware.SyntaxEditor.CharInterval" />.
            </summary><value>The end character in the interval of this <see cref="T:ActiproSoftware.SyntaxEditor.CharInterval" />.</value></member><member name="P:ActiproSoftware.SyntaxEditor.CharInterval.Start"><summary>
            Gets or sets the start character in the interval of this <see cref="T:ActiproSoftware.SyntaxEditor.CharInterval" />.
            </summary><value>The start character in the interval of this <see cref="T:ActiproSoftware.SyntaxEditor.CharInterval" />.</value></member><member name="T:ActiproSoftware.SyntaxEditor.InvalidRegexPatternException"><summary>
            An exception that is thrown when parsing invalid regular expression patterns.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.InvalidRegexPatternException.#ctor"><summary>
            Initializes a new instance of the <c>InvalidRegexPatternException</c> class.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.InvalidRegexPatternException.#ctor(System.String)"><summary>
            Initializes a new instance of the <c>InvalidRegexPatternException</c> class with a specified error message.
            </summary><param name="message">The error message that explains the reason for the exception.</param></member><member name="M:ActiproSoftware.SyntaxEditor.InvalidRegexPatternException.#ctor(System.String,System.Exception)"><summary>
            Initializes a new instance of the <c>InvalidRegexPatternException</c> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary><param name="message">The error message that explains the reason for the exception.</param><param name="innerException">The exception that is the cause of the current exception.</param></member><member name="T:ActiproSoftware.SyntaxEditor.MatchType"><summary>
            Represents the type of regular expression match that was made.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.MatchType.NoMatch"><summary>
            No match was made.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.MatchType.ExactMatch"><summary>
            An exact match was made.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.MatchType.LooseMatch"><summary>
            A loose match was made.  This occurs when using a case insensitivity of <c>AutoCorrect</c> and a non-exact match was found.
            </summary></member><member name="T:ActiproSoftware.SyntaxEditor.CaseSensitivity"><summary>
            Represents the type of case sensitivity to apply.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.CaseSensitivity.Sensitive"><summary>
            Case sensitive - exact letter case is matched.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.CaseSensitivity.Insensitive"><summary>
            Case insensitive - upper and lower case of a letter is matched.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.CaseSensitivity.AutoCorrect"><summary>
            Treated the same as <c>Insensitive</c> however the text is converted to the exact pattern if not already equal to it.
            This is useful for languages like <c>VB.NET</c> where keywords should be forced to be certain combinations of mixed case letters.
            </summary></member><member name="T:ActiproSoftware.SyntaxEditor.IWordBreakFinder"><summary>
            Provides the base requirements for an object that finds word breaks within a <see cref="T:ActiproSoftware.SyntaxEditor.Document" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.IWordBreakFinder.FindCurrentWordEnd(ActiproSoftware.SyntaxEditor.Document,System.Int32)"><summary>
            Returns the <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> offset of the word end character that occurs at or after the specified start offset.
            </summary><param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> to examine.</param><param name="startOffset">The offset from which to start parsing.</param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> offset of the word end character that occurs at or after the specified start offset.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.IWordBreakFinder.FindCurrentWordStart(ActiproSoftware.SyntaxEditor.Document,System.Int32)"><summary>
            Returns the <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> offset of the word start character that occurs at or before the specified start offset.
            </summary><param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> to examine.</param><param name="startOffset">The offset from which to start parsing.</param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> offset of the word start character that occurs at or before the specified start offset.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.IWordBreakFinder.FindNextWordStart(ActiproSoftware.SyntaxEditor.Document,System.Int32)"><summary>
            Returns the <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> offset of the word start character that occurs after the specified start offset.
            </summary><param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> to examine.</param><param name="startOffset">The offset from which to start parsing.</param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> offset of the word start character that occurs after the specified start offset.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.IWordBreakFinder.FindPreviousWordStart(ActiproSoftware.SyntaxEditor.Document,System.Int32)"><summary>
            Returns the <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> offset of the word start character that occurs before the specified start offset.
            </summary><param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> to examine.</param><param name="startOffset">The offset from which to start parsing.</param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> offset of the word start character that occurs before the specified start offset.</returns></member><member name="T:ActiproSoftware.SyntaxEditor.DefaultWordBreakFinder"><summary>
            Provides the default implementation of an object that finds word breaks within a <see cref="T:ActiproSoftware.SyntaxEditor.Document" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.DefaultWordBreakFinder.FindCurrentWordEnd(ActiproSoftware.SyntaxEditor.Document,System.Int32)"><summary>
            Returns the <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> offset of the word end character that occurs at or after the specified start offset.
            </summary><param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> to examine.</param><param name="startOffset">The offset from which to start parsing.</param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> offset of the word end character that occurs at or after the specified start offset.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.DefaultWordBreakFinder.FindCurrentWordStart(ActiproSoftware.SyntaxEditor.Document,System.Int32)"><summary>
            Returns the <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> offset of the word start character that occurs at or before the specified start offset.
            </summary><param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> to examine.</param><param name="startOffset">The offset from which to start parsing.</param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> offset of the word start character that occurs at or before the specified start offset.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.DefaultWordBreakFinder.FindNextWordStart(ActiproSoftware.SyntaxEditor.Document,System.Int32)"><summary>
            Returns the <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> offset of the word start character that occurs after the specified start offset.
            </summary><param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> to examine.</param><param name="startOffset">The offset from which to start parsing.</param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> offset of the word start character that occurs after the specified start offset.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.DefaultWordBreakFinder.FindPreviousWordStart(ActiproSoftware.SyntaxEditor.Document,System.Int32)"><summary>
            Returns the <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> offset of the word start character that occurs before the specified start offset.
            </summary><param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> to examine.</param><param name="startOffset">The offset from which to start parsing.</param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> offset of the word start character that occurs before the specified start offset.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.DefaultWordBreakFinder.GetDefaultWordContainsAdditionalCharacters"><summary>
            Gets the default <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> for the <see cref="P:ActiproSoftware.SyntaxEditor.DefaultWordBreakFinder.WordContainsAdditionalCharacters" /> property.
            </summary><returns>The default <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> for the <see cref="P:ActiproSoftware.SyntaxEditor.DefaultWordBreakFinder.WordContainsAdditionalCharacters" /> property.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.DefaultWordBreakFinder.GetDefaultWordStandaloneCharacters"><summary>
            Gets the default <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> for the <see cref="P:ActiproSoftware.SyntaxEditor.DefaultWordBreakFinder.WordStandaloneCharacters" /> property.
            </summary><returns>The default <see cref="T:ActiproSoftware.SyntaxEditor.CharClass" /> for the <see cref="P:ActiproSoftware.SyntaxEditor.DefaultWordBreakFinder.WordStandaloneCharacters" /> property.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.DefaultWordBreakFinder.ResetWordContainsAdditionalCharacters"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.DefaultWordBreakFinder.WordContainsAdditionalCharacters" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.DefaultWordBreakFinder.ShouldSerializeWordContainsAdditionalCharacters"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.DefaultWordBreakFinder.WordContainsAdditionalCharacters" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.DefaultWordBreakFinder.ResetWordStandaloneCharacters"><summary>
            Resets the <see cref="P:ActiproSoftware.SyntaxEditor.DefaultWordBreakFinder.WordStandaloneCharacters" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.DefaultWordBreakFinder.ShouldSerializeWordStandaloneCharacters"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.SyntaxEditor.DefaultWordBreakFinder.WordStandaloneCharacters" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.DefaultWordBreakFinder.#ctor"><summary>
            Initializes a new instance of the <c>DefaultWordBreakFinder</c> class. 
            </summary><remarks>
            The default constructor initializes all fields to their default values.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.DefaultWordBreakFinder.WordContainsAdditionalCharacters"><summary>
            Gets or sets the set of additional characters that can constitute the inside of a word, other than letters and digits.
            </summary><value>The set of additional characters that can constitute the inside of a word, other than letters and digits.</value><remarks>
            The default value is the <c>_</c> character.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.DefaultWordBreakFinder.WordStandaloneCharacters"><summary>
            Gets or sets the set of characters that are intended to be single character words.
            </summary><value>The set of characters that are intended to be single character words.</value><remarks>
            The default value is the set of <c>.,()&lt;&gt;[]{}?!\/:;'"</c> characters.
            </remarks></member><member name="T:ActiproSoftware.SyntaxEditor.DocumentModification"><summary>
            Represents a document modification.
            </summary><remarks>
            All document modifications are represented in terms of a replace operation.
            The <see cref="P:ActiproSoftware.SyntaxEditor.DocumentModification.StartOffset" /> property indicates the offset at which the modification occurs.
            For delete operations, the <see cref="P:ActiproSoftware.SyntaxEditor.DocumentModification.InsertedText" /> length is <c>0</c>.
            For insert operations that have no selection of text to be replaced, the <see cref="P:ActiproSoftware.SyntaxEditor.DocumentModification.DeletedText" /> length is <c>0</c>.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentModification.HasFlag(ActiproSoftware.SyntaxEditor.DocumentModificationFlags)"><summary>
            Returns whether the modification has the specified <see cref="T:ActiproSoftware.SyntaxEditor.DocumentModificationFlags" /> flag.
            </summary><param name="flag">The <see cref="T:ActiproSoftware.SyntaxEditor.DocumentModificationFlags" /> to check for.</param><returns><c>true</c> if the modification has the specified <see cref="T:ActiproSoftware.SyntaxEditor.DocumentModificationFlags" /> flag; otherwise, <c>false</c>.
            </returns></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentModification.DeletedText"><summary>
            Gets the text that was deleted by the modification.
            </summary><value>The text that was deleted by the modification.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentModification.DeletionEndOffset"><summary>
            Gets the offset at which the deletion ended.
            </summary><value>The offset at which the deletion ended.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentModification.DeletionEndLineIndex"><summary>
            Gets the document line index at which the deletion ended.
            </summary><value>The document line index at which the deletion ended.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentModification.InsertedText"><summary>
            Gets the text that was inserted by the modification.
            </summary><value>The text that was inserted by the modification.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentModification.InsertionEndOffset"><summary>
            Gets the offset at which the insertion ended.
            </summary><value>The offset at which the insertion ended.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentModification.InsertionEndLineIndex"><summary>
            Gets the document line index at which the insertion ended.
            </summary><value>The document line index at which the insertion ended.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentModification.LengthDelta"><summary>
            Gets the net change in length to the document after performing the modification.
            </summary><value>The net change in length to the document after performing the modification.</value><remarks>
            This value is the length of <see cref="P:ActiproSoftware.SyntaxEditor.DocumentModification.InsertedText" /> minus the length of <see cref="P:ActiproSoftware.SyntaxEditor.DocumentModification.DeletedText" />.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentModification.LexicalParseTextRange"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> of offsets that were modified by the lexical parsing phase.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> of offsets that were modified by the lexical parsing phase.</value><remarks>
            This property returns <see cref="P:ActiproSoftware.SyntaxEditor.TextRange.Deleted" /> until after the lexical parsing phase is complete.
            Also it is not filled in if lexical parsing is suspended.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentModification.LinesDeleted"><summary>
            Gets the number of document lines deleted after performing the modification.
            </summary><value>The number of document lines deleted after performing the modification.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentModification.LinesDelta"><summary>
            Gets the net change in document lines after performing the modification.
            </summary><value>The net change in document lines after performing the modification.</value><remarks>
            This value is the <see cref="P:ActiproSoftware.SyntaxEditor.DocumentModification.LinesInserted" /> value minus the <see cref="P:ActiproSoftware.SyntaxEditor.DocumentModification.LinesDeleted" /> value.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentModification.LinesInserted"><summary>
            Gets the number of lines inserted after performing the modification.
            </summary><value>The number of lines inserted after performing the modification.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentModification.Name"><summary>
            Gets the name describing the modification type.
            </summary><value>A <c>String</c> representing the name describing the modification type.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentModification.OutliningParseTextRange"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> of offsets that were modified by the outlining parsing phase.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> of offsets that were modified by the outlining parsing phase.</value><remarks>
            This property returns <see cref="P:ActiproSoftware.SyntaxEditor.TextRange.Deleted" /> until after the outlining parsing phase is complete.
            Also it is not filled in if parsing is suspended or if outlining is performed in a separate thread.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentModification.StartOffset"><summary>
            Gets the offset at which the modification occurred.
            </summary><value>The offset at which the modification occurred.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentModification.StartOffsetIsAtLineTerminator"><summary>
            Gets whether the start offset is at a line terminator.
            </summary><value><c>true</c> if the start offset is at a line terminator; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentModification.StartLineIndex"><summary>
            Gets the document line index at which the modification occurred.
            </summary><value>The document line index at which the modification occurred.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentModification.Type"><summary>
            Gets an <see cref="T:ActiproSoftware.SyntaxEditor.DocumentModificationType" /> that describes why the modification is made.
            </summary><value>An <see cref="T:ActiproSoftware.SyntaxEditor.DocumentModificationType" /> that describes why the modification is made.</value></member><member name="T:ActiproSoftware.SyntaxEditor.DocumentModificationEventArgs"><summary>
            Event arguments for <see cref="P:ActiproSoftware.SyntaxEditor.DocumentModificationEventArgs.Document" /> modification events.
            </summary><remarks>
            This class is used with the <see cref="T:ActiproSoftware.SyntaxEditor.DocumentModificationEventHandler" /> delegate.
            </remarks><seealso cref="T:ActiproSoftware.SyntaxEditor.DocumentModificationEventHandler" /></member><member name="M:ActiproSoftware.SyntaxEditor.DocumentModificationEventArgs.#ctor(ActiproSoftware.SyntaxEditor.Document,ActiproSoftware.SyntaxEditor.DocumentModification)"><summary>
            Initializes a new instance of the <c>DocumentModificationEventArgs</c> class.
            </summary><param name="document">The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> that is affected by this event.</param><param name="modification">The <see cref="T:ActiproSoftware.SyntaxEditor.DocumentModification" /> that is made to the document.</param></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentModificationEventArgs.Cancel"><summary>
            Gets or sets whether to cancel the modification.
            </summary><value><c>true</c> if the modification should be cancelled; otherwise, <c>false</c>.
            </value><remarks>
            This property is only used by the <see cref="!:ActiproSoftware.SyntaxEditor.Document.PreTextChanging" /> and <see cref="!:SyntaxEditor.DocumentPreTextChanging" /> events.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentModificationEventArgs.DirtyTextRange"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> that stores the range of character offsets that need to be repainted.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> that stores the range of character offsets that need to be repainted.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentModificationEventArgs.Document"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> that is affected by this event.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> that is affected by this event.</value></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentModificationEventArgs.IsProgrammaticTextReplacement"><summary>
            Gets or sets whether the event is for a programmatic text replacement.
            </summary><value><c>true</c> if the event is for a programmatic text replacement; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.DocumentModificationEventArgs.Modification"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.DocumentModification" /> that is made to the document, if known.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.DocumentModification" /> that is made to the document, if known.</value></member><member name="T:ActiproSoftware.SyntaxEditor.DocumentModificationEventHandler"><summary>
            Represents the method that will handle <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> modification events.
            </summary><param name="sender">Sender of the event.</param><param name="e">A <see cref="T:ActiproSoftware.SyntaxEditor.DocumentModificationEventArgs" /> containing event data.</param><remarks>
            When you create a <c>DocumentModificationEventHandler</c> delegate, you identify the method that will handle the event. 
            To associate the event with your event handler, add an instance of the delegate to the event. 
            The event handler is called whenever the event occurs, unless you remove the delegate.
            </remarks><seealso cref="T:ActiproSoftware.SyntaxEditor.DocumentModificationEventArgs" /></member><member name="T:ActiproSoftware.SyntaxEditor.DocumentModificationFlags"><summary>
            Specifies flags for a <see cref="T:ActiproSoftware.SyntaxEditor.DocumentModification" />.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationFlags.None"><summary>
            There are no flags set.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationFlags.Delete"><summary>
            The modification involves a delete operation.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationFlags.Insert"><summary>
            The modification involves an insert operation.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationFlags.TextReplacement"><summary>
            The modification completely replaces the document's text.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationFlags.Undo"><summary>
            The modification is generated by an undo operation.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationFlags.Redo"><summary>
            The modification is generated by a redo operation.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationFlags.ProgrammaticTextReplacement"><summary>
            The modification completely replaces the document's text and is only caused by setting the <see cref="P:ActiproSoftware.SyntaxEditor.Document.Text" /> property.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationFlags.RetainSelection"><summary>
            Prevents the caret from moving to the end of the modification in the selected view.
            </summary></member><member name="T:ActiproSoftware.SyntaxEditor.DocumentModificationType"><summary>
            Designates the type of document modification.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.AutoComplete"><summary>
            An IntelliPrompt auto-complete action.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.AutoFormat"><summary>
            An auto-format action.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.AutoIndent"><summary>
            An auto-indent action.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.AutoReplace"><summary>
            An auto-replace action.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.Backspace"><summary>
            The press of the Backspace key.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.ChangeCase"><summary>
            A character casing change action.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.CommentLines"><summary>
            A comment lines action.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.ConvertSpacesToTabs"><summary>
            A convert spaces to tabs action.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.ConvertTabsToSpaces"><summary>
            A convert tabs to spaces action.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.Custom"><summary>
            A custom modification type.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.Cut"><summary>
            A cut to the clipboard action.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.Delete"><summary>
            A deletion action.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.DragAndDrop"><summary>
            A drag and drop action.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.DuplicateLine"><summary>
            A duplicate line action.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.Enter"><summary>
            The press of the Enter key.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.Indent"><summary>
            An indent action.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.InsertCodeSnippetTemplate"><summary>
            A code snippet template insertion action.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.InsertFile"><summary>
            An insert file action.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.Outdent"><summary>
            An outdent action.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.OpenLine"><summary>
            An open line action.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.Paste"><summary>
            A paste from the clipboard action.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.Replace"><summary>
            A replace action.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.ReplaceAll"><summary>
            A replace all action.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.SpellingChange"><summary>
            A spelling change action.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.ToggleCase"><summary>
            A toggle case action.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.TransposeCharacters"><summary>
            A transpose characters action.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.TransposeLines"><summary>
            A transpose lines action.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.TransposeWords"><summary>
            A transpose words action.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.TrimTrailingWhitespace"><summary>
            A trim trailing whitespace action.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.Typing"><summary>
            A typing action.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.UncommentLines"><summary>
            An uncomment lines action.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DocumentModificationType.UpdateCodeSnippetTemplateFields"><summary>
            A code snippet template update fields action.
            </summary></member><member name="T:ActiproSoftware.SyntaxEditor.ITextBufferReader"><summary>
            Provides the base requirements for an object that reads characters from a fixed text buffer.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.ITextBufferReader.GetSubstring(System.Int32,System.Int32)"><summary>
            Returns a substring from the text buffer using <see cref="!:LineTerminator.Newline" /> for line ends.
            </summary><param name="offset">The offset at which to retrieve the text.</param><param name="length">The number of characters to return.</param><returns>The substring from the text buffer using <see cref="!:LineTerminator.Newline" /> for line ends.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.ITextBufferReader.Peek"><summary>
            Peeks at a single character from the text buffer without seeking past it.
            </summary><returns>The character that was read.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.ITextBufferReader.Peek(System.Int32)"><summary>
            Peeks at a certain character from the text buffer after the current <see cref="P:ActiproSoftware.SyntaxEditor.ITextBufferReader.Offset" /> without seeking past it.
            </summary><returns>The character that was read.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.ITextBufferReader.PeekReverse"><summary>
            Reverse peeks at a single character from the text buffer without seeking past it.
            </summary><returns>The character that was read.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.ITextBufferReader.Pop"><summary>
            Pops the top offset from the stack and moves the <see cref="P:ActiproSoftware.SyntaxEditor.ITextBufferReader.Offset" /> to that offset.
            </summary><remarks><c>true</c> if a pop occurred; otherwise, <c>false</c>.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.ITextBufferReader.PopAll"><summary>
            Pops the all offsets from the stack and moves the <see cref="P:ActiproSoftware.SyntaxEditor.ITextBufferReader.Offset" /> to the offset that was on the bottom of the stack.
            </summary><remarks><c>true</c> if a pop occurred; otherwise, <c>false</c>.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.ITextBufferReader.Push"><summary>
            Pushes the <see cref="P:ActiproSoftware.SyntaxEditor.ITextBufferReader.Offset" /> onto the stack for later restoration.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.ITextBufferReader.Read"><summary>
            Reads a single character from the text buffer and seeks forward one offset.
            </summary><returns>The character that was read.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.ITextBufferReader.ReadReverse"><summary>
            Reverse reads a single character from the text buffer and seeks backward one offset.
            </summary><returns>The character that was read.</returns></member><member name="P:ActiproSoftware.SyntaxEditor.ITextBufferReader.HasStackEntries"><summary>
            Gets whether there are entries on the stack.
            </summary><value><c>true</c> if there are entries on the stack; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.ITextBufferReader.IsAtEnd"><summary>
            Gets whether the current <see cref="P:ActiproSoftware.SyntaxEditor.ITextBufferReader.Offset" /> is at the end of the text buffer.
            </summary><value><c>true</c> if the current <see cref="P:ActiproSoftware.SyntaxEditor.ITextBufferReader.Offset" /> is at the end of the text buffer; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.ITextBufferReader.IsAtStart"><summary>
            Gets whether the current <see cref="P:ActiproSoftware.SyntaxEditor.ITextBufferReader.Offset" /> is at the start of the text buffer.
            </summary><value><c>true</c> if the current <see cref="P:ActiproSoftware.SyntaxEditor.ITextBufferReader.Offset" /> is at the start of the text buffer; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.ITextBufferReader.IsWhitespaceOnlyAfterOnLine"><summary>
            Gets whether only whitespace characters appear at and after the <see cref="P:ActiproSoftware.SyntaxEditor.ITextBufferReader.Offset" /> on the current line.
            </summary><value><c>true</c> if only whitespace characters appear at and after the <see cref="P:ActiproSoftware.SyntaxEditor.ITextBufferReader.Offset" /> on the current line; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.ITextBufferReader.IsWhitespaceOnlyBeforeOnLine"><summary>
            Gets whether only whitespace characters appear before the <see cref="P:ActiproSoftware.SyntaxEditor.ITextBufferReader.Offset" /> on the current line.
            </summary><value><c>true</c> if only whitespace characters appear before the <see cref="P:ActiproSoftware.SyntaxEditor.ITextBufferReader.Offset" /> on the current line; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.ITextBufferReader.Length"><summary>
            Gets the number of characters in the text buffer.
            </summary><value>The number of characters in the text buffer.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ITextBufferReader.LineIndex"><summary>
            Gets the index of the line that contains the <see cref="P:ActiproSoftware.SyntaxEditor.ITextBufferReader.Offset" />.
            </summary><value>The index of the line that contains the <see cref="P:ActiproSoftware.SyntaxEditor.ITextBufferReader.Offset" />.</value></member><member name="P:ActiproSoftware.SyntaxEditor.ITextBufferReader.Offset"><summary>
            Gets or sets the current reader position in the text buffer.
            </summary><value>The current reader position in the text buffer.</value><remarks>
            Using the setter of this property will invalidate the <see cref="P:ActiproSoftware.SyntaxEditor.ITextBufferReader.LineIndex" /> property.
            Also, for performance reasons there is no bounds check on the setter.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.ITextBufferReader.OffsetDelta"><summary>
            Gets the amount by which to alter the offset values that are parsed.
            </summary><value>The amount by which to alter the offset values that are parsed.</value></member><member name="T:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader"><summary>
            Represents an <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader" /> implementation for a <see cref="T:System.Text.StringBuilder" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.GetSubstring(System.Int32,System.Int32)"><summary>
            Returns a substring from the text buffer using <see cref="!:LineTerminator.Newline" /> for line ends.
            </summary><param name="offset">The offset at which to retrieve the text.</param><param name="length">The number of characters to return.</param><returns>The substring from the text buffer using <see cref="!:LineTerminator.Newline" /> for line ends.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.Peek"><summary>
            Peeks at a single character from the text buffer without seeking past it.
            </summary><returns>The character that was read.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.Peek(System.Int32)"><summary>
            Peeks at a certain character from the text buffer after the current <see cref="P:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.Offset" /> without seeking past it.
            </summary><returns>The character that was read.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.PeekReverse"><summary>
            Reverse peeks at a single character from the text buffer without seeking past it.
            </summary><returns>The character that was read.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.Pop"><summary>
            Pops the top offset from the stack and moves the <see cref="P:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.Offset" /> to that offset.
            </summary><remarks><c>true</c> if a pop occurred; otherwise, <c>false</c>.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.PopAll"><summary>
            Pops the all offsets from the stack and moves the <see cref="P:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.Offset" /> to the offset that was on the bottom of the stack.
            </summary><remarks><c>true</c> if a pop occurred; otherwise, <c>false</c>.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.Push"><summary>
            Pushes the <see cref="P:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.Offset" /> onto the stack for later restoration.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.Read"><summary>
            Reads a single character from the text buffer and seeks forward one offset.
            </summary><returns>The character that was read.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.ReadReverse"><summary>
            Reverse reads a single character from the text buffer and seeks backward one offset.
            </summary><returns>The character that was read.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.ToString"><summary>
            Creates and returns a string representation of the current object.
            </summary><returns>A string representation of the current object.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.#ctor(System.Text.StringBuilder,System.Int32,System.Int32)"><summary>
            Initializes a new instance of the <c>StringBuilderTextBufferReader</c> class.
            </summary><param name="text">The <see cref="T:System.Text.StringBuilder" /> that is the text buffer.</param><param name="lineIndex">The index of the line that contains the offset.</param><param name="offset">The initial offset of the reader.</param></member><member name="P:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.HasStackEntries"><summary>
            Gets whether there are entries on the stack.
            </summary><value><c>true</c> if there are entries on the stack; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.IsAtEnd"><summary>
            Gets whether the current <see cref="P:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.Offset" /> is at the end of the text buffer.
            </summary><value><c>true</c> if the current <see cref="P:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.Offset" /> is at the end of the text buffer; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.IsAtStart"><summary>
            Gets whether the current <see cref="P:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.Offset" /> is at the start of the text buffer.
            </summary><value><c>true</c> if the current <see cref="P:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.Offset" /> is at the start of the text buffer; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.IsWhitespaceOnlyAfterOnLine"><summary>
            Gets whether only whitespace characters appear at and after the <see cref="P:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.Offset" /> on the current line.
            </summary><value><c>true</c> if only whitespace characters appear at and after the <see cref="P:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.Offset" /> on the current line; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.IsWhitespaceOnlyBeforeOnLine"><summary>
            Gets whether only whitespace characters appear before the <see cref="P:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.Offset" /> on the current line.
            </summary><value><c>true</c> if only whitespace characters appear before the <see cref="P:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.Offset" /> on the current line; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.Length"><summary>
            Gets the number of characters in the text buffer.
            </summary><value>The number of characters in the text buffer.</value></member><member name="P:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.LineIndex"><summary>
            Gets the index of the line that contains the <see cref="P:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.Offset" />.
            </summary><value>The index of the line that contains the <see cref="P:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.Offset" />.</value></member><member name="P:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.Offset"><summary>
            Gets or sets the current reader position in the text buffer.
            </summary><value>The current reader position in the text buffer.</value><remarks>
            Using the setter of this property will invalidate the <see cref="P:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.LineIndex" /> property.
            Also, for performance reasons there is no bounds check on the setter.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.StringBuilderTextBufferReader.OffsetDelta"><summary>
            Gets the amount by which to alter the offset values that are parsed.
            </summary><value>The amount by which to alter the offset values that are parsed.</value></member><member name="T:ActiproSoftware.SyntaxEditor.StringTextBufferReader"><summary>
            Represents an <see cref="T:ActiproSoftware.SyntaxEditor.ITextBufferReader" /> implementation for a <see cref="T:System.String" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.StringTextBufferReader.GetSubstring(System.Int32,System.Int32)"><summary>
            Returns a substring from the text buffer using <see cref="!:LineTerminator.Newline" /> for line ends.
            </summary><param name="offset">The offset at which to retrieve the text.</param><param name="length">The number of characters to return.</param><returns>The substring from the text buffer using <see cref="!:LineTerminator.Newline" /> for line ends.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.StringTextBufferReader.Peek"><summary>
            Peeks at a single character from the text buffer without seeking past it.
            </summary><returns>The character that was read.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.StringTextBufferReader.Peek(System.Int32)"><summary>
            Peeks at a certain character from the text buffer after the current <see cref="P:ActiproSoftware.SyntaxEditor.StringTextBufferReader.Offset" /> without seeking past it.
            </summary><returns>The character that was read.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.StringTextBufferReader.PeekReverse"><summary>
            Reverse peeks at a single character from the text buffer without seeking past it.
            </summary><returns>The character that was read.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.StringTextBufferReader.Pop"><summary>
            Pops the top offset from the stack and moves the <see cref="P:ActiproSoftware.SyntaxEditor.StringTextBufferReader.Offset" /> to that offset.
            </summary><remarks><c>true</c> if a pop occurred; otherwise, <c>false</c>.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.StringTextBufferReader.PopAll"><summary>
            Pops the all offsets from the stack and moves the <see cref="P:ActiproSoftware.SyntaxEditor.StringTextBufferReader.Offset" /> to the offset that was on the bottom of the stack.
            </summary><remarks><c>true</c> if a pop occurred; otherwise, <c>false</c>.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.StringTextBufferReader.Push"><summary>
            Pushes the <see cref="P:ActiproSoftware.SyntaxEditor.StringTextBufferReader.Offset" /> onto the stack for later restoration.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.StringTextBufferReader.Read"><summary>
            Reads a single character from the text buffer and seeks forward one offset.
            </summary><returns>The character that was read.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.StringTextBufferReader.ReadReverse"><summary>
            Reverse reads a single character from the text buffer and seeks backward one offset.
            </summary><returns>The character that was read.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.StringTextBufferReader.#ctor(System.String,System.Int32,System.Int32)"><summary>
            Initializes a new instance of the <c>StringTextBufferReader</c> class.
            </summary><param name="text">The text to store in the text buffer.</param><param name="lineIndex">The index of the line that contains the offset.</param><param name="offset">The initial offset of the reader.</param></member><member name="P:ActiproSoftware.SyntaxEditor.StringTextBufferReader.HasStackEntries"><summary>
            Gets whether there are entries on the stack.
            </summary><value><c>true</c> if there are entries on the stack; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.StringTextBufferReader.IsAtEnd"><summary>
            Gets whether the current <see cref="P:ActiproSoftware.SyntaxEditor.StringTextBufferReader.Offset" /> is at the end of the text buffer.
            </summary><value><c>true</c> if the current <see cref="P:ActiproSoftware.SyntaxEditor.StringTextBufferReader.Offset" /> is at the end of the text buffer; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.StringTextBufferReader.IsAtStart"><summary>
            Gets whether the current <see cref="P:ActiproSoftware.SyntaxEditor.StringTextBufferReader.Offset" /> is at the start of the text buffer.
            </summary><value><c>true</c> if the current <see cref="P:ActiproSoftware.SyntaxEditor.StringTextBufferReader.Offset" /> is at the start of the text buffer; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.StringTextBufferReader.IsWhitespaceOnlyAfterOnLine"><summary>
            Gets whether only whitespace characters appear at and after the <see cref="P:ActiproSoftware.SyntaxEditor.StringTextBufferReader.Offset" /> on the current line.
            </summary><value><c>true</c> if only whitespace characters appear at and after the <see cref="P:ActiproSoftware.SyntaxEditor.StringTextBufferReader.Offset" /> on the current line; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.StringTextBufferReader.IsWhitespaceOnlyBeforeOnLine"><summary>
            Gets whether only whitespace characters appear before the <see cref="P:ActiproSoftware.SyntaxEditor.StringTextBufferReader.Offset" /> on the current line.
            </summary><value><c>true</c> if only whitespace characters appear before the <see cref="P:ActiproSoftware.SyntaxEditor.StringTextBufferReader.Offset" /> on the current line; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.StringTextBufferReader.Length"><summary>
            Gets the number of characters in the text buffer.
            </summary><value>The number of characters in the text buffer.</value></member><member name="P:ActiproSoftware.SyntaxEditor.StringTextBufferReader.LineIndex"><summary>
            Gets the index of the line that contains the <see cref="P:ActiproSoftware.SyntaxEditor.StringTextBufferReader.Offset" />.
            </summary><value>The index of the line that contains the <see cref="P:ActiproSoftware.SyntaxEditor.StringTextBufferReader.Offset" />.</value></member><member name="P:ActiproSoftware.SyntaxEditor.StringTextBufferReader.Offset"><summary>
            Gets or sets the current reader position in the text buffer.
            </summary><value>The current reader position in the text buffer.</value><remarks>
            Using the setter of this property will invalidate the <see cref="P:ActiproSoftware.SyntaxEditor.StringTextBufferReader.LineIndex" /> property.
            Also, for performance reasons there is no bounds check on the setter.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.StringTextBufferReader.OffsetDelta"><summary>
            Gets the amount by which to alter the offset values that are parsed.
            </summary><value>The amount by which to alter the offset values that are parsed.</value></member><member name="T:ActiproSoftware.SyntaxEditor.TextRange"><summary>
            Represents a range of two offset values within a text document.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.TextRange.BordersOn(System.Int32)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> borders on the specified offset.
            </summary><param name="offset">The offset to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> borders on the specified offset; otherwise, <c>false</c>.
            </returns><remarks>
            This method checks to see if the specified offset is either the <see cref="P:ActiproSoftware.SyntaxEditor.TextRange.StartOffset" /> or <see cref="P:ActiproSoftware.SyntaxEditor.TextRange.EndOffset" />.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.TextRange.BordersOn(ActiproSoftware.SyntaxEditor.TextRange)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> borders on, but does not overlap the specified <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" />.
            </summary><param name="range">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> borders on, but does not overlap the specified <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" />; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.TextRange.Clone"><summary>
            Creates a copy of this <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> object.
            </summary><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> object that this method creates.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.TextRange.CompareTo(ActiproSoftware.SyntaxEditor.TextRange)"><summary>
            Compares the current instance with another object of the same type.
            </summary><param name="textRange">A <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> to compare with this instance.</param><returns>
            A 32-bit signed integer that indicates the relative order of the comparands.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.TextRange.Contains(System.Int32)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> contains the specified offset.
            </summary><param name="offset">The offset to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> contains the specified offset; otherwise, <c>false</c>.
            </returns><remarks>
            This method returns <c>false</c> if the offset falls on the <see cref="P:ActiproSoftware.SyntaxEditor.TextRange.LastOffset" /> offset
            since this method indicates if the offset is encompassed by the <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" />.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.TextRange.Contains(ActiproSoftware.SyntaxEditor.TextRange)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> contains the specified <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" />.
            </summary><param name="range">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> contains the specified <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" />; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.TextRange.Equals(System.Object)"><summary>
            Determines whether the specified <c>Object</c> is equal to the current <c>Object</c>. 
            </summary><param name="obj">The <c>Object</c> to compare to the current <c>Object</c>.</param><returns><c>true</c> if the specified <c>Object</c> is equal to the current <c>Object</c>; 
            otherwise, <c>false</c>. 
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.TextRange.GetHashCode"><summary>
            Returns a hash code for this object.
            </summary><returns>An integer value that specifies a hash value for this object.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.TextRange.IntersectsWith(System.Int32)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> intersects with the specified offset.
            </summary><param name="offset">The offset to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> intersects with the specified offset; otherwise, <c>false</c>.
            </returns><remarks>
            This method returns whether the specified offset borders on or lies within the <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" />.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.TextRange.IntersectsWith(ActiproSoftware.SyntaxEditor.TextRange)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> intersects with the specified <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" />.
            </summary><param name="range">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> intersects with the specified <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" />; otherwise, <c>false</c>.
            </returns><remarks>
            This method returns whether the specified <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> borders on or overlaps the <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" />.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.TextRange.Normalize"><summary>
            Normalizes the range and ensures that the <see cref="P:ActiproSoftware.SyntaxEditor.TextRange.StartOffset" /> occurs at or before the <see cref="P:ActiproSoftware.SyntaxEditor.TextRange.EndOffset" /> offset.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.TextRange.OverlapsWith(ActiproSoftware.SyntaxEditor.TextRange)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> overlaps with, or crosses, the specified <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" />.
            </summary><param name="range">The <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> overlaps with, or crosses, the specified <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" />; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.TextRange.ToString"><summary>
            Converts the object to a <c>String</c>.
            </summary><returns>
            A string whose value represents this object.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.TextRange.Union(ActiproSoftware.SyntaxEditor.TextRange,ActiproSoftware.SyntaxEditor.TextRange)"><summary>
            Returns the normalized union of two <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> objects.
            </summary><param name="range1">The first <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> to examine.</param><param name="range2">The second <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> to examine.</param><returns>
            The normalized union of two <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> objects.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.TextRange.#ctor(System.Int32)"><summary>
            Initializes a new instance of the <c>TextRange</c> class using the specified offset for both the start and end values.
            </summary><param name="offset">The start and end offset in the range.</param></member><member name="M:ActiproSoftware.SyntaxEditor.TextRange.#ctor(System.Int32,System.Int32)"><summary>
            Initializes a new instance of the <c>TextRange</c> class with the specified offset values.
            </summary><param name="startOffset">The start offset in the range.</param><param name="endOffset">The end offset in the range.</param></member><member name="P:ActiproSoftware.SyntaxEditor.TextRange.AbsoluteLength"><summary>
            Gets the absolute number of characters encompassed by the <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" />.
            </summary><value>The absolute number of characters encompassed by the <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" />.</value><remarks>
            This value will always return a positive length, even if the range is not normalized.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.TextRange.Deleted"><summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> that is flagged as deleted.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> that is flagged as deleted.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TextRange.EndOffset"><summary>
            Gets the end offset in the range.
            </summary><value>The end offset in the range.</value><remarks>
            The end offset may occur before the start offset if the range is not normalized.
            The <see cref="P:ActiproSoftware.SyntaxEditor.TextRange.IsNormalized" /> property indicates if the range is normalized.
            To get the normalized first offset in the range, use the <see cref="P:ActiproSoftware.SyntaxEditor.TextRange.FirstOffset" /> property.
            To get the normalized last offset in the range, use the <see cref="P:ActiproSoftware.SyntaxEditor.TextRange.LastOffset" /> property.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.TextRange.FirstOffset"><summary>
            Gets the first offset in the range.
            </summary><value>The first offset in the range.</value><remarks>
            This property returns either the <see cref="P:ActiproSoftware.SyntaxEditor.TextRange.StartOffset" /> or <see cref="P:ActiproSoftware.SyntaxEditor.TextRange.EndOffset" /> property, whichever comes first.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.TextRange.IsDeleted"><summary>
            Gets whether the range has been flagged as deleted.
            </summary><value><c>true</c> if the range has been flagged as deleted; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.TextRange.IsNormalized"><summary>
            Gets whether the range is normalized (<see cref="P:ActiproSoftware.SyntaxEditor.TextRange.StartOffset" /> occurs at or before the <see cref="P:ActiproSoftware.SyntaxEditor.TextRange.EndOffset" />).
            </summary><value><c>true</c> if the range is normalized; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.TextRange.IsZeroLength"><summary>
            Gets whether the range has a zero length.
            </summary><value><c>true</c> if the range has a zero length; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.TextRange.LastOffset"><summary>
            Gets the last offset in the range.
            </summary><value>The last offset in the range.</value><remarks>
            This property returns either the <see cref="P:ActiproSoftware.SyntaxEditor.TextRange.StartOffset" /> or <see cref="P:ActiproSoftware.SyntaxEditor.TextRange.EndOffset" /> property, whichever comes last.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.TextRange.Length"><summary>
            Gets the number of characters encompassed by the <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" />.
            </summary><value>The number of characters encompassed by the <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" />.</value><remarks>
            This value will return a negative length if the range is not normalized.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.TextRange.NormalizedTextRange"><summary>
            Gets a normalized version of this <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> without actually modifying this instance.
            </summary><value>A normalized version of this <see cref="T:ActiproSoftware.SyntaxEditor.TextRange" /> without actually modifying this instance.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TextRange.StartOffset"><summary>
            Gets the start offset in the range.
            </summary><value>The start offset in the range.</value><remarks>
            The start offset may occur after the end offset if the range is not normalized.
            The <see cref="P:ActiproSoftware.SyntaxEditor.TextRange.IsNormalized" /> property indicates if the range is normalized.
            To get the normalized first offset in the range, use the <see cref="P:ActiproSoftware.SyntaxEditor.TextRange.FirstOffset" /> property.
            To get the normalized last offset in the range, use the <see cref="P:ActiproSoftware.SyntaxEditor.TextRange.LastOffset" /> property.
            </remarks></member><member name="T:ActiproSoftware.SyntaxEditor.TextStream"><summary>
            Provides access to the stream of <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Document" /> text data.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.Clone"><summary>
            Creates a new <see cref="T:ActiproSoftware.SyntaxEditor.TextStream" /> instance that is at the same position as this <see cref="T:ActiproSoftware.SyntaxEditor.TextStream" />.
            </summary><returns>The new <see cref="T:ActiproSoftware.SyntaxEditor.TextStream" /> instance that is at the same position as this <see cref="T:ActiproSoftware.SyntaxEditor.TextStream" />.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.Dispose(System.Boolean)"><summary>
            Releases the unmanaged resources used by the object and optionally releases the managed resources.
            </summary><param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources. 
            </param><remarks>
            This method is called by the public <c>Dispose</c> method and the <c>Finalize</c> method. 
            <c>Dispose</c> invokes this method with the <paramref name="disposing" /> parameter set to <c>true</c>. 
            <c>Finalize</c> invokes this method with <paramref name="disposing" /> set to <c>false</c>.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.GoToCurrentTokenStart"><summary>
            Moves the <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> to the start of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that contains the <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.GoToCurrentWordEnd"><summary>
            Moves to the current word's end offset.
            </summary><returns><c>true</c> if the word end is found; otherwise, <c>false</c>.
            </returns><remarks>
            If a proper word end is not found, the stream's <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> will be the end of the stream.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.GoToCurrentWordStart"><summary>
            Moves to the current word's start offset.
            </summary><returns><c>true</c> if the word start is found; otherwise, <c>false</c>.
            </returns><remarks>
            If a proper word start is not found, the stream's <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> will be the beginning of the stream.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.GoToDocumentEnd"><summary>
            Moves the <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> to the end of the <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Document" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.GoToDocumentStart"><summary>
            Moves the <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> to the start of the <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Document" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.GoToNextMatchingToken(ActiproSoftware.SyntaxEditor.IToken)"><summary>
            Moves the <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> to the next matching token.
            </summary><param name="startToken">The start <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.</param><returns><c>true</c> if the next matching token is found; otherwise, <c>false</c>.
            </returns><remarks>
            This method is useful for bracket matching.
            However it requires that the <see cref="P:ActiproSoftware.SyntaxEditor.IToken.MatchingTokenID" /> of the specified <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> is populated.
            This can be done when implementing a custom <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.GoToNextMatchingToken(ActiproSoftware.SyntaxEditor.IToken,System.Int32)"><summary>
            Moves the <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> to the next matching token.
            </summary><param name="startToken">The start <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.</param><param name="endTokenID">The ID of the end <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> for which to search.</param><returns><c>true</c> if the next matching token is found; otherwise, <c>false</c>.
            </returns><remarks>
            This method is useful for bracket matching.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.GoToNextNonWhitespaceOrCommentToken"><summary>
            Moves to the next non-whitespace or comment <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </summary><returns><c>true</c> if a token is found; otherwise, <c>false</c>.
            </returns><remarks>
            If a token is not found, the stream's <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> will be the end of the stream.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.GoToNextNonWhitespaceToken"><summary>
            Moves to the next non-whitespace <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </summary><returns><c>true</c> if a token is found; otherwise, <c>false</c>.
            </returns><remarks>
            If a token is not found, the stream's <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> will be the end of the stream.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.GoToNextToken"><summary>
            Moves to the next token's start offset.
            </summary><returns><c>true</c> if the token is found; otherwise, <c>false</c>.
            </returns><remarks>
            If a token is not found, the stream's <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> will be the end of the stream.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.GoToNextToken(System.Int32)"><summary>
            Moves forward the specified number of tokens.
            </summary><param name="count">The number of tokens to move.</param><returns><c>true</c> if a token is found; otherwise, <c>false</c>.
            </returns><remarks>
            If a token is not found, the stream's <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> will be the end of the stream.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.GoToNextTokenWithID(System.Int32)"><summary>
            Moves to the next token's start offset whose token ID matches the specified key.
            </summary><param name="id">The token ID to look for.</param><returns><c>true</c> if the token is found; otherwise, <c>false</c>.
            </returns><remarks>
            If a token is not found, the stream's <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> will be the end of the stream.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.GoToNextTokenWithID(System.Int32[])"><summary>
            Moves to the next token's start offset whose token ID matches any of the specified IDs.
            </summary><param name="ids">An array of token IDs to look for.</param><returns><c>true</c> if the token is found; otherwise, <c>false</c>.
            </returns><remarks>
            If a token is not found, the stream's <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> will be the end of the stream.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.GoToNextTokenWithKey(System.String)"><summary>
            Moves to the next token's start offset whose token key matches the specified key.
            </summary><param name="key">The token key to look for.</param><returns><c>true</c> if the token is found; otherwise, <c>false</c>.
            </returns><remarks>
            If a token is not found, the stream's <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> will be the end of the stream.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.GoToNextWordStart"><summary>
            Moves to the next word's start offset.
            </summary><returns><c>true</c> if the word start is found; otherwise, <c>false</c>.
            </returns><remarks>
            If a proper word start is not found, the stream's <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> will be the end of the stream.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.GoToPreviousMatchingToken(ActiproSoftware.SyntaxEditor.IToken)"><summary>
            Moves the <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> to the previous matching token.
            </summary><param name="endToken">The end <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.</param><returns><c>true</c> if the previous matching token is found; otherwise, <c>false</c>.
            </returns><remarks>
            This method is useful for bracket matching.
            However it requires that the <see cref="P:ActiproSoftware.SyntaxEditor.IToken.MatchingTokenID" /> of the specified <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> is populated.
            This can be done when implementing a custom <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.GoToPreviousMatchingToken(ActiproSoftware.SyntaxEditor.IToken,System.Int32)"><summary>
            Moves the <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> to the previous matching token.
            </summary><param name="endToken">The end <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.</param><param name="startTokenID">The ID of the start <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> for which to search.</param><returns><c>true</c> if the previous matching token is found; otherwise, <c>false</c>.
            </returns><remarks>
            This method is useful for bracket matching.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.GoToPreviousNonWhitespaceOrCommentToken"><summary>
            Moves to the previous non-whitespace or comment <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </summary><returns><c>true</c> if a token is found; otherwise, <c>false</c>.
            </returns><remarks>
            If a token is not found, the stream's <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> will be the beginning of the stream.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.GoToPreviousNonWhitespaceToken"><summary>
            Moves to the previous non-whitespace <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </summary><returns><c>true</c> if a token is found; otherwise, <c>false</c>.
            </returns><remarks>
            If a token is not found, the stream's <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> will be the beginning of the stream.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.GoToPreviousToken"><summary>
            Moves to the previous token's start offset.
            </summary><returns><c>true</c> if the token is found; otherwise, <c>false</c>.
            </returns><remarks>
            If a token is not found, the stream's <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> will be the beginning of the stream.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.GoToPreviousToken(System.Int32)"><summary>
            Moves backward the specified number of tokens.
            </summary><param name="count">The number of tokens to move.</param><returns><c>true</c> if a token is found; otherwise, <c>false</c>.
            </returns><remarks>
            If a token is not found, the stream's <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> will be the beginning of the stream.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.GoToPreviousTokenWithID(System.Int32)"><summary>
            Moves to the previous token's start offset whose token ID matches the specified ID.
            </summary><param name="id">The token ID to look for.</param><returns><c>true</c> if the token is found; otherwise, <c>false</c>.
            </returns><remarks>
            If a token is not found, the stream's <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> will be the beginning of the stream.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.GoToPreviousTokenWithID(System.Int32[])"><summary>
            Moves to the previous token's start offset whose token ID matches any of the specified IDs.
            </summary><param name="ids">An array of token IDs to look for.</param><returns><c>true</c> if the token is found; otherwise, <c>false</c>.
            </returns><remarks>
            If a token is not found, the stream's <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> will be the beginning of the stream.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.GoToPreviousTokenWithKey(System.String)"><summary>
            Moves to the previous token's start offset whose token key matches the specified key.
            </summary><param name="key">The token key to look for.</param><returns><c>true</c> if the token is found; otherwise, <c>false</c>.
            </returns><remarks>
            If a token is not found, the stream's <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> will be the beginning of the stream.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.GoToPreviousWordStart"><summary>
            Moves to the previous word's start character.
            </summary><returns><c>true</c> if the word start is found; otherwise, <c>false</c>.
            </returns><remarks>
            If a proper word start is not found, the stream's <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> will be the beginning of the stream.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.OnOffsetChanged"><summary>
            Occurs when the <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> property's value is changed.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.PeekCharacter"><summary>
            Peeks at a single character from the document without seeking past it.
            </summary><returns>The character that was read.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.PeekCharacterReverse"><summary>
            Reverse peeks at a single character from the document without seeking past it.
            </summary><returns>The character that was read.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.PeekToken"><summary>
            Peeks at a single <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> from the document without seeking past it.
            </summary><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that was read.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.PeekTokenReverse"><summary>
            Reverse peeks at a single <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> from the document without seeking past it.
            </summary><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that was read.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.ReadCharacter"><summary>
            Reads a single character from the document and seeks forward one offset.
            </summary><returns>The character that was read.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.ReadCharacterReverse"><summary>
            Reverse reads a single character from the document and seeks backward one offset.
            </summary><returns>The character that was read.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.ReadToken"><summary>
            Reads a single <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> from the document and seeks forward one <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </summary><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that was read.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.ReadTokenReverse"><summary>
            Reverse reads a single <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> from the document and seeks backward one <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </summary><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that was read.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.SeekCharacter(System.Int32)"><summary>
            Moves the <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> by the specified amount.
            </summary><param name="delta">The amount of characters to move.  This value may be negative.</param></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.SeekToken(System.Int32)"><summary>
            Moves the <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.TokenIndex" /> by the specified amount.
            </summary><param name="delta">The amount of token indices to move.  This value may be negative.</param></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.#ctor(ActiproSoftware.SyntaxEditor.Document)"><summary>
            Initializes a new instance of the <c>TextStream</c> class.
            </summary><param name="document">The <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Document" /> that the stream should access.</param></member><member name="M:ActiproSoftware.SyntaxEditor.TextStream.#ctor(ActiproSoftware.SyntaxEditor.Document,System.Int32)"><summary>
            Initializes a new instance of the <c>TextStream</c> class.
            </summary><param name="document">The <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Document" /> that the stream should access.</param><param name="offset">The initial offset within the document.</param></member><member name="P:ActiproSoftware.SyntaxEditor.TextStream.Character"><summary>
            Gets the character at the <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" />.
            </summary><value>The character at the <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" />.</value><remarks>
            This value is the same as the return value of the <see cref="M:ActiproSoftware.SyntaxEditor.TextStream.PeekCharacter" /> method.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.TextStream.Document"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> from which the stream is reading.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> from which the stream is reading.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TextStream.IsAtDocumentEnd"><summary>
            Gets whether the current <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> is at the end of the document.
            </summary><value><c>true</c> if the current <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> is at the end of the document; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.TextStream.IsAtDocumentLineEnd"><summary>
            Gets whether the current <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> is at the end of a <see cref="!:DocumentLine" />.
            </summary><value><c>true</c> if the current <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> is at the end of a <see cref="!:DocumentLine" />; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.TextStream.IsAtDocumentLineStart"><summary>
            Gets whether the current <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> is at the start of a <see cref="!:DocumentLine" />.
            </summary><value><c>true</c> if the current <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> is at the start of a <see cref="!:DocumentLine" />; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.TextStream.IsAtDocumentStart"><summary>
            Gets whether the current <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> is at the end of the document.
            </summary><value><c>true</c> if the current <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> is at the end of the document; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.TextStream.IsAtTokenStart"><summary>
            Gets whether the current <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> is at the start of the <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Token" />.
            </summary><value><c>true</c> if the current <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" /> is at the start of the <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Token" />; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.TextStream.IsCharacterLineTerminator"><summary>
            Gets whether the <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Character" /> is a newline character.
            </summary><value><c>true</c> if the <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Character" /> is a newline character; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.TextStream.IsCharacterWhitespace"><summary>
            Gets whether the <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Character" /> is categorized as a whitespace character.
            </summary><value><c>true</c> if the <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Character" /> is categorized as a whitespace character; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.TextStream.Length"><summary>
            Gets the length of the stream.
            </summary><value>The length of the stream.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TextStream.Offset"><summary>
            Gets or sets the offset within the stream.
            </summary><value>The offset within the stream.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TextStream.Token"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that contains the offset indicated by <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" />.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that contains the offset indicated by <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" />.</value><remarks>
            This value is the same as the return value of the <see cref="M:ActiproSoftware.SyntaxEditor.TextStream.PeekToken" /> method.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.TextStream.TokenIndex"><summary>
            Gets or sets the index of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that contains the offset indicated by <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" />.
            </summary><value>The index of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that contains the offset indicated by <see cref="P:ActiproSoftware.SyntaxEditor.TextStream.Offset" />.</value></member><member name="T:ActiproSoftware.SyntaxEditor.TokenStream"><summary>
            Provides access to the stream of <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> objects in a <see cref="P:ActiproSoftware.SyntaxEditor.TokenStream.Document" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.TokenStream.Clone"><summary>
            Creates a new <see cref="T:ActiproSoftware.SyntaxEditor.TokenStream" /> instance that is at the same position as this <see cref="T:ActiproSoftware.SyntaxEditor.TokenStream" />.
            </summary><returns>The new <see cref="T:ActiproSoftware.SyntaxEditor.TokenStream" /> instance that is at the same position as this <see cref="T:ActiproSoftware.SyntaxEditor.TokenStream" />.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.TokenStream.Find(System.String,System.Boolean)"><summary>
            Finds a <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> relative to the current position with the specified key and moves the position to it.
            </summary><param name="key">The key to look for.</param><param name="forward">Whether to move forward through the stream.</param><returns><c>true</c> if a token is found; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.TokenStream.FindNonWhitespace(System.Boolean)"><summary>
            Finds a <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> relative to the current position whose <see cref="P:ActiproSoftware.SyntaxEditor.IToken.IsWhitespace" /> property is <c>false</c>
            and moves the position to it.
            </summary><param name="forward">Whether to move forward through the stream.</param><returns><c>true</c> if a token is found; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.TokenStream.Peek"><summary>
            Peeks at a single <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> from the document without seeking past it.
            </summary><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that was read.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.TokenStream.PeekReverse"><summary>
            Peeks at a single <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> from the document without seeking past it.
            </summary><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that was read.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.TokenStream.Read"><summary>
            Reads a single <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> from the document and seeks forward one position.
            </summary><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that was read.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.TokenStream.ReadReverse"><summary>
            Reads a single <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> from the document and seeks backward one position.
            </summary><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> that was read.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.TokenStream.Seek(System.Int32)"><summary>
            Offsets the <see cref="P:ActiproSoftware.SyntaxEditor.TokenStream.Position" /> by the specified amount.
            </summary><param name="offset">The amount of characters to offset.  This value may be negative.</param></member><member name="P:ActiproSoftware.SyntaxEditor.TokenStream.Document"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> from which the stream is reading.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> from which the stream is reading.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TokenStream.IsDocumentEnd"><summary>
            Gets whether the current position is at the end of the stream.
            </summary><value><c>true</c> if the current position is at the end of the stream; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.TokenStream.Length"><summary>
            Gets the length of the stream.
            </summary><value>The length of the stream.</value></member><member name="P:ActiproSoftware.SyntaxEditor.TokenStream.Position"><summary>
            Gets or sets the position of the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> within the stream.
            </summary><value>The position of the current <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> within the stream.</value></member><member name="T:ActiproSoftware.SyntaxEditor.AutoReplaceEntry"><summary>
            Represent an auto-replace entry.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.AutoReplaceEntry.ToString"><summary>
            Creates and returns a string representation of the current object.
            </summary><returns>A string representation of the current object.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.AutoReplaceEntry.#ctor(System.String,System.String)"><summary>
            Initializes a new instance of the <c>AutoReplaceEntry</c> class.
            </summary><param name="findText">The text to find.</param><param name="replaceText">The text with which to replace.</param></member><member name="P:ActiproSoftware.SyntaxEditor.AutoReplaceEntry.FindText"><summary>
            Gets the text to find.
            </summary><value>The text to find.</value></member><member name="P:ActiproSoftware.SyntaxEditor.AutoReplaceEntry.ReplaceText"><summary>
            Gets the text with which to replace.
            </summary><value>The text with which to replace.</value></member><member name="T:ActiproSoftware.SyntaxEditor.AutoReplaceEntryCollection"><summary>
            Provides access to the auto-replace functionality for a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" />.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.AutoReplaceEntryCollection.Add(ActiproSoftware.SyntaxEditor.AutoReplaceEntry)"><summary>
            Adds an item to the collection.
            </summary><param name="item">The <see cref="T:ActiproSoftware.SyntaxEditor.AutoReplaceEntry" /> to add.</param><returns>The index at which the item was inserted into the collection.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.AutoReplaceEntryCollection.AddRange(ActiproSoftware.SyntaxEditor.AutoReplaceEntry[])"><summary>
            Adds multiple items to the collection.
            </summary><param name="items">The array of <see cref="T:ActiproSoftware.SyntaxEditor.AutoReplaceEntry" /> objects to add.</param></member><member name="M:ActiproSoftware.SyntaxEditor.AutoReplaceEntryCollection.Clear"><summary>
            Removes all items from the collection.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.AutoReplaceEntryCollection.Contains(ActiproSoftware.SyntaxEditor.AutoReplaceEntry)"><summary>
            Determines whether the specified item is in the collection. 
            </summary><param name="item">
            The <see cref="T:ActiproSoftware.SyntaxEditor.AutoReplaceEntry" /> to look for. 
            </param><returns><c>true</c> if the collection contains the item; otherwise, <c>false</c>. 
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.AutoReplaceEntryCollection.IndexOf(ActiproSoftware.SyntaxEditor.AutoReplaceEntry)"><summary>
            Returns the index of the specified item in the collection.
            </summary><param name="item">The <see cref="T:ActiproSoftware.SyntaxEditor.AutoReplaceEntry" /> to look for.</param><returns>
            If found, the index where the item is in the collection; otherwise, <c>-1</c>. 
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.AutoReplaceEntryCollection.Remove(ActiproSoftware.SyntaxEditor.AutoReplaceEntry)"><summary>
            Removes the first occurrence of a specific item from the collection.
            </summary><param name="item">The <see cref="T:ActiproSoftware.SyntaxEditor.AutoReplaceEntry" /> to remove.</param></member><member name="M:ActiproSoftware.SyntaxEditor.AutoReplaceEntryCollection.#ctor"><summary>
            Initializes a new instance of the <c>AutoReplaceEntryCollection</c> class.
            </summary><remarks>
            The default constructor initializes all fields to their default values.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.AutoReplaceEntryCollection.CaseSensitive"><summary>
            Gets or sets whether the entries should be case sensitive.
            </summary><value><c>true</c> if the entries should be case sensitive; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.AutoReplaceEntryCollection.Item(System.Int32)"><summary>
            Gets the item at the specified index. 
            <para>
            [C#] In C#, this property is the indexer for the <c>AutoReplaceEntryCollection</c> class. 
            </para></summary><param name="index">The index of the item to return.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.AutoReplaceEntry" /> at the specified index. 
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.AutoReplaceEventArgs"><summary>
            Provides data for <see cref="T:ActiproSoftware.SyntaxEditor.AutoReplaceEntryCollection" /> events.
            </summary><remarks>
            This class is used with the <see cref="T:ActiproSoftware.SyntaxEditor.AutoReplaceEventHandler" /> delegate.
            </remarks><seealso cref="T:ActiproSoftware.SyntaxEditor.AutoReplaceEventHandler" /></member><member name="M:ActiproSoftware.SyntaxEditor.AutoReplaceEventArgs.ToString"><summary>
            Creates and returns a string representation of the current object.
            </summary><returns>A string representation of the current object.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.AutoReplaceEventArgs.#ctor(ActiproSoftware.SyntaxEditor.AutoReplaceEntry,System.Int32,System.Int32,System.Char)"><summary>
            Initializes a new instance of the <c>AutoReplaceEventArgs</c> class. 
            </summary><param name="autoReplaceEntry">The <see cref="T:ActiproSoftware.SyntaxEditor.AutoReplaceEntry" /> that is associated with the event.</param><param name="offset">The offset where the text was found.</param><param name="length">The length of the text that was found.</param><param name="keyChar">The key that was pressed to trigger the auto-replace.</param></member><member name="P:ActiproSoftware.SyntaxEditor.AutoReplaceEventArgs.AutoReplaceEntry"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.SyntaxEditor.AutoReplaceEntry" /> with which the event is associated.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.AutoReplaceEntry" /> with which the event is associated.</value></member><member name="P:ActiproSoftware.SyntaxEditor.AutoReplaceEventArgs.CancelKeyPress"><summary>
            Gets or sets whether to cancel the keypress that triggered the auto-replace.
            </summary><value><c>true</c> if the keypress that triggered the auto-replace should be cancelled; otherwise, <c>false</c>.
            </value><remarks>
            The key triggering this auto-replace that is about to be inserted is specified by the <see cref="P:ActiproSoftware.SyntaxEditor.AutoReplaceEventArgs.KeyChar" /> property.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.AutoReplaceEventArgs.KeyChar"><summary>
            Gets the key that was pressed to trigger the auto-replace.
            </summary><value>The key that was pressed to trigger the auto-replace.</value></member><member name="P:ActiproSoftware.SyntaxEditor.AutoReplaceEventArgs.Length"><summary>
            Gets the length of the text that was found.
            </summary><value>The length of the text that was found.</value></member><member name="P:ActiproSoftware.SyntaxEditor.AutoReplaceEventArgs.Offset"><summary>
            Gets the offset where the text was found.
            </summary><value>The offset where the text was found.</value></member><member name="T:ActiproSoftware.SyntaxEditor.AutoReplaceEventHandler"><summary>
            Represents the method that will handle <see cref="T:ActiproSoftware.SyntaxEditor.AutoReplaceEntryCollection" /> events.
            </summary><param name="sender">Sender of the event.</param><param name="e">A <see cref="T:ActiproSoftware.SyntaxEditor.AutoReplaceEventArgs" /> containing event data.</param><remarks>
            When you create a <c>AutoReplaceEventHandler</c> delegate, you identify the method that will handle the event. 
            To associate the event with your event handler, add an instance of the delegate to the event. 
            The event handler is called whenever the event occurs, unless you remove the delegate.
            </remarks><seealso cref="T:ActiproSoftware.SyntaxEditor.AutoReplaceEventArgs" /></member><member name="T:ActiproSoftware.SyntaxEditor.Trigger"><summary>
            Provides a base class for a trigger.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Trigger.#ctor(System.String,System.Boolean)"><summary>
            Initializes a new instance of the <c>Trigger</c> class.
            </summary><param name="key">The key of the trigger.</param><param name="allowInReadOnlyMode">Whether the trigger can fire if the editor is in read-only mode.</param></member><member name="P:ActiproSoftware.SyntaxEditor.Trigger.AllowInReadOnlyMode"><summary>
            Gets whether the trigger can fire if the editor is in read-only mode.
            </summary><value><c>true</c> if the trigger can fire if the editor is in read-only mode; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.Trigger.Key"><summary>
            Gets a string-based key that identifies the object.
            </summary><value>A string-based key that identifies the object.</value></member><member name="T:ActiproSoftware.SyntaxEditor.AutoReplaceTrigger"><summary>
            A trigger that fires when a specified character is typed into the editor.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.AutoReplaceTrigger.ToString"><summary>
            Creates and returns a string representation of the current object.
            </summary><returns>A string representation of the current object.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.AutoReplaceTrigger.#ctor(System.String,ActiproSoftware.SyntaxEditor.CharClass)"><summary>
            Initializes a new instance of the <c>AutoReplaceTrigger</c> class.
            </summary><param name="key">The key of the trigger.</param><param name="characters">The character values associated with the trigger.</param></member><member name="P:ActiproSoftware.SyntaxEditor.AutoReplaceTrigger.AllowGlobalLookup"><summary>
            Gets or sets whether to allow global lookup of auto-replace entries if an auto-replace entry is not found within the current language.
            </summary><value><c>true</c> if global lookups are permitted; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.AutoReplaceTrigger.Characters"><summary>
            Gets the characters that when typed into the editor, causes the trigger to fire.
            </summary><value>The characters that when typed into the editor, causes the trigger to fire.</value></member><member name="P:ActiproSoftware.SyntaxEditor.AutoReplaceTrigger.ValidLexicalStates"><summary>
            Gets the collection of lexical states in which the trigger is valid.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.LexicalStateCollection" /> containing the lexical states in which the trigger is valid.</value></member><member name="T:ActiproSoftware.SyntaxEditor.KeyPressTrigger"><summary>
            A trigger that fires when a specified character is typed into the editor.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.KeyPressTrigger.ToString"><summary>
            Creates and returns a string representation of the current object.
            </summary><returns>A string representation of the current object.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.KeyPressTrigger.#ctor(System.String,System.Boolean,System.Char)"><summary>
            Initializes a new instance of the <c>KeyPressTrigger</c> class.
            </summary><param name="key">The key of the trigger.</param><param name="allowInReadOnlyMode">Whether the trigger can fire if the editor is in read-only mode.</param><param name="character">The character value associated with the trigger.</param></member><member name="P:ActiproSoftware.SyntaxEditor.KeyPressTrigger.Character"><summary>
            Gets the character that when typed into the editor, causes the trigger to fire.
            </summary><value>The character that when typed into the editor, causes the trigger to fire.</value></member><member name="P:ActiproSoftware.SyntaxEditor.KeyPressTrigger.ValidLexicalStates"><summary>
            Gets the collection of lexical states in which the trigger is valid.
            </summary><value>A <see cref="T:ActiproSoftware.SyntaxEditor.LexicalStateCollection" /> containing the lexical states in which the trigger is valid.</value></member><member name="T:ActiproSoftware.SyntaxEditor.TriggerCollection"><summary>
            Encapsulates a collection of <see cref="T:ActiproSoftware.SyntaxEditor.Trigger" /> objects.
            </summary><seealso cref="T:ActiproSoftware.SyntaxEditor.Trigger" /></member><member name="M:ActiproSoftware.SyntaxEditor.TriggerCollection.Add(ActiproSoftware.SyntaxEditor.Trigger)"><summary>
            Adds the specified item to the collection. 
            </summary><param name="item">
            The <see cref="T:ActiproSoftware.SyntaxEditor.Trigger" /> to add to the collection. 
            </param><returns>
            The position into which the new item was inserted.
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.TriggerCollection.Clear"><summary>
            Removes all items from the collection. 
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.TriggerCollection.Remove(ActiproSoftware.SyntaxEditor.Trigger)"><summary>
            Removes the specified item from the collection. 
            </summary><param name="item">
            The <see cref="T:ActiproSoftware.SyntaxEditor.Trigger" /> to remove from the collection. 
            </param></member><member name="M:ActiproSoftware.SyntaxEditor.TriggerCollection.#ctor"><summary>
            Initializes a new instance of the <c>TriggerCollection</c> class. 
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.TriggerCollection.#ctor(ActiproSoftware.ComponentModel.ILogicalTreeNode)"><summary>
            Initializes a new instance of the <c>TriggerCollection</c> class. 
            </summary><param name="owner">The owner of the collection.</param></member><member name="P:ActiproSoftware.SyntaxEditor.TriggerCollection.Item(System.Int32)"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Trigger" /> at the specified index. 
            <para>
            [C#] In C#, this property is the indexer for the <c>TriggerCollection</c> class. 
            </para></summary><param name="index">The index of the <see cref="T:ActiproSoftware.SyntaxEditor.Trigger" /> to return.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.Trigger" /> at the specified index. 
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.TriggerCollection.Item(System.String)"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Trigger" /> with the specified name. 
            <para>
            [C#] In C#, this property is the indexer for the <c>TriggerCollection</c> class. 
            </para></summary><param name="key">The key of the <see cref="T:ActiproSoftware.SyntaxEditor.Trigger" /> to return.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.Trigger" /> with the specified key. 
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.DisplayLineOutliningState"><summary>
            Specifies the outlining state for a <see cref="!:DisplayLine" />.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DisplayLineOutliningState.None"><summary>
            The line is not within a outlining block.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DisplayLineOutliningState.ExpandedBlockStart"><summary>
            The line contains the start of an expanded block.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DisplayLineOutliningState.ExpandedBlockEnd"><summary>
            The line contains the end of an expanded block.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DisplayLineOutliningState.ContractedBlock"><summary>
            The line contains a contracted block.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DisplayLineOutliningState.ExpandedSubBlockStart"><summary>
            The line contains the start of an expanded sub-block.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DisplayLineOutliningState.ExpandedSubBlockEnd"><summary>
            The line contains the end of an expanded sub-block.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DisplayLineOutliningState.ContractedSubBlock"><summary>
            The line contains a contracted sub-block.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.DisplayLineOutliningState.InBlock"><summary>
            The line is within a block or sub-block.
            </summary></member><member name="T:ActiproSoftware.SyntaxEditor.HighlightingStyle"><summary>
            Tracks information for a highlighting style.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.HighlightingStyle.Clone"><summary>
            Creates an exact duplicate of the <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" /> object.
            </summary><returns>An exact duplicate of the <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" /> object.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.HighlightingStyle.CopyTo(ActiproSoftware.SyntaxEditor.HighlightingStyle)"><summary>
            Copies the style data from this instance to another <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" /> instance.
            </summary><param name="highlightingStyle">The target <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" />.</param><remarks>
            This method will not copy the <see cref="P:ActiproSoftware.SyntaxEditor.HighlightingStyle.Key" /> or <see cref="P:ActiproSoftware.SyntaxEditor.HighlightingStyle.Name" /> properties.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.HighlightingStyle.Dispose(System.Boolean)"><summary>
            Releases the unmanaged resources used by the object and optionally releases the managed resources.
            </summary><param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources. 
            </param><remarks>
            This method is called by the public <c>Dispose</c> method and the <c>Finalize</c> method. 
            <c>Dispose</c> invokes this method with the <paramref name="disposing" /> parameter set to <c>true</c>. 
            <c>Finalize</c> invokes this method with <paramref name="disposing" /> set to <c>false</c>.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.HighlightingStyle.Equals(System.Object)"><summary>
            Determines whether the specified <c>Object</c> is equal to the current <c>Object</c>. 
            </summary><param name="obj">The <c>Object</c> to compare to the current <c>Object</c>.</param><returns><c>true</c> if the specified <c>Object</c> is equal to the current <c>Object</c>; 
            otherwise, <c>false</c>. 
            </returns></member><member name="M:ActiproSoftware.SyntaxEditor.HighlightingStyle.GetHashCode"><summary>
            Returns a hash code for this object.
            </summary><returns>An integer value that specifies a hash value for this object.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.HighlightingStyle.#ctor(System.String,System.String,System.Drawing.Color,System.Drawing.Color)"><summary>
            Initializes the <c>HighlightingStyle</c> class. 
            </summary><param name="key">The key of the higlighting style.</param><param name="name">The display name of the higlighting style.</param><param name="foreColor">The foreground color of the highlighting style.</param><param name="backColor">The background color of the highlighting style.</param></member><member name="M:ActiproSoftware.SyntaxEditor.HighlightingStyle.#ctor(System.String,System.String,System.Drawing.Color,System.Drawing.Color,ActiproSoftware.ComponentModel.DefaultableBoolean,ActiproSoftware.ComponentModel.DefaultableBoolean,ActiproSoftware.SyntaxEditor.HighlightingStyleLineStyle)"><summary>
            Initializes the <c>HighlightingStyle</c> class. 
            </summary><param name="key">The key of the higlighting style.</param><param name="name">The display name of the higlighting style.</param><param name="foreColor">The foreground color of the highlighting style.</param><param name="backColor">The background color of the highlighting style.</param><param name="bold">A <see cref="T:ActiproSoftware.ComponentModel.DefaultableBoolean" /> indicating whether the highlighting style uses boldface.</param><param name="italic">A <see cref="T:ActiproSoftware.ComponentModel.DefaultableBoolean" /> indicating whether the highlighting style uses italics.</param><param name="underlineStyle">A <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyleLineStyle" /> indicating the underline style.</param></member><member name="P:ActiproSoftware.SyntaxEditor.HighlightingStyle.BackColor"><summary>
            Gets or sets the background color of the highlighting style.
            </summary><value>
            A <c>Color</c> indicating the background color of the highlighting style.  
            Specify <c>Color.Empty</c> to use a default color, which is the default property value.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.HighlightingStyle.Bold"><summary>
            Gets or sets a <see cref="T:ActiproSoftware.ComponentModel.DefaultableBoolean" /> indicating whether the highlighting style uses boldface.
            </summary><value>
            A <see cref="T:ActiproSoftware.ComponentModel.DefaultableBoolean" /> indicating whether the highlighting style uses boldface.
            Specify <c>DefaultableBoolean.Default</c> to use a default value, which is the default property value.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.HighlightingStyle.BorderColor"><summary>
            Gets or sets the border color of the highlighting style.
            </summary><value>
            A <c>Color</c> indicating the border color of the highlighting style.  
            Specify <c>Color.Empty</c> to use a default color, which is the default property value.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.HighlightingStyle.BorderCornerStyle"><summary>
            Gets or sets a <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyleBorderCornerStyle" /> indicating the style of border corners.
            </summary><value>
            A <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyleBorderCornerStyle" /> indicating the style of border corners.
            Specify <c>HighlightingStyleBorderCornerStyle.Default</c> to use a default style, which is the default property value.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.HighlightingStyle.BorderStyle"><summary>
            Gets or sets a <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyleLineStyle" /> indicating the style of border to use.
            </summary><value>
            A <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyleLineStyle" /> indicating the style of border to use.
            Specify <c>HighlightingStyleLineStyle.Default</c> to use a default style, which is the default property value.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.HighlightingStyle.FontFamilyName"><summary>
            Gets or sets the name of the font family to use for drawing text with the highlighting style.
            </summary><value>
            The name of the font family to use for drawing text with the highlighting style.
            Specify <see langword="null" /> to use a default value, which is the default property value.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.HighlightingStyle.FontSize"><summary>
            Gets or sets the size of the font to use for drawing text with the highlighting style.
            </summary><value>
            The size of the font to use for drawing text with the highlighting style.
            Specify <c>0</c> to use a default value, which is the default property value.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.HighlightingStyle.ForeColor"><summary>
            Gets or sets the foreground color of the highlighting style.
            </summary><value>A <c>Color</c> indicating the foreground color of the highlighting style.</value></member><member name="P:ActiproSoftware.SyntaxEditor.HighlightingStyle.HasAdornments"><summary>
            Gets whether the highlighting style contains adornments such as a border, strike-through, or underline.
            </summary><value><c>true</c> if the highlighting style contains adornments such as a border, strike-through, or underline; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.HighlightingStyle.HasFontChange"><summary>
            Gets whether the highlighting style contains a font-related change.
            </summary><value><c>true</c> if the highlighting style contains a font-related change; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.HighlightingStyle.Italic"><summary>
            Gets or sets a <see cref="T:ActiproSoftware.ComponentModel.DefaultableBoolean" /> indicating whether the highlighting style uses italics.
            </summary><value>
            A <see cref="T:ActiproSoftware.ComponentModel.DefaultableBoolean" /> indicating whether the highlighting style uses italics.
            Specify <c>DefaultableBoolean.Default</c> to use a default value, which is the default property value.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.HighlightingStyle.Key"><summary>
            Gets a string-based key that identifies the object.
            </summary><value>A string-based key that identifies the object.</value></member><member name="P:ActiproSoftware.SyntaxEditor.HighlightingStyle.Name"><summary>
            Gets or sets the display name of the highlighting style.
            </summary><value>The display name of the highlighting style.</value><remarks>This value should be used when displaying the name of the highlighting style within an application dialog.</remarks></member><member name="P:ActiproSoftware.SyntaxEditor.HighlightingStyle.StrikeOutColor"><summary>
            Gets or sets the strike-out color of the highlighting style.
            </summary><value>
            A <c>Color</c> indicating the strike-out color of the highlighting style.  
            Specify <c>Color.Empty</c> to use a default color, which is the default property value.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.HighlightingStyle.StrikeOutStyle"><summary>
            Gets or sets a <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyleLineStyle" /> indicating the style of strike-out to use.
            </summary><value>
            A <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyleLineStyle" /> indicating the style of strike-out to use.
            Specify <c>HighlightingStyleLineStyle.Default</c> to use a default style, which is the default property value.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.HighlightingStyle.StrikeOutWeight"><summary>
            Gets or sets a <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyleLineWeight" /> indicating the strike-out line weight to use.
            </summary><value>
            A <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyleLineWeight" /> indicating the strike-out line weight to use.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.HighlightingStyle.Tag"><summary>
            Gets or sets the object that contains user-defined data about the object.
            </summary><value>
            An <see cref="T:System.Object" /> that contains user-defined data about the control. The default is <see langword="null" />.
            </value><remarks>
            Any type derived from the <see cref="T:System.Object" /> class can be assigned to this property. 
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.HighlightingStyle.UnderlineColor"><summary>
            Gets or sets the underline color of the highlighting style.
            </summary><value>
            A <c>Color</c> indicating the underline color of the highlighting style.  
            Specify <c>Color.Empty</c> to use a default color, which is the default property value.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.HighlightingStyle.UnderlineStyle"><summary>
            Gets or sets a <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyleLineStyle" /> indicating the style of underlining to use.
            </summary><value>
            A <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyleLineStyle" /> indicating the style of underlining to use.
            Specify <c>HighlightingStyleLineStyle.Default</c> to use a default style, which is the default property value.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.HighlightingStyle.UnderlineWeight"><summary>
            Gets or sets a <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyleLineWeight" /> indicating the underlining line weight to use.
            </summary><value>
            A <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyleLineWeight" /> indicating the underlining line weight to use.
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.HighlightingStyleBorderCornerStyle"><summary>
            Specifies the corner style of a <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" /> border.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.HighlightingStyleBorderCornerStyle.Square"><summary>
            Draw a square border.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.HighlightingStyleBorderCornerStyle.SinglePixelRounded"><summary>
            Draws a single-pixel rounded border.
            </summary></member><member name="T:ActiproSoftware.SyntaxEditor.HighlightingStyleCollection"><summary>
            Encapsulates a collection of <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" /> items.
            </summary><seealso cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" /></member><member name="M:ActiproSoftware.SyntaxEditor.HighlightingStyleCollection.Add(ActiproSoftware.SyntaxEditor.HighlightingStyle)"><summary>
            Adds the specified style to the collection. 
            </summary><param name="style">
            The <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" /> to add to the collection. 
            </param><returns>The position into which the new item was inserted.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.HighlightingStyleCollection.OnObjectAdded(System.Int32,ActiproSoftware.ComponentModel.ILogicalTreeNode)"><summary>
            Performs additional custom processes after an object is added to the collection.
            </summary><param name="index">The zero-based index at which the object was inserted.</param><param name="value">The object that was inserted.</param></member><member name="M:ActiproSoftware.SyntaxEditor.HighlightingStyleCollection.ExportStyleSettings"><summary>
            Exports all the user-customized style settings to an <see cref="T:System.Xml.XmlNode" />.
            </summary><returns>All the style settings persisted to an <see cref="T:System.Xml.XmlNode" />.</returns><remarks>
            The exported style settings can be used to store user-customized style settings.
            Restored the exported settings later by using the <see cref="M:ActiproSoftware.SyntaxEditor.HighlightingStyleCollection.ImportStyleSettings(System.Xml.XmlNode)" /> method.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.HighlightingStyleCollection.ImportStyleSettings(System.Xml.XmlNode)"><summary>
            Imports user-customized style settings from an <see cref="T:System.Xml.XmlNode" />.
            </summary><param name="node">The <see cref="T:System.Xml.XmlNode" /> to examine.</param><remarks>
            This method can be used to restore user-customized style settings that were exported using
            the <see cref="M:ActiproSoftware.SyntaxEditor.HighlightingStyleCollection.ExportStyleSettings" /> method.
            It will only override existing styles (matched by the <c>Key</c>) and will not add any new styles to the collection.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.HighlightingStyleCollection.#ctor"><summary>
            Initializes a new instance of the <c>HighlightingStyleCollection</c> class. 
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.HighlightingStyleCollection.#ctor(ActiproSoftware.ComponentModel.ILogicalTreeNode)"><summary>
            Initializes a new instance of the <c>HighlightingStyleCollection</c> class. 
            </summary><param name="owner">The owner of the collection.</param></member><member name="P:ActiproSoftware.SyntaxEditor.HighlightingStyleCollection.Item(System.Int32)"><summary>
            Gets the style at the specified index. 
            <para>
            [C#] In C#, this property is the indexer for the <c>HighlightingStyleCollection</c> class. 
            </para></summary><param name="index">The index of the style to return.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" /> at the specified index. 
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.HighlightingStyleCollection.Item(System.String)"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" /> with the specified name. 
            <para>
            [C#] In C#, this property is the indexer for the <c>HighlightingStyleCollection</c> class. 
            </para></summary><param name="key">The key of the <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" /> to return.</param><value>
            The <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" /> with the specified key. 
            </value></member><member name="T:ActiproSoftware.SyntaxEditor.HighlightingStyleLineStyle"><summary>
            Specifies the style of a <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" /> line, used for borders, strikeouts, and underlines.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.HighlightingStyleLineStyle.Solid"><summary>
            Draw a solid line.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.HighlightingStyleLineStyle.DashDot"><summary>
            Draw a line with a dash-dot pattern.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.HighlightingStyleLineStyle.Dot"><summary>
            Draw a line with a dot pattern.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.HighlightingStyleLineStyle.Dash"><summary>
            Draw a line with a dash pattern.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.HighlightingStyleLineStyle.Wave"><summary>
            Draw a wave line.  If specified for a border, then a solid line will be drawn instead.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.HighlightingStyleLineStyle.None"><summary>
            Don't draw a line.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.HighlightingStyleLineStyle.Default"><summary>
            Use the default resolved settings.
            </summary></member><member name="T:ActiproSoftware.SyntaxEditor.HighlightingStyleLineWeight"><summary>
            Specifies the weight of a <see cref="T:ActiproSoftware.SyntaxEditor.HighlightingStyle" /> line, used for underlines.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.HighlightingStyleLineWeight.Single"><summary>
            Draw a single line that is a single pixel in width.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.HighlightingStyleLineWeight.Double"><summary>
            Draw two lines that each are a single pixel in width.  The lines are spaced a single pixel apart.
            </summary></member><member name="T:ActiproSoftware.SyntaxEditor.TokenContentDividerType"><summary>
            Specifies the type of content divider to display for an <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.TokenContentDividerType.LexicalPatternGroup"><summary>
            Use the content divider type indicated by the lexical pattern group, if any, of the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.TokenContentDividerType.Before"><summary>
            Display a content divider before the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.TokenContentDividerType.After"><summary>
            Display a content divider after the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </summary></member><member name="F:ActiproSoftware.SyntaxEditor.TokenContentDividerType.None"><summary>
            Don't display a content divider for the <see cref="T:ActiproSoftware.SyntaxEditor.IToken" />.
            </summary></member><member name="T:ActiproSoftware.CodeHighlighter.CodeHighlighter"><summary>
            Provides a web control that can syntax highlight code.
            </summary></member><member name="M:ActiproSoftware.CodeHighlighter.CodeHighlighter.OnPostRender(System.EventArgs)"><summary>
            Raises the <c>PostRender</c> event.
            </summary><param name="e">An <c>EventArgs</c> object that contains the event data.</param></member><member name="M:ActiproSoftware.CodeHighlighter.CodeHighlighter.GetLanguage(ActiproSoftware.CodeHighlighter.CodeHighlighterConfiguration,System.String)"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> for the specified language by using the configuration data.
            </summary><param name="config">The <see cref="T:ActiproSoftware.CodeHighlighter.CodeHighlighterConfiguration" /> to use.</param><param name="languageKey">The key of the language to load.</param><returns>The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> rfor the specified language by using the configuration data.</returns><remarks>The cache will be used to store the language.</remarks></member><member name="M:ActiproSoftware.CodeHighlighter.CodeHighlighter.ResetLineNumberMarginForeColor"><summary>
            Resets the <see cref="P:ActiproSoftware.CodeHighlighter.CodeHighlighter.LineNumberMarginForeColor" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.CodeHighlighter.CodeHighlighter.ShouldSerializeLineNumberMarginForeColor"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.CodeHighlighter.CodeHighlighter.LineNumberMarginForeColor" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.CodeHighlighter.CodeHighlighter.Render(System.Web.UI.HtmlTextWriter)"><summary>
            Sends server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object, 
            which writes the content to be rendered on the client.
            </summary><param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the server control content.</param></member><member name="M:ActiproSoftware.CodeHighlighter.CodeHighlighter.#ctor"><summary>
            Initializes a new instance of the <c>CodeHighlighter</c> class. 
            </summary><remarks>
            The default constructor initializes all fields to their default values.
            </remarks></member><member name="P:ActiproSoftware.CodeHighlighter.CodeHighlighter.KeywordCollectionKey"><summary>
            Gets or sets the key of the <see cref="T:ActiproSoftware.CodeHighlighter.KeywordCollection" /> to use for keyword linking that is defined in the <c>web.config</c>.
            </summary><value>The key of the <see cref="T:ActiproSoftware.CodeHighlighter.KeywordCollection" /> to use for keyword linking that is defined in the <c>web.config</c>.</value></member><member name="P:ActiproSoftware.CodeHighlighter.CodeHighlighter.KeywordLinkingEnabled"><summary>
            Gets or sets whether keyword linking is enabled.
            </summary><value><c>true</c> if keyword linking is enabled; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.CodeHighlighter.CodeHighlighter.KeywordLinkingTarget"><summary>
            Gets or sets the <c>TARGET</c> attribute to be placed on the <c>A</c> tag that is created for keyword links.
            </summary><value>The <c>TARGET</c> attribute to be placed on the <c>A</c> tag that is created for keyword links.</value><remarks>
            This string can be <see langword="null" /> to not specify a target or can be either <c>_blank</c>, <c>_self</c>,
            <c>_parent</c>, <c>_top</c>, or any other valid frame name.
            </remarks></member><member name="P:ActiproSoftware.CodeHighlighter.CodeHighlighter.Keywords"><summary>
            Gets the <see cref="T:ActiproSoftware.CodeHighlighter.KeywordCollection" /> containing the keywords to use for keyword linking.
            </summary><value>The <see cref="T:ActiproSoftware.CodeHighlighter.KeywordCollection" /> containing the keywords to use for keyword linking.</value></member><member name="P:ActiproSoftware.CodeHighlighter.CodeHighlighter.LanguageKey"><summary>
            Gets or sets the key of the language file to load.
            </summary><value>The key of the language file to load.</value><remarks>
            The language key references a language file that must be specified in the Web.config file of the web application.
            </remarks></member><member name="P:ActiproSoftware.CodeHighlighter.CodeHighlighter.LineNumberMarginForeColor"><summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> to use when drawing text in the line number margin.
            </summary><value>The <see cref="T:System.Drawing.Color" /> to use when drawing text in the line number margin.</value></member><member name="P:ActiproSoftware.CodeHighlighter.CodeHighlighter.LineNumberMarginPaddingCharacter"><summary>
            Gets or sets the character to use for padding small line numbers.
            </summary><value>
            The character to use for padding small line numbers.
            </value><remarks>
            This property is set to <c>' '</c> (space) by default.
            Another common option is <c>'0'</c> (zero).
            </remarks></member><member name="P:ActiproSoftware.CodeHighlighter.CodeHighlighter.LineNumberMarginVisible"><summary>
            Gets or sets whether to show the line number margin.
            </summary><value><c>true</c> if the line number margin should be shown; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.CodeHighlighter.CodeHighlighter.OutliningEnabled"><summary>
            Gets or sets whether outlining is enabled.
            </summary><value><c>true</c> if outlining is enabled; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.CodeHighlighter.CodeHighlighter.Output"><summary>
            Gets or sets the output of the code highlighter.
            </summary><value>The output of the code highlighter.</value><remarks>
            This property is not populated until the <c>OnPreRender</c> method is called.
            </remarks></member><member name="P:ActiproSoftware.CodeHighlighter.CodeHighlighter.Text"><summary>
            Gets or sets the code to syntax highlight.
            </summary><value>The code to syntax highlight.</value><remarks>
            The return value is only valid if the contents of the tag block are a single literal control.
            </remarks></member><member name="E:ActiproSoftware.CodeHighlighter.CodeHighlighter.PostRender"><summary>
            Occurs immediately after the code is syntax highlighted and the <see cref="P:ActiproSoftware.CodeHighlighter.CodeHighlighter.Output" /> property has been updated.
            </summary></member><member name="T:ActiproSoftware.CodeHighlighter.CodeHighlighterConfiguration"><summary>
            Represents the configuration for a <see cref="T:ActiproSoftware.CodeHighlighter.CodeHighlighter" /> that is loaded from the web application's
            Web.config file.
            </summary></member><member name="M:ActiproSoftware.CodeHighlighter.CodeHighlighterConfiguration.ResetLineNumberMarginForeColor"><summary>
            Resets the <see cref="P:ActiproSoftware.CodeHighlighter.CodeHighlighterConfiguration.LineNumberMarginForeColor" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.CodeHighlighter.CodeHighlighterConfiguration.ShouldSerializeLineNumberMarginForeColor"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.CodeHighlighter.CodeHighlighterConfiguration.LineNumberMarginForeColor" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.CodeHighlighter.CodeHighlighterConfiguration.#ctor"><summary>
            Initializes a new instance of the <c>CodeHighlighterConfiguration</c> class. 
            </summary><remarks>
            The default constructor initializes all fields to their default values.
            </remarks></member><member name="P:ActiproSoftware.CodeHighlighter.CodeHighlighterConfiguration.CacheLanguageTimeout"><summary>
            Gets or sets the timeout period, in minutes, that loaded languages should remain in the cache.
            </summary><value>The timeout period, in minutes, that loaded languages should remain in the cache.</value><remarks>
            If this value is set to <c>0</c>, then the cache will not be used.
            Caching saves language load time because the loaded language objects can be immediately restored.
            A file dependency to the language definition file is created when a language is stored in the cache.
            </remarks></member><member name="P:ActiproSoftware.CodeHighlighter.CodeHighlighterConfiguration.DefaultKeywordCollectionKey"><summary>
            Gets or sets the default key of the <see cref="T:ActiproSoftware.CodeHighlighter.KeywordCollection" /> to use for keyword linking that is defined in the <c>web.config</c>.
            </summary><value>The default key of the <see cref="T:ActiproSoftware.CodeHighlighter.KeywordCollection" /> to use for keyword linking that is defined in the <c>web.config</c>.</value></member><member name="P:ActiproSoftware.CodeHighlighter.CodeHighlighterConfiguration.KeywordCollections"><summary>
            Gets a <see cref="T:System.Collections.Hashtable" /> containing the defined <see cref="T:ActiproSoftware.CodeHighlighter.KeywordCollection" /> objects.
            </summary><value>A <see cref="T:System.Collections.Hashtable" /> containing the defined <see cref="T:ActiproSoftware.CodeHighlighter.KeywordCollection" /> objects.</value></member><member name="P:ActiproSoftware.CodeHighlighter.CodeHighlighterConfiguration.KeywordLinkingEnabled"><summary>
            Gets or sets whether keyword linking is enabled.
            </summary><value><c>true</c> if keyword linking is enabled; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.CodeHighlighter.CodeHighlighterConfiguration.KeywordLinkingTarget"><summary>
            Gets or sets the <c>TARGET</c> attribute to be placed on the <c>A</c> tag that is created for keyword links.
            </summary><value>The <c>TARGET</c> attribute to be placed on the <c>A</c> tag that is created for keyword links.</value><remarks>
            This string can be <see langword="null" /> to not specify a target or can be either <c>_blank</c>, <c>_self</c>,
            <c>_parent</c>, <c>_top</c>, or any other valid frame name.
            </remarks></member><member name="P:ActiproSoftware.CodeHighlighter.CodeHighlighterConfiguration.LanguageConfigs"><summary>
            Gets a <see cref="T:System.Collections.Hashtable" /> containing the language configuration for each language definition.
            </summary><value>A <see cref="T:System.Collections.Hashtable" /> containing the language configuration for each language definition.</value></member><member name="P:ActiproSoftware.CodeHighlighter.CodeHighlighterConfiguration.LineNumberMarginForeColor"><summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> to use when drawing text in the line number margin.
            </summary><value>The <see cref="T:System.Drawing.Color" /> to use when drawing text in the line number margin.</value></member><member name="P:ActiproSoftware.CodeHighlighter.CodeHighlighterConfiguration.LineNumberMarginPaddingCharacter"><summary>
            Gets or sets the character to use for padding small line numbers.
            </summary><value>
            The character to use for padding small line numbers.
            </value><remarks>
            This property is set to <c>' '</c> (space) by default.
            Another common option is <c>'0'</c> (zero).
            </remarks></member><member name="P:ActiproSoftware.CodeHighlighter.CodeHighlighterConfiguration.LineNumberMarginVisible"><summary>
            Gets or sets whether to show the line number margin.
            </summary><value><c>true</c> if the line number margin should be shown; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.CodeHighlighter.CodeHighlighterConfiguration.OutliningEnabled"><summary>
            Gets or sets whether outlining is enabled.
            </summary><value><c>true</c> if outlining is enabled; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.CodeHighlighter.CodeHighlighterConfiguration.OutliningImagesPath"><summary>
            Gets or sets the web path to the outlining images folder.
            </summary><value>The web path to the outlining images folder.</value></member><member name="P:ActiproSoftware.CodeHighlighter.CodeHighlighterConfiguration.SpacesInTabs"><summary>
            Gets or sets the number of spaces to use to replace tabs.
            </summary><value>The number of spaces to use to replace tabs.</value><remarks>
            If this value is set to <c>0</c>, then no tabs will be replaced.
            </remarks></member><member name="T:ActiproSoftware.CodeHighlighter.CodeHighlighterConfigurationSectionHandler"><summary>
            Reads code highlighter configuration information from a Web.config configuration section.
            </summary></member><member name="M:ActiproSoftware.CodeHighlighter.CodeHighlighterConfigurationSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)"><summary>
            Parses the XML of the configuration section.
            </summary><param name="parent">The configuration settings in a corresponding parent configuration section.</param><param name="input">
            An <c>HttpConfigurationContext</c> when Create is called from the ASP.NET configuration system. 
            Otherwise, this parameter is reserved and is <see langword="null" />.
            </param><param name="node">
            The <c>XmlNode</c> that contains the configuration information from the configuration file. 
            Provides direct access to the XML contents of the configuration section.
            </param><returns>A configuration object.</returns></member><member name="T:ActiproSoftware.CodeHighlighter.CodeHighlighterEngine"><summary>
            Provides an engine for performing code syntax highlighting.
            </summary></member><member name="M:ActiproSoftware.CodeHighlighter.CodeHighlighterEngine.GenerateHtmlInline(System.String,System.String,ActiproSoftware.SyntaxEditor.SyntaxLanguage)"><summary>
            Generates inline HTML for code using the specified language.
            </summary><param name="uniqueID">A unique ID that can be used if necessary.</param><param name="code">The code to parse.</param><param name="language">The <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> that defines the language.</param><returns>
            Inline HTML markup containing syntax highlighting of the code.
            </returns></member><member name="M:ActiproSoftware.CodeHighlighter.CodeHighlighterEngine.ResetLineNumberMarginForeColor"><summary>
            Resets the <see cref="P:ActiproSoftware.CodeHighlighter.CodeHighlighterEngine.LineNumberMarginForeColor" /> property to its default value.
            </summary></member><member name="M:ActiproSoftware.CodeHighlighter.CodeHighlighterEngine.ShouldSerializeLineNumberMarginForeColor"><summary>
            Indicates whether the <see cref="P:ActiproSoftware.CodeHighlighter.CodeHighlighterEngine.LineNumberMarginForeColor" /> property should be persisted.
            </summary><returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.CodeHighlighter.CodeHighlighterEngine.#ctor"><summary>
            Initializes a new instance of the <c>CodeHighlighterEngine</c> class. 
            </summary><remarks>
            The default constructor initializes all fields to their default values.
            </remarks></member><member name="P:ActiproSoftware.CodeHighlighter.CodeHighlighterEngine.KeywordLinkingEnabled"><summary>
            Gets or sets whether keyword linking is enabled.
            </summary><value><c>true</c> if keyword linking is enabled; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.CodeHighlighter.CodeHighlighterEngine.KeywordLinkingTarget"><summary>
            Gets or sets the <c>TARGET</c> attribute to be placed on the <c>A</c> tag that is created for keyword links.
            </summary><value>The <c>TARGET</c> attribute to be placed on the <c>A</c> tag that is created for keyword links.</value><remarks>
            This string can be <see langword="null" /> to not specify a target or can be either <c>_blank</c>, <c>_self</c>,
            <c>_parent</c>, <c>_top</c>, or any other valid frame name.
            </remarks></member><member name="P:ActiproSoftware.CodeHighlighter.CodeHighlighterEngine.Keywords"><summary>
            Gets the <see cref="T:ActiproSoftware.CodeHighlighter.KeywordCollection" /> containing the keywords to use for keyword linking.
            </summary><value>The <see cref="T:ActiproSoftware.CodeHighlighter.KeywordCollection" /> containing the keywords to use for keyword linking.</value></member><member name="P:ActiproSoftware.CodeHighlighter.CodeHighlighterEngine.LineNumberMarginForeColor"><summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> to use when drawing text in the line number margin.
            </summary><value>The <see cref="T:System.Drawing.Color" /> to use when drawing text in the line number margin.</value></member><member name="P:ActiproSoftware.CodeHighlighter.CodeHighlighterEngine.LineNumberMarginPaddingCharacter"><summary>
            Gets or sets the character to use for padding small line numbers.
            </summary><value>
            The character to use for padding small line numbers.
            </value><remarks>
            This property is set to <c>' '</c> (space) by default.
            Another common option is <c>'0'</c> (zero).
            </remarks></member><member name="P:ActiproSoftware.CodeHighlighter.CodeHighlighterEngine.LineNumberMarginVisible"><summary>
            Gets or sets whether to show the line number margin.
            </summary><value><c>true</c> if the line number margin should be shown; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.CodeHighlighter.CodeHighlighterEngine.OutliningEnabled"><summary>
            Gets or sets whether outlining is enabled.
            </summary><value><c>true</c> if outlining is enabled; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.CodeHighlighter.CodeHighlighterEngine.OutliningImagesPath"><summary>
            Gets or sets the resolved path to the outlining images folder.
            </summary><value>The resolved path to the outlining images folder.</value></member><member name="P:ActiproSoftware.CodeHighlighter.CodeHighlighterEngine.SpacesInTabs"><summary>
            Gets or sets the number of spaces to use to replace tabs.
            </summary><value>The number of spaces to use to replace tabs.</value><remarks>
            If this value is set to <c>0</c>, then no tabs will be replaced.
            </remarks></member><member name="T:ActiproSoftware.CodeHighlighter.Keyword"><summary>
            Represents a keyword that can be linked to a URL.
            </summary></member><member name="M:ActiproSoftware.CodeHighlighter.Keyword.#ctor(System.String,System.String,System.String)"><summary>
            Initializes a new instance of the <c>Keyword</c> class. 
            </summary><param name="tokenKey">The key of the tokens in which to try and match the <see cref="P:ActiproSoftware.CodeHighlighter.Keyword.PatternValue" />.</param><param name="patternValue">The pattern value of the keyword.</param><param name="url">The url to link to.</param></member><member name="M:ActiproSoftware.CodeHighlighter.Keyword.#ctor(System.String,System.String,System.String,System.Boolean)"><summary>
            Initializes a new instance of the <c>Keyword</c> class. 
            </summary><param name="tokenKey">The key of the tokens in which to try and match the <see cref="P:ActiproSoftware.CodeHighlighter.Keyword.PatternValue" />.</param><param name="patternValue">The pattern value of the keyword.</param><param name="url">The url to link to.</param><param name="caseSensitive">The pattern is case sensitive.</param></member><member name="P:ActiproSoftware.CodeHighlighter.Keyword.CaseSensitive"><summary>
            Gets or sets whether the pattern is case sensitive.
            </summary><value><c>true</c> if the pattern is case sensitive; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.CodeHighlighter.Keyword.PatternValue"><summary>
            Gets or sets the pattern value of the keyword.
            </summary><value>The pattern value of the keyword.</value></member><member name="P:ActiproSoftware.CodeHighlighter.Keyword.TokenKey"><summary>
            Gets or sets the key of the tokens in which to try and match the <see cref="P:ActiproSoftware.CodeHighlighter.Keyword.PatternValue" />.
            </summary><value>The key of the tokens in which to try and match the <see cref="P:ActiproSoftware.CodeHighlighter.Keyword.PatternValue" />.</value></member><member name="P:ActiproSoftware.CodeHighlighter.Keyword.Url"><summary>
            Gets or sets the url to link to.
            </summary><value>The url to link to.</value></member><member name="T:ActiproSoftware.CodeHighlighter.KeywordCollection"><summary>
            Represents a collection of <see cref="T:ActiproSoftware.CodeHighlighter.Keyword" /> objects.
            </summary></member><member name="T:ActiproSoftware.CodeHighlighter.SyntaxLanguageConfiguration"><summary>
            Represents the configuration for a <see cref="T:ActiproSoftware.SyntaxEditor.SyntaxLanguage" /> that is used with a <see cref="T:ActiproSoftware.CodeHighlighter.CodeHighlighter" />.
            </summary></member><member name="M:ActiproSoftware.CodeHighlighter.SyntaxLanguageConfiguration.#ctor"><summary>
            Initializes a new instance of the <c>SyntaxLanguageConfiguration</c> class. 
            </summary><remarks>
            The default constructor initializes all fields to their default values.
            </remarks></member><member name="P:ActiproSoftware.CodeHighlighter.SyntaxLanguageConfiguration.DefinitionPath"><summary>
            Gets or sets the path to the language definition, which can be a web path or an embedded resource.
            </summary><value>The path to the language definition, which can be a web path or an embedded resource.</value><remarks>
            If the value is an embedded resource, the value should be in this format: <c>assemblyname, fullresourcepath</c></remarks></member><member name="P:ActiproSoftware.CodeHighlighter.SyntaxLanguageConfiguration.SemanticParserType"><summary>
            Gets or sets the fully qualified <c>Type</c> name of the semantic parser class to load for the language.
            </summary><value>The fully qualified <c>Type</c> name of the semantic parser class to load for the language.</value></member><member name="T:ActiproSoftware.Products.CodeHighlighter.AssemblyInfo"><summary>
            Provides a class for retrieving information about the <c>ActiproSoftware.CodeHighlighter</c> assembly.
            </summary></member><member name="P:ActiproSoftware.Products.CodeHighlighter.AssemblyInfo.Components"><summary>
            Gets an array containing the components that must be licensed to be used in production applications.
            </summary><value>An array containing the components that must be licensed to be used in production applications.</value></member><member name="P:ActiproSoftware.Products.CodeHighlighter.AssemblyInfo.Instance"><summary>
            Gets the instance of the <see cref="T:ActiproSoftware.Products.AssemblyInfo" /> class for this assembly.
            </summary><value>The instance of the <see cref="T:ActiproSoftware.Products.AssemblyInfo" /> class for this assembly.</value></member><member name="P:ActiproSoftware.Products.CodeHighlighter.AssemblyInfo.LicenseType"><summary>
            Gets the type of license that is available for the assembly.
            </summary><value>A <see cref="T:ActiproSoftware.Products.AssemblyLicenseType" /> specifying the type of license that is available for the assembly.</value></member><member name="P:ActiproSoftware.Products.CodeHighlighter.AssemblyInfo.Platform"><summary>
            Gets the target platform for the assembly.
            </summary><value>A <see cref="T:ActiproSoftware.Products.AssemblyPlatform" /> specifying the target platform for the assembly.</value></member><member name="P:ActiproSoftware.Products.CodeHighlighter.AssemblyInfo.ProductCode"><summary>
            Gets the product code of the assembly.
            </summary><value>A three-letter product code of the assembly.</value></member><member name="P:ActiproSoftware.Products.CodeHighlighter.AssemblyInfo.RedistributableFiles"><summary>
            Gets an array containing the names of files that are permitted to be redistributed 
            with your projects after you have licensed the product.
            </summary><value>
            An array containing the names of files that are permitted to be redistributed 
            with your projects after you have licensed the product
            </value></member><member name="P:ActiproSoftware.Products.CodeHighlighter.AssemblyInfo.Resources"><summary>
            Gets a <see cref="T:ActiproSoftware.Products.CodeHighlighter.Resources" /> that provides access to the resources of the assembly.
            </summary><value>
            A <see cref="T:ActiproSoftware.Products.CodeHighlighter.Resources" /> that provides access to the resources of the assembly.
            </value></member><member name="T:ActiproSoftware.Products.CodeHighlighter.Resources"><summary>
            Provides a class for accessing the resources of an assembly.
            </summary></member><member name="T:ActiproSoftware.SyntaxEditor.Document"><summary>
            Provides a container for text data.
            This class has been modified and trimmed down from its SyntaxEditor counterpart.
            </summary></member><member name="M:ActiproSoftware.SyntaxEditor.Document.GetCoreTextBuffer"><summary>
            Gets the core <see cref="T:System.Text.StringBuilder" /> text buffer that stores the text contents of the document.
            Do not modify the <see cref="T:System.Text.StringBuilder" /> that is returned.
            </summary><returns>The core <see cref="T:System.Text.StringBuilder" /> text buffer.</returns><remarks>
            The returned <see cref="T:System.Text.StringBuilder" /> should only be used for fast read-only access to the text contents of the document.
            Never modify the contents of the returned <see cref="T:System.Text.StringBuilder" /> or unexpected exceptions will occur!
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.Document.GetSubstring(System.Int32,System.Int32)"><summary>
            Returns a substring from the document text.
            </summary><param name="offset">The offset at which to retrieve the text.</param><param name="length">The number of characters to return.</param><returns>The substring from the document text.</returns></member><member name="M:ActiproSoftware.SyntaxEditor.Document.GetTextStream(System.Int32)"><summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.TextStream" /> that permits iteration through the <see cref="T:ActiproSoftware.SyntaxEditor.Document" />.
            </summary><param name="startOffset">The offset with which to initialize the stream's position.</param><returns>A <see cref="T:ActiproSoftware.SyntaxEditor.TextStream" /> that permits iteration through the <see cref="T:ActiproSoftware.SyntaxEditor.Document" />.</returns><remarks>
            Use fo the <see cref="T:ActiproSoftware.SyntaxEditor.TextStream" /> is ideal for character-by-character parsing of a <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> during a lexical parsing phase.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.Document.GetTokenStream(System.Int32)"><summary>
            Gets a <see cref="T:ActiproSoftware.SyntaxEditor.TokenStream" /> that permits iteration through the <see cref="!:Token" /> objects in the <see cref="P:ActiproSoftware.SyntaxEditor.Document.Tokens" /> collection.
            </summary><param name="tokenIndex">
            The index of the <see cref="!:Token" /> within the <see cref="P:ActiproSoftware.SyntaxEditor.Document.Tokens" /> collection 
            with which to initialize the stream's position.
            </param><returns>
            A <see cref="T:ActiproSoftware.SyntaxEditor.TokenStream" /> that permits iteration through the <see cref="!:Token" /> objects in the <see cref="P:ActiproSoftware.SyntaxEditor.Document.Tokens" /> collection.
            </returns><remarks>
            Use of the <see cref="T:ActiproSoftware.SyntaxEditor.TokenStream" /> is ideal for parsing of a <see cref="T:ActiproSoftware.SyntaxEditor.Document" /> during a semantic parsing phase.
            </remarks></member><member name="M:ActiproSoftware.SyntaxEditor.Document.GetTokenText(ActiproSoftware.SyntaxEditor.IToken)"><summary>
            Gets the text that is contained in the offset range of a <see cref="!:Token" />.
            </summary><param name="token">The <see cref="T:ActiproSoftware.SyntaxEditor.IToken" /> to examine.</param><returns>The text that is contained in the offset range of a <see cref="!:Token" />.</returns></member><member name="P:ActiproSoftware.SyntaxEditor.Document.DeletedTokenTrackingEnabled"><summary>
            Gets whether to track the deleted tokens after each lexical parse operation in the <see cref="P:ActiproSoftware.SyntaxEditor.TokenCollection.DeletedTokens" /> collection.
            </summary><value><c>true</c> if the deleted tokens should be tracked; otherwise, <c>false</c>.
            </value><remarks>
            Activating this feature uses more memory so leave it <c>false</c> if you will not be accessing the <see cref="P:ActiproSoftware.SyntaxEditor.TokenCollection.DeletedTokens" /> collection.
            </remarks></member><member name="P:ActiproSoftware.SyntaxEditor.Document.Length"><summary>
            Gets the count of characters in the document.
            </summary><value>The count of characters in the document.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Document.Outlining"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.Outlining" /> that manages the outlining of the <see cref="T:ActiproSoftware.SyntaxEditor.Document" />.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.Outlining" /> that manages the outlining of the <see cref="T:ActiproSoftware.SyntaxEditor.Document" />.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Document.Text"><summary>
            Gets or sets the entire text of the document.
            </summary><value>The entire text of the document.</value></member><member name="P:ActiproSoftware.SyntaxEditor.Document.Characters(System.Int32)"><summary>
            Gets a character in the document.
            </summary><param name="index">The index of the character to return.</param><value>
            A character in the document.
            </value></member><member name="P:ActiproSoftware.SyntaxEditor.Document.Tokens"><summary>
            Gets the <see cref="T:ActiproSoftware.SyntaxEditor.TokenCollection" /> that stores the tokens in the document.
            </summary><value>The <see cref="T:ActiproSoftware.SyntaxEditor.TokenCollection" /> that stores the tokens in the document.</value></member></members></doc>